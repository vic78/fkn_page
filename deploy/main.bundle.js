(()=>{"use strict";class e{constructor(e=0,t=0){this.lineNumber=e,this.charNumber=t}}const t={inadmissibleSymbol:3,forbiddenCharacter:6,nameNotDescribed:104,breakOutOfLoop:105,identifierAlreadyUsed:106,variableNotDeclared:107,constantOrVariableNotDeclared:108,typesMismatch:109,typeNotDeclared:110,indexIsOutOfRange:111,identifierExpected:112,elementIsNotInitialized:113,notCallableElement:114,arrayExpected:115,recordPropertyIsNotDefined:116};class s{constructor(){this.errorCodeMapper=new Map([[1,"An error in primitive type"],[2,"Name expected"],[t.inadmissibleSymbol,"Inadmissible Symbol"],[t.forbiddenCharacter,"Forbidden character"],[t.nameNotDescribed,"Name is not described"],[t.breakOutOfLoop,"'break' is out of loop"],[t.identifierAlreadyUsed,"Identifier already used"],[t.variableNotDeclared,"Variable not declared"],[t.constantOrVariableNotDeclared,"Constant or variable not declared"],[t.typesMismatch,"Types mismatch"],[t.identifierExpected,"Identifier expected"],[t.indexIsOutOfRange,"Index is out of range"],[t.elementIsNotInitialized,"Element is not initialized"]])}getErrorTextByCode(e){return this.errorCodeMapper.has(e)?this.errorCodeMapper.get(e):null}}class i extends Error{constructor(e,t,s){super(t+` // line ${s.lineNumber} `+` column ${s.charNumber} `),this.errorCode=e,this.errorText=t,this.textPosition=s}}class r extends class{constructor(t,i){this.errorsDescription=new s,this.positionNow=new e,this.printer=t,this.reader=i,this.currentLine,this.currentLineErrors=[],this.lines=[],this.linePointer=0,this.currentLine,this.endOfFile=!1}setLines(e){this.lines=e.split(/\r?\n/),this.readNextLine()}getCurrentPosition(){return new e(this.positionNow.lineNumber,this.positionNow.charNumber)}nextCh(){return this.endOfFile&&this.positionNow.charNumber>=this.currentLine.length?null:(this.positionNow.charNumber===this.currentLine.length&&(this.currentLineErrors.length>0&&this.printer.listErrors(this.currentLineErrors),this.readNextLine(),this.currentLineErrors=[],this.positionNow.lineNumber++,this.positionNow.charNumber=0),this.currentLine[this.positionNow.charNumber++])}readNextLine(){var e=this.lines[this.linePointer++];this.currentLine=e.split(""),this.currentLine.push("\n"),this.endOfFile=this.linePointer===this.lines.length}addError(e,t=null,s=null){let r=this.errorsDescription.getErrorTextByCode(e)+(null===t?"":". "+t),n=null===s?this.getCurrentPosition():s;throw new i(e,r,n)}printListing(e=null){let t=e.textPosition.lineNumber;for(let e=0;e<=t;e++)this.printer.listLine(this.lines[e],e);this.printer.listError(e);for(let e=t+1;e<=this.lines.length-1;e++)this.printer.listLine(this.lines[e],e)}readWords(e){this.reader.readWords(e)}}{constructor(e,t,s=null){super(t,s),this.setLines(e)}}const n={star:21,slash:60,equal:16,comma:20,semicolon:14,colon:5,point:61,arrow:62,leftPar:9,rightPar:4,lBracket:11,rBracket:12,flPar:63,frPar:64,later:65,greater:66,laterEqual:67,greaterEqual:68,laterGreater:69,plus:70,minus:71,lComment:72,rComment:73,assign:51,twoPoints:74,at:75,ident:2,floatC:82,intC:15,charC:83,stringC:84,booleanC:85,caseSy:31,elseSy:32,fileSy:57,gotoSy:33,thenSy:52,untilSy:53,doSy:54,withSy:37,ifSy:56,ofSy:102,orSy:103,inSy:104,toSy:105,endSy:106,varSy:107,divSy:108,andSy:109,notSy:110,forSy:111,modSy:112,nilSy:113,setSy:114,typeSy:120,realSy:121,charSy:122,beginSy:123,whileSy:124,arraySy:125,constSy:126,labelSy:127,downtoSy:128,stringSy:129,packedSy:130,recordSy:131,repeatSy:132,integerSy:133,booleanSy:134,programSy:135,functionSy:136,procedureSy:137,breakSy:138,trueSy:139,falseSy:140};class a{constructor(){this.keyWordsCodes=new Map([["if",n.ifSy],["do",n.doSy],["of",n.ofSy],["or",n.orSy],["in",n.inSy],["to",n.toSy],["end",n.endSy],["var",n.varSy],["div",n.divSy],["and",n.andSy],["not",n.notSy],["for",n.forSy],["mod",n.modSy],["nil",n.nilSy],["set",n.setSy],["then",n.thenSy],["else",n.elseSy],["case",n.caseSy],["file",n.fileSy],["goto",n.gotoSy],["type",n.typeSy],["with",n.withSy],["real",n.realSy],["char",n.charSy],["true",n.trueSy],["begin",n.beginSy],["break",n.breakSy],["while",n.whileSy],["array",n.arraySy],["const",n.constSy],["label",n.labelSy],["until",n.untilSy],["false",n.falseSy],["downto",n.downtoSy],["string",n.stringSy],["packed",n.packedSy],["record",n.recordSy],["repeat",n.repeatSy],["program",n.programSy],["integer",n.integerSy],["boolean",n.booleanSy],["function",n.functionSy],["procedure",n.procedureSy]])}getSymbolCodeByKeyWord(e){let t=e.toLowerCase();return this.keyWordsCodes.has(t)?this.keyWordsCodes.get(t):n.ident}}class l{constructor(e,t,s,i){this.textPosition=e,this.symbolCode=t,this.stringValue=s,this.value=i}}class o extends l{constructor(e,t,s){super(e,t,s,s)}}class h extends l{constructor(e,t,s){super(e,t,s,parseFloat(s))}}class c extends l{constructor(e,t,s){super(e,t,s,Number.parseInt(s))}}class u extends l{constructor(e,t,s){super(e,t,s,s.replace(/'/g,""))}}class y extends l{constructor(e,t,s){super(e,t,s,s.replace(/'/g,""))}}class d extends l{constructor(e,t,s){super(e,t,s,"true"===s.toLowerCase())}}class p{constructor(e){this.fileIO=e,this.errorsCodes=t,this.token=null,this.currentWord=null,this.char=" ",this.symbol=null,this.MAX_IDENT=64,this.keyWords=new a,this.wordBuffer=null}nextSym(){return null===this.char?null:(this.skipWhiteSpaces(),this.token=this.fileIO.getCurrentPosition(),this.scanSymbol())}scanSymbol(){if(null===this.char)return null;if(null===this.wordBuffer?this.currentWord="":(this.currentWord=this.wordBuffer,this.wordBuffer=null),null!==/[a-z]/i.exec(this.char)){for(;null!==/\w/i.exec(this.char);)this.currentWord+=this.char,this.char=this.fileIO.nextCh();return this.getSymbol(this.keyWords.getSymbolCodeByKeyWord(this.currentWord))}if(null!==/[\d.]/.exec(this.char)){if(this.currentWord+=this.char,this.char=this.fileIO.nextCh(),".."===this.currentWord)return this.symbol=n.twoPoints,this.getSymbol(this.symbol);if("."===this.currentWord&&"."===this.char)return this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(n.twoPoints);if("."===this.currentWord&&null===/\d/.exec(this.char))return this.symbol=n.point,this.getSymbol(this.symbol);{let e="."===this.currentWord,t=null;for(;null!==/[\d.]/.exec(this.char);){if("."===this.char){if(e){if("."===t)return this.wordBuffer=".",new c(this.token,n.intC,this.currentWord);break}e=!0}t=this.char,this.currentWord+=this.char,this.char=this.fileIO.nextCh()}return e?new h(this.token,n.floatC,this.currentWord):new c(this.token,n.intC,this.currentWord)}}switch(this.currentWord+=this.char,this.char){case":":return this.char=this.fileIO.nextCh(),"="===this.char?(this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(n.assign)):this.getSymbol(n.colon);case"<":switch(this.char=this.fileIO.nextCh(),this.char){case"=":return this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(n.laterEqual);case">":return this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(n.laterGreater);default:return this.getSymbol(n.later)}case">":return this.char=this.fileIO.nextCh(),"="===this.char?(this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(n.greaterEqual)):this.getSymbol(n.greater);case"-":return this.char=this.fileIO.nextCh(),this.getSymbol(n.minus);case"+":return this.char=this.fileIO.nextCh(),this.getSymbol(n.plus);case"*":return this.char=this.fileIO.nextCh(),this.getSymbol(n.star);case"/":return this.char=this.fileIO.nextCh(),this.getSymbol(n.slash);case"=":return this.char=this.fileIO.nextCh(),this.getSymbol(n.equal);case",":return this.char=this.fileIO.nextCh(),this.getSymbol(n.comma);case";":return this.char=this.fileIO.nextCh(),this.getSymbol(n.semicolon);case"^":return this.char=this.fileIO.nextCh(),this.getSymbol(n.arrow);case"(":this.char=this.fileIO.nextCh();var e=null,t=this.currentWord;if("*"===this.char){do{e=t,t=this.fileIO.nextCh()}while("*"!==e||")"!==t);return this.char=this.fileIO.nextCh(),this.skipWhiteSpaces(),this.scanSymbol()}return this.getSymbol(n.leftPar);case")":return this.char=this.fileIO.nextCh(),this.getSymbol(n.rightPar);case"[":return this.char=this.fileIO.nextCh(),this.getSymbol(n.lBracket);case"]":return this.char=this.fileIO.nextCh(),this.getSymbol(n.rBracket);case"{":return this.char=this.fileIO.nextCh(),this.getSymbol(n.flPar);case"}":return this.char=this.fileIO.nextCh(),this.getSymbol(n.frPar);case"<":return this.char=this.fileIO.nextCh(),this.getSymbol(n.later);case">":return this.char=this.fileIO.nextCh(),this.getSymbol(n.greater);case"@":return this.char=this.fileIO.nextCh(),this.getSymbol(n.at);case"'":do{this.char=this.fileIO.nextCh(),this.currentWord+=this.char}while("'"!==this.char);return this.char=this.fileIO.nextCh(),3===this.currentWord.length?new u(this.token,n.charC,this.currentWord):new y(this.token,n.stringC,this.currentWord)}return this.addForbiddenCharacterError(this.char),this.char=this.fileIO.nextCh(),null}getSymbol(e){return e===n.trueSy||e===n.falseSy?new d(this.token,n.booleanC,this.currentWord):new o(this.token,e,this.currentWord)}skipWhiteSpaces(){for(var e=/\s/;null!==e.exec(this.char);)this.char=this.fileIO.nextCh()}addForbiddenCharacterError(e){this.fileIO.addError(this.errorsCodes.forbiddenCharacter,` '${e}'`,this.token)}}class m{constructor(){this.symbolCodeMapper=new Map([[n.star,"*"],[n.slash,"/"],[n.equal,"="],[n.comma,","],[n.semicolon,";"],[n.colon,":"],[n.point,"."],[n.arrow,"^"],[n.leftPar,"("],[n.rightPar,")"],[n.lBracket,"["],[n.rBracket,"]"],[n.flPar,"{"],[n.frPar,"}"],[n.later,"<"],[n.greater,">"],[n.laterEqual,"<="],[n.greaterEqual,">="],[n.laterGreater,"<>"],[n.plus,"+ "],[n.minus,"- "],[n.lComment,"(*"],[n.rComment,"*)"],[n.assign,":="],[n.twoPoints,".."],[n.ident,"Identifier"],[n.floatC,"Float Constant"],[n.intC,"Integer Constant"],[n.charC,"Character Constant"],[n.caseSy,"case"],[n.elseSy,"else"],[n.fileSy,"file"],[n.gotoSy,"goto"],[n.thenSy,"then"],[n.untilSy,"until"],[n.doSy,"do"],[n.withSy,"with"],[n.ifSy,"if"],[n.ofSy,"of"],[n.orSy,"or"],[n.inSy,"in"],[n.toSy,"to"],[n.endSy,"end"],[n.varSy,"var"],[n.divSy,"div"],[n.andSy,"and"],[n.notSy,"not"],[n.forSy,"for"],[n.modSy,"mod"],[n.nilSy,"nil"],[n.setSy,"set"],[n.typeSy,"type"],[n.realSy,"real"],[n.charSy,"char"],[n.beginSy,"begin"],[n.whileSy,"while"],[n.arraySy,"array"],[n.constSy,"const"],[n.labelSy,"label"],[n.downtoSy,"downto"],[n.stringSy,"string"],[n.packedSy,"packed"],[n.recordSy,"record"],[n.repeatSy,"repeat"],[n.integerSy,"integer"],[n.programSy,"program"],[n.functionSy,"function"],[n.procedureSy,"procedure"]])}getSymbolTextByCode(e){return this.symbolCodeMapper.has(e)?this.symbolCodeMapper.get(e):null}}class f{constructor(e){this.symbol=e}}class b extends f{constructor(e,t,s){super(e),this.destination=t,this.sourceExpression=s}}class g extends f{constructor(e,t,s){super(e),this.identifier=t,this.indexRing=s}}class S extends f{constructor(e,t,s=null){super(e),this.indexExpression=t,this.indexRing=s,this.evaluatedIndexExpression=null}appendIndexRing(e){null===this.indexRing?this.indexRing=e:this.indexRing.appendIndexRing(e)}}class x extends f{constructor(e,t){super(e),this.pointer=t}}class w extends f{constructor(e,t){super(e),this.identifier=t}}class C extends f{constructor(e,t,s){super(e),this.baseExpression=t,this.subField=s}}class v extends f{constructor(e,t,s){super(e),this.left=t,this.right=s}}class I extends v{constructor(e,t,s){super(e,t,s)}}class E extends v{constructor(e,t,s){super(e,t,s)}}class P extends v{constructor(e,t,s){super(e,t,s)}}class O extends v{constructor(e,t,s){super(e,t,s)}}class L extends f{constructor(e){super(e);let t=null;switch(e.symbolCode){case n.intC:t=0;break;case n.floatC:t=1;break;case n.charC:t=2;break;case n.stringC:t=7;break;case n.booleanC:t=6;break;case n.ident:t=5}this.typeId=t}}class T extends f{constructor(e){super(e)}}class V extends f{constructor(e,t,s=[]){super(e),this.identifierBranch=t,this.parameters=s}}class k extends f{constructor(e,t){super(e),this.typeId=t}}class N extends k{constructor(e,t){super(e,t)}toString(){switch(this.typeId){case 6:return"boolean";case 2:return"char";case 0:return"integer";case 1:return"real";case 7:return"string"}}}class B extends k{constructor(e,t){super(e,4);let s=this;this.typesList={},t.forEach((e=>{let t=e.type;e.identifiers.forEach((e=>{let i=e.symbol.value;s.typesList[i]=t}))}))}toString(){let e=[],t=null;for(t in this.typesList)e.push(`${t}: `+this.typesList[t].toString());return`record(${e.join(", ")})`}}class R extends k{constructor(e){super(e,9)}toString(){return this.symbol.stringValue}}class M extends f{constructor(e,t,s,i){super(e),this.identifiers=t,this.variablesType=s,this.initialValue=i}}class D extends f{constructor(e,t,s,i=null){super(e),this.identifier=t,this.value=s,this.type=i}}class A extends f{constructor(e,t,s){super(e),this.identifier=t,this.type=s}}class W extends f{constructor(e){super(e),this.sentences=[]}}class $ extends f{constructor(e,t,s,i){super(e),this.condition=t,this.left=s,this.right=i}}class q extends v{constructor(e,t,s){super(e,t,s)}}class j extends v{constructor(e,t,s){super(e,t,s)}}class F extends v{constructor(e,t,s){super(e,t,s)}}class z extends v{constructor(e,t,s){super(e,t,s)}}class U extends f{constructor(e,t){super(e),this.value=t}}class G extends f{constructor(e,t){super(e),this.value=t}}class K extends f{constructor(e){super(e),this.name=null,this.vars=[],this.procedures={},this.functions={},this.sentences=[],this.types=[]}getType(){return this.type}}class _ extends K{constructor(e){super(e)}}class X extends K{constructor(e,t=null){super(e),this.type=t}}class H extends K{constructor(e,t=null){super(e),this.type=t}}class J extends v{constructor(e,t,s){super(e,t,s)}}class Q extends v{constructor(e,t,s){super(e,t,s)}}class Y extends v{constructor(e,t,s){super(e,t,s)}}class Z extends v{constructor(e,t,s){super(e,t,s)}}class ee extends v{constructor(e,t,s){super(e,t,s)}}class te extends v{constructor(e,t,s){super(e,t,s)}}class se extends v{constructor(e,t,s){super(e,t,s)}}class ie extends k{constructor(e,t=null,s=null){super(e,11),this.returnType=s,this.signature=t}toString(){let e=[];return this.signature.length>0&&this.signature.forEach((function(t,s){let i=t.identifiers.map((e=>e.symbol.stringValue)).join(", ");e[s]=i+": "+t.type.toString()})),`function(${e.join("; ")}): ${this.returnType.toString()}`}}class re extends k{constructor(e,t,s){super(e,10),this.identifiers=s,this.signature=t}toString(){let e=[];return this.signature.length>0&&this.signature.forEach((function(t,s){let i=t.identifiers.map((e=>e.symbol.stringValue)).join(", ");e[s]=i+": "+t.type.toString()})),`procedure(${e.join("; ")})`}}class ne extends f{constructor(e,t=!1,s=null,i=[]){super(e),this.type=s,this.identifiers=i,this.byReference=t}}class ae extends k{constructor(e){super(e,5),this.items=[]}toString(){return`enum(${this.items.map((e=>e.symbol.stringValue)).join(", ")})`}}class le extends k{constructor(e,t=null,s=null,i=null){super(e,3),this.typeOfElements=i,this.leftIndex=t,this.rightIndex=s}toString(){return`array [${this.leftIndex.symbol.value}..${this.rightIndex.symbol.value}] of ${this.typeOfElements}`}}class oe extends k{constructor(e,t){super(e,8),this.type=t}toString(){return`^${this.type}`}}class he extends f{constructor(e,t,s){super(e),this.condition=t,this.body=s}}class ce extends f{constructor(e,t,s){super(e),this.condition=t,this.body=s}}class ue extends f{constructor(e,t=null,s=[],i=null){super(e),this.switchExpression=t,this.cases=s,this.elseSentence=i}}class ye extends f{constructor(e,t=[],s=null){super(e),this.constants=t,this.operator=s}}class de extends f{constructor(e,t,s,i,r,n){super(e),this.variableIdentifier=t,this.initExpression=s,this.lastExpression=i,this.countDown=r,this.body=n}}class pe extends f{constructor(e){super(e)}}class me{constructor(e){this.lexicalAnalyzer=e,this.symbolsDescription=new m,this.symbol=null,this.tree=null,this.trees=[],this.treesCounter=0,this.errorDetected=!1}nextSym(){this.symbol=this.lexicalAnalyzer.nextSym()}anotherSymbolExpected(e){let s=`'${this.symbolsDescription.getSymbolTextByCode(e)}' expected but '${this.symbol.stringValue}' found.`;this.lexicalAnalyzer.fileIO.addError(t.inadmissibleSymbol,s,this.symbol.textPosition)}accept(e){if(null===this.symbol)return null;this.symbol.symbolCode===e?this.nextSym():(this.errorDetected=!0,this.anotherSymbolExpected(e),this.goToEnd())}analyze(){return this.tree=new _(this.symbol),this.trees[this.treesCounter]=this.tree,this.nextSym(),this.scanProgramme(),this.tree}scanProgramme(){this.symbol.symbolCode===n.programSy&&(this.nextSym(),this.tree.name=this.symbol.stringValue,this.accept(n.ident),this.accept(n.semicolon)),this.scanBlock(),this.accept(n.point)}scanBlock(){this.labelPart(),this.constPart(),this.typePart(),this.varPart(),this.procFuncPart(),this.statementPart()}labelPart(){}constPart(){if(this.symbol.symbolCode===n.constSy){this.tree.constants=[],this.nextSym();do{let e=this.symbol;this.accept(n.ident);let t=null;this.symbol.symbolCode===n.colon&&(this.nextSym(),t=this.scanType());let s=this.symbol;this.accept(n.equal);let i=this.scanConstant(),r=new D(s,new T(e),i,t);this.tree.constants.push(r),this.accept(n.semicolon)}while(this.symbol.symbolCode===n.ident)}}typePart(){if(this.tree.types=[],this.symbol.symbolCode===n.typeSy){this.nextSym();do{let e=this.symbol;this.accept(n.ident);let t=this.symbol;this.accept(n.equal);let s=this.scanType(),i=new A(t,new T(e),s);this.tree.types.push(i),this.accept(n.semicolon)}while(this.symbol.symbolCode===n.ident)}}varPart(){if(this.symbol.symbolCode===n.varSy){this.nextSym();do{this.tree.vars.push(this.scanVarDeclaration()),this.accept(n.semicolon)}while(!this.errorDetected&&this.symbol.symbolCode===n.ident)}}scanVarDeclaration(){let e=[],t=null,s=!1;do{t=new T(this.symbol),this.accept(n.ident),e.push(t),s=this.symbol.symbolCode===n.comma,s&&this.nextSym()}while(!this.errorDetected&&s);let i=this.symbol;this.accept(n.colon);let r=this.scanType(),a=null;return this.symbol.symbolCode===n.equal&&(this.nextSym(),a=this.scanConstant()),new M(i,e,r,a)}scanListArrayType(e){let t=null,s=this.scanConstant();this.accept(n.twoPoints);let i=this.scanConstant();return this.symbol.symbolCode===n.comma?(e=this.symbol,this.nextSym(),t=this.scanListArrayType()):(this.accept(n.rBracket),this.accept(n.ofSy),t=this.scanType()),new le(e,s,i,t)}scanType(){let e=null;if(this.symbol.symbolCode===n.arrow){e=this.symbol,this.nextSym();let t=this.scanType();return new oe(e,t)}if(this.symbol.symbolCode===n.integerSy||this.symbol.symbolCode===n.booleanSy||this.symbol.symbolCode===n.realSy||this.symbol.symbolCode===n.stringSy||this.symbol.symbolCode===n.charSy){e=this.symbol,this.nextSym();let t=null;switch(e.symbolCode){case n.charSy:t=2;break;case n.integerSy:t=0;break;case n.stringSy:t=7;break;case n.realSy:t=1;break;case n.booleanSy:t=6}return new N(e,t)}if(this.symbol.symbolCode===n.ident)return e=this.symbol,this.nextSym(),new R(e);if(this.symbol.symbolCode===n.arraySy)return e=this.symbol,this.nextSym(),this.accept(n.lBracket),this.scanListArrayType(e);if(this.symbol.symbolCode===n.leftPar){let e=new ae(this.symbol),t=null;do{this.nextSym(),t=new T(this.symbol),e.items.push(t),this.accept(n.ident)}while(this.symbol.symbolCode===n.comma);return this.accept(n.rightPar),e}if(this.symbol.symbolCode===n.functionSy){let e=new ie(this.symbol);return this.nextSym(),e.signature=this.scanParametersList(),this.accept(n.colon),e.returnType=this.scanType(),e}if(this.symbol.symbolCode===n.procedureSy){let e=new re(this.symbol);return this.nextSym(),e.signature=this.scanParametersList(),e}if(this.symbol.symbolCode===n.recordSy){let e=this.symbol;this.nextSym();let t=[];do{if(t.length>0&&(this.symbol.symbolCode===n.semicolon&&this.nextSym(),this.symbol.symbolCode===n.endSy))break;let e=new ne(this.symbol),s=[];do{s.length>0&&this.symbol.symbolCode===n.comma&&this.nextSym(),s.push(new T(this.symbol)),this.accept(n.ident)}while(this.symbol.symbolCode===n.comma);this.accept(n.colon),e.identifiers=s,e.type=this.scanType(),t.push(e)}while(this.symbol.symbolCode===n.semicolon);return this.accept(n.endSy),new B(e,t)}}procFuncPart(){for(;this.symbol.symbolCode===n.procedureSy||this.symbol.symbolCode===n.functionSy;)switch(this.symbol.symbolCode){case n.procedureSy:this.scanProcedure();break;case n.functionSy:this.scanFunction()}}scanProcedure(){let e=this.symbol;this.accept(n.procedureSy);let t=new T(this.symbol);this.accept(n.ident);let s=new re(e);s.signature=this.scanParametersList(),this.treesCounter++,this.tree=new X(e,s),this.trees[this.treesCounter]=this.tree,this.tree.name=t;let i=this.tree.name.symbol.value.toLowerCase();this.tree.signature=this.scanParametersList(),this.accept(n.semicolon),this.scanBlock(),this.accept(n.semicolon),this.trees[this.treesCounter-1].procedures[i]=this.tree,this.treesCounter--,this.tree=this.trees[this.treesCounter]}scanFunction(){let e=this.symbol;this.accept(n.functionSy);let t=new T(this.symbol);this.accept(n.ident);let s=new ie(e);s.signature=this.scanParametersList(),this.accept(n.colon),s.returnType=this.scanType(),this.treesCounter++,this.tree=new H(e,s),this.trees[this.treesCounter]=this.tree,this.tree.name=t;let i=this.tree.name.symbol.value.toLowerCase();this.accept(n.semicolon),this.scanBlock(),this.accept(n.semicolon),this.trees[this.treesCounter-1].functions[i]=this.tree,this.treesCounter--,this.tree=this.trees[this.treesCounter]}scanParametersList(){let e=[];if(this.symbol.symbolCode===n.leftPar){if(this.nextSym(),this.symbol.symbolCode!==n.rightPar)do{e.length>0&&this.symbol.symbolCode===n.semicolon&&this.nextSym();let t=!1;this.symbol.symbolCode===n.varSy&&(t=!0,this.nextSym());let s=new ne(this.symbol,t),i=[];do{i.length>0&&this.symbol.symbolCode===n.comma&&this.nextSym(),i.push(new T(this.symbol)),this.accept(n.ident)}while(this.symbol.symbolCode===n.comma);this.accept(n.colon),s.identifiers=i,s.type=this.scanType(),e.push(s)}while(this.symbol.symbolCode===n.semicolon);this.accept(n.rightPar)}return e}statementPart(){for(this.accept(n.beginSy);null!==this.symbol&&this.symbol.symbolCode!==n.endSy;){let e=this.scanSentence();this.tree.sentences.push(e),this.symbol.symbolCode!==n.endSy&&this.accept(n.semicolon)}this.accept(n.endSy)}goToEnd(){do{this.nextSym()}while(null!==this.symbol)}scanSentence(){if(this.symbol.symbolCode===n.ident){let e=this.scanIdentifierBranch();if(this.symbol.symbolCode===n.assign){let t=this.symbol;return this.nextSym(),new b(t,e,this.scanExpression())}return e}if(this.symbol.symbolCode===n.beginSy)return this.scanCompoundOperator();if(this.symbol.symbolCode===n.ifSy){let e=this.symbol;this.nextSym();let t=this.scanExpression();this.accept(n.thenSy);let s=this.scanSentence(),i=null;return this.symbol.symbolCode===n.elseSy&&(this.nextSym(),i=this.scanSentence()),new $(e,t,s,i)}if(this.symbol.symbolCode===n.whileSy){let e=this.symbol;this.nextSym();let t=this.scanExpression();this.accept(n.doSy);let s=this.scanSentence();return new he(e,t,s)}if(this.symbol.symbolCode===n.repeatSy){let e=this.symbol,t=new W(e);for(this.nextSym();null!==this.symbol&&this.symbol.symbolCode!==n.untilSy;){let e=this.scanSentence();t.sentences.push(e),this.accept(n.semicolon)}this.accept(n.untilSy);let s=t,i=this.scanExpression();return new ce(e,i,s)}if(this.symbol.symbolCode===n.forSy){let e=this.symbol;this.nextSym();let s=this.symbol;this.accept(n.ident);let i=new T(s);this.symbol,this.accept(n.assign);let r=this.scanSimpleExpression(),a=!1;switch(this.symbol.symbolCode){case n.downtoSy:a=!0;break;case n.toSy:a=!1;break;default:let e=`Symbols 'to' or 'downto' expected but '${this.symbol.stringValue}' found.`;this.addError(t.inadmissibleSymbol,e,this.symbol)}this.nextSym();let l=this.scanSimpleExpression();this.accept(n.doSy);let o=this.scanSentence();return new de(e,i,r,l,a,o)}if(this.symbol.symbolCode===n.breakSy){let e=this.symbol;return this.nextSym(),new pe(e)}if(this.symbol.symbolCode===n.caseSy){let e=this.symbol;this.nextSym();let t=this.scanExpression();this.accept(n.ofSy);let s=new ue(e,t);do{let e=new ye(this.symbol),t=null;do{e.constants.push(this.scanConstant()),t=this.symbol.symbolCode===n.comma,t&&this.nextSym()}while(t);this.accept(n.colon),e.operator=this.scanSentence(),s.cases.push(e),this.symbol.symbolCode!==n.endSy&&this.symbol.symbolCode!==n.elseSy?this.accept(n.semicolon):this.symbol.symbolCode===n.semicolon&&this.nextSym()}while(this.symbol.symbolCode!==n.endSy&&this.symbol.symbolCode!==n.elseSy);return this.symbol.symbolCode===n.elseSy&&(this.nextSym(),s.elseSentence=this.scanSentence(),this.symbol.symbolCode===n.semicolon&&this.accept(n.semicolon)),this.accept(n.endSy),s}}scanCompoundOperator(){let e=new W(this.symbol);for(this.accept(n.beginSy);null!==this.symbol&&this.symbol.symbolCode!==n.endSy;){let t=this.scanSentence();e.sentences.push(t),this.symbol.symbolCode!==n.endSy&&this.accept(n.semicolon)}return this.accept(n.endSy),e}scanIndicesBrackets(e){this.accept(n.lBracket);let t=new S(e,this.scanExpression());for(;this.symbol.symbolCode===n.comma;){let e=this.symbol;this.nextSym();let s=new S(e,this.scanExpression());t.appendIndexRing(s)}return this.accept(n.rBracket),t}scanIndices(e){this.symbol;let t=this.scanIndicesBrackets(this.symbol);for(;this.symbol.symbolCode===n.lBracket;){let e=this.symbol,s=this.scanIndicesBrackets(e);t.appendIndexRing(s)}return t}scanIdentifierBranch(e=null){let t=null;if(null===e){let e=this.symbol;this.nextSym(),t=new T(e)}else t=e;switch(this.symbol.symbolCode){case n.leftPar:let e=this.symbol;this.nextSym();let s=this.scanParameters();return this.scanIdentifierBranch(new V(e,t,s));case n.lBracket:let i=this.symbol;return this.scanIdentifierBranch(new g(i,t,this.scanIndices()));case n.point:let r=this.symbol;this.nextSym();let a=new T(this.symbol);return this.accept(n.ident),this.scanIdentifierBranch(new C(r,t,a));case n.arrow:let l=this.symbol;return this.nextSym(),this.scanIdentifierBranch(new x(l,t));default:return t}}scanExpression(){if(this.symbol.symbolCode===n.at){let e=this.symbol;this.nextSym();let t=this.symbol;this.accept(n.ident);let s=new T(t),i=this.scanIdentifierBranch(s);return new w(e,i)}let e=this.scanSimpleExpression();switch(this.symbol.symbolCode){case n.equal:return this.nextSym(),new Q(this.symbol,e,this.scanSimpleExpression());case n.later:return this.nextSym(),new Z(this.symbol,e,this.scanSimpleExpression());case n.greater:return this.nextSym(),new ee(this.symbol,e,this.scanSimpleExpression());case n.laterGreater:return this.nextSym(),new Y(this.symbol,e,this.scanSimpleExpression());case n.laterEqual:return this.nextSym(),new se(this.symbol,e,this.scanSimpleExpression());case n.greaterEqual:return this.nextSym(),new te(this.symbol,e,this.scanSimpleExpression());case n.inSy:return this.nextSym(),new J(this.symbol,e,this.scanSimpleExpression());default:return e}}scanSimpleExpression(){let e=!1,t=!1,s=null,i=null;switch(this.symbol.symbolCode){case n.minus:e=!0;case n.plus:i=this.symbol,this.nextSym();break;case n.notSy:t=!0,i=this.symbol,this.nextSym()}for(s=this.scanTerm(),e&&(s=new U(i,s)),t&&(s=new G(i,s));null!==this.symbol&&(this.symbol.symbolCode===n.plus||this.symbol.symbolCode===n.minus||this.symbol.symbolCode===n.orSy);)switch(this.symbol.symbolCode){case n.plus:this.nextSym(),s=new P(this.symbol,s,this.scanTerm());break;case n.minus:this.nextSym(),s=new O(this.symbol,s,this.scanTerm());break;case n.orSy:this.nextSym(),s=new z(this.symbol,s,this.scanTerm())}return s}scanTerm(){let e=this.scanMultiplier(),t=null;for(;[n.star,n.slash,n.divSy,n.modSy,n.andSy].includes(this.symbol.symbolCode);)switch(t=this.symbol.symbolCode,this.nextSym(),t){case n.star:e=new I(this.symbol,e,this.scanMultiplier());break;case n.slash:e=new E(this.symbol,e,this.scanMultiplier());break;case n.divSy:e=new q(this.symbol,e,this.scanMultiplier());break;case n.modSy:e=new j(this.symbol,e,this.scanMultiplier());break;case n.andSy:e=new F(this.symbol,e,this.scanMultiplier())}return e}scanMultiplier(){if(this.symbol.symbolCode===n.ident)return this.scanIdentifierBranch();if(this.symbol.symbolCode===n.floatC||this.symbol.symbolCode===n.intC||this.symbol.symbolCode===n.stringC||this.symbol.symbolCode===n.charC||this.symbol.symbolCode===n.booleanC)return this.scanUnsignedConstant();if(this.symbol.symbolCode===n.leftPar){this.nextSym();let e=this.scanExpression();return this.accept(n.rightPar),e}}scanParameters(){let e=[];if(this.symbol.symbolCode!==n.rightPar)do{e.length>0&&this.symbol.symbolCode===n.comma&&this.nextSym(),e.push(this.scanExpression())}while(this.symbol.symbolCode===n.comma);return this.accept(n.rightPar),e}scanUnsignedConstant(){let e=null;switch(this.symbol.symbolCode){case n.floatC:case n.intC:case n.charC:case n.stringC:case n.booleanC:e=new L(this.symbol),this.nextSym()}return e}scanConstant(){let e=!1,t=null;switch(this.symbol.symbolCode){case n.minus:t=this.symbol,this.nextSym(),e=!0;break;case n.plus:t=this.symbol,this.nextSym()}let s=null;switch(this.symbol.symbolCode){case n.floatC:case n.intC:case n.charC:case n.stringC:case n.booleanC:case n.ident:s=new L(this.symbol),this.nextSym()}return e&&(s=new U(t,s)),s}addError(e,t=null,s){this.lexicalAnalyzer.fileIO.addError(e,t,s.textPosition)}}class fe{constructor(){this.type=null,this.typeId=null}getType(){return this.type?this.type:this.typeId}}class be extends fe{constructor(e,t){super(),this.value=e,this.typeId=t,this.type=!1}clone(){return new be(this.value,this.typeId)}}class ge extends fe{constructor(e,t){super(),this.value=e,this.typeId=5,this.type=t}getIndex(){let e=this.type.items.length;for(let t=0;t<e;t++)if(this.type.items[t].symbol.stringValue.toLowerCase()===this.value.symbol.stringValue.toLowerCase())return t}clone(){return new ge(this.value,this.type)}}class Se extends fe{constructor(e,t){super(),this.typeId=3,this.type=e,this.scope=t,this.items=[],this.leftIntegerIndex=0,this.rightIntegerIndex=null,this.offset=null,this.arrayLength=null}setValue(e,s,i){let r=e.evaluatedIndexExpression,n=this.scope.getIntegerValueOfIndexVariable(r)+this.offset;n<0||n>=this.arrayLength?this.scope.addError(t.indexIsOutOfRange,"",e):void 0===this.items[n]&&(this.items[n]=this.scope.createVariable(this.type.typeOfElements,i));let a=this.items[n];null===e.indexRing?a.value=i.value:e.indexRing instanceof S&&a.setValue(e.indexRing,s,i)}getByIndexRing(e){let s=e.evaluatedIndexExpression,i=this.scope.getIntegerValueOfIndexVariable(s)+this.offset;if(!(i<0||i>=this.arrayLength)){void 0===this.items[i]&&(this.items[i]=this.scope.createDefaultVariable(this.type.typeOfElements));let t=this.items[i];return e.indexRing instanceof S?t.getByIndexRing(e.indexRing):t}this.scope.addError(t.indexIsOutOfRange,"",e)}clone(){let e=new Se(this.type,this.scope);return e.rightIntegerIndex=this.rightIntegerIndex,e.offset=this.offset,e.arrayLength=this.arrayLength,e.parentArray=this.parentArray,this.items.forEach(((t,s)=>{e.items[s]=t.clone()})),e}}class xe extends fe{constructor(e,t){super(),this.typeId=8,this.type=new oe(null,t),this.variable=e}clone(){return new xe(this.variable,this.type)}}class we extends fe{constructor(e,t){super(),this.typeId=4,this.type=e,this.items={},this.scope=t}setPropertyByPropertyIdentifier(e,s){let i=e.symbol.value;this.type.typesList.hasOwnProperty(i)?this.items[i]=s:this.scope.addError(t.indexIsOutOfRange,`Property ${i} is not defined.`,e)}getByPropertyIdentifier(e){let s=e.symbol.value;if(this.type.typesList.hasOwnProperty(s)){if(!this.items.hasOwnProperty(s)){let e=this.type.typesList[s];this.items[s]=this.scope.createDefaultVariable(e)}return this.items[s]}this.scope.addError(t.indexIsOutOfRange,`Property ${s} is not defined.`,e)}clone(){let e=new we(this.type,this.scope),t=null;for(t in this.items)e.items[t]=this.items[t].clone(this.scope);return e}}class Ce extends fe{constructor(e,t=null){super(),this.type=e,this.typeId=e.typeId,this.value=t}clone(){return new Ce(this.type,this.value)}}class ve extends K{constructor(){super(),this.vars=[],this.signature=[],this.sentences=[],this.name=null}async innerRun(){}}class Ie extends ve{constructor(){super(),this.returnType=null}}class Ee{constructor(e=null){this.parentScope=e,this.items={},this.constants={},this.enumsItems={},this.types={},this.cycleDepth=0,this.errorsDescription=new s,this.parametersList=null,this.callableName=null}addVariable(e,s,i=null,r=null){let n=e.symbol.value.toLowerCase();this.constants.hasOwnProperty(n)?this.addError(t.identifierAlreadyUsed,`Constant '${n}' declared.`,null===r?s:r):this.items.hasOwnProperty(n)?this.addError(t.identifierAlreadyUsed,`Variable '${n}' already declared.`,null===r?s:r):this.items[n]=this.createVariable(s,i)}createVariable(e,t=null){let s=this.resolveNamedType(e);if(s instanceof N){if(null===t)switch(s.typeId){case 0:case 1:t=0;break;case 2:t=String.fromCharCode(0);break;case 7:t=""}return new be(t,s.typeId)}if(s instanceof ae)return null===t&&(t=s.items[0]),new ge(t,s);if(s instanceof le)return this.createArrayVariable(t,e);if(s instanceof oe){let s=this.resolveNamedType(e.type);return new xe(t,s)}return s instanceof ie||s instanceof re||s instanceof B?this.createDefaultVariable(s):void 0}getIntegerValueOfIndexConstant(e){if(e instanceof L)switch(e.typeId){case 0:return e.symbol.value;case 2:return e.symbol.value.charCodeAt(0);case 5:return this.getEnumElement(e).getIndex()}else if(e instanceof U){let s=e.value;if(s instanceof L&&0===s.typeId)return-s.symbol.value;this.addError(t.typesMismatch,"Integer constant expected after unary minus.",s)}}getIntegerValueOfIndexVariable(e){switch(e.typeId){case 0:return e.value;case 2:return e.value.charCodeAt(0);case 5:return this.getEnumElement(e.value).getIndex()}}createArrayVariable(e,t){let s=this.resolveNamedType(t),i=new Se(s,this);i.parentArray=e;let r=s.leftIndex,n=s.rightIndex,a=this.getIntegerValueOfIndexConstant(r),l=this.getIntegerValueOfIndexConstant(n),o=Math.min(a,l),h=Math.max(a,l),c=-o;return i.offset=c,i.arrayLength=h-o+1,i.leftIntegerIndex=0,i.rightIntegerIndex=h,i.rightIntegerIndex=h,i}resolveNamedType(e){if(e instanceof R){let t=e.symbol.stringValue,s=this.getType(t);return this.resolveNamedType(s)}return e}setValue(e,s,i,r=null){let n=null;e instanceof T?n=e:e instanceof g&&(n=e.identifier);let a=n.symbol.stringValue.toLowerCase();if(this.items.hasOwnProperty(a)){let n=this.items[a];if(n instanceof be||n instanceof ge||n instanceof Ce)this.sameType(n.getType(),s)?this.items[a].value=i:this.addTypeMismatchError(s,n,r);else if(n instanceof Se){let t=null;if(e instanceof T)t=n.type,this.sameType(s,t)?this.setVariableObject(e,i.clone()):this.addTypeMismatchError(s,n,r);else if(e instanceof g){let a=e.indexRing;t=this.getDestinationType(n.type,a),this.sameType(s,t)?(i instanceof Se&&(i=i.clone()),n.setValue(a,s,i)):this.addTypeMismatchError(s,n,r)}}else n instanceof xe&&s instanceof oe?this.sameType(n.type,s)?n.variable=i.variable:this.addTypeMismatchError(s,n,r):this.addError(t.typesMismatch,null,r)}else this.parentScope?this.parentScope.setValue(e,s,i,r):this.addError(t.variableNotDeclared,`Variable '${a}' not declared.`,r)}setVariableValue(e,s,i=null){let r=s.getType(),n=null;e instanceof T?n=e:e instanceof g&&(n=e.identifier);let a=n.symbol.stringValue.toLowerCase();if(this.items.hasOwnProperty(a)){let n=this.items[a];if((n instanceof be||n instanceof ge||n instanceof Ce||n instanceof Se&&e instanceof T||n instanceof we)&&(this.sameType(n.getType(),r)||this.addTypeMismatchError(r,n,i)),n instanceof be||n instanceof ge||n instanceof Ce)this.items[a].value=s.value;else if(n instanceof Se){if(e instanceof T)this.setVariableObject(e,s.clone());else if(e instanceof g){let t=e.indexRing,a=this.getDestinationType(n.type,t);this.sameType(r,a)?(s=s.clone(),n.setValue(t,r,s)):this.addTypeMismatchError(r,n,i)}}else n instanceof we?this.setVariableObject(e,s.clone()):n instanceof xe&&r instanceof oe?this.sameType(n.type,r)?n.variable=s.variable:this.addTypeMismatchError(r,n,i):this.addError(t.typesMismatch,null,i)}else this.parentScope?this.parentScope.setVariableValue(e,s,i):this.addError(t.variableNotDeclared,`Variable '${a}' not declared.`,i)}setRecordVariableProperty(e,s,i){let r=i.getType(),n=e.getByPropertyIdentifier(s);this.sameType(n.getType(),r)||this.addTypeMismatchError(r,n,s),n instanceof be||n instanceof ge||n instanceof Ce?n.value=i.value:n instanceof Se||n instanceof we?e.setPropertyByPropertyIdentifier(s,i.clone()):this.addError(t.typesMismatch,null,s)}setVariableObject(e,t){let s=e.symbol.stringValue.toLowerCase();this.items[s]=t}addTypeMismatchError(e,s,i){let r=Number.isInteger(e)?new N(null,e):e,n=!1===s.type?new N(null,s.typeId):s.type;this.addError(t.typesMismatch,`Type ${n} expected but ${r} found.`,i)}getDestinationType(e,t){return e instanceof le&&t&&null!==t?this.getDestinationType(e.typeOfElements,t.indexRing):e}getVariable(e){let t=e.toLowerCase();return this.items.hasOwnProperty(t)?this.items[t]:this.parentScope?this.parentScope.getVariable(e):null}getElementByIdentifier(e){if(e instanceof T){let t=e.symbol.value.toLowerCase();return this.constants.hasOwnProperty(t)?this.constants[t]:this.items.hasOwnProperty(t)?this.items[t]:this.enumsItems.hasOwnProperty(t)?this.enumsItems[t]:this.parentScope?this.parentScope.getElementByIdentifier(e):null}}getEnumElement(e){let s=e.symbol.value.toLowerCase();if(this.enumsItems.hasOwnProperty(s))return this.enumsItems[s];this.addError(t.variableNotDeclared,`Enum element '${s}' not declared.`,e)}sameType(e,t){if(Number.isInteger(e)&&Number.isInteger(t))return e===t;if(Number.isInteger(e)&&!Number.isInteger(t))return e===t.typeId;if(Number.isInteger(t)&&!Number.isInteger(e))return e.typeId===t;if(e.constructor!==t.constructor)return!1;if(e instanceof N)return e.typeId===t.typeId;if(e instanceof ae)return Object.is(e,t);if(e instanceof ie||e instanceof re){let s=this.getParametersArray(e),i=this.getParametersArray(t);return s.length===i.length&&(!(e instanceof ie)||this.sameType(e.returnType,t.returnType))}if(e instanceof le)return this.sameType(e.typeOfElements,t.typeOfElements)&&e.leftIndex.symbol.value===t.leftIndex.symbol.value&&e.rightIndex.symbol.value===t.rightIndex.symbol.value;if(e instanceof oe)return this.sameType(e.type,t.type);if(e instanceof B){let s=Object.keys(e.typesList).length===Object.keys(t.typesList).length,i=null;for(i in e.typesList){if(!s)return!1;s=s&&t.typesList.hasOwnProperty(i)&&this.sameType(e.typesList[i],t.typesList[i])}return s}}getParametersArray(e){let t=[],s=0,i=e.signature.length;for(let r=0;r<i;r++){let i=e.signature[r],n=i.identifiers.length;for(let e=0;e<n;e++)t[s++]=i}return t}addError(e,t=null,s=null){let r=this.errorsDescription.getErrorTextByCode(e)+(null===t?"":". "+t),n=null===s?null:s.symbol.textPosition;throw new i(e,r,n)}addType(e){let s=e.identifier.symbol.stringValue.toLowerCase();if(this.types.hasOwnProperty(s))this.addError(t.identifierAlreadyUsed,`Type '${s}' already declared.`,e);else if(this.types[s]=e.type,e.type instanceof ae){let s=this;e.type.items.forEach((function(i){let r=i.symbol.stringValue.toLowerCase();s.enumsItems.hasOwnProperty(r)&&s.addError(t.identifierAlreadyUsed,`Enumeration item '${r}' already declared.`,i),s.enumsItems[r]=new ge(i,e.type)}))}}getType(e,s=null){let i=e.toLowerCase();if(this.types.hasOwnProperty(i))return this.types[i];this.addError(t.typeNotDeclared,`Type '${i}' not declared.`,s)}getParametersList(){return this.parametersList}setParametersList(e){this.parametersList=e}addConstant(e){let s=e.identifier.symbol.stringValue,i=e.type,r=e.value,n=s.toLowerCase();if(this.constants.hasOwnProperty(n))this.addError(t.identifierAlreadyUsed,`Constant '${n}' already declared.`,e);else{let e=null,t=this.resolveNamedType(i);(null===t||t instanceof N)&&(e=new be(r.symbol.value,i?t.typeId:r.typeId)),this.constants[n]=e}}getVariableByReference(e){let s=e.symbol.value.toLowerCase();if(this.items.hasOwnProperty(s))return this.items[s];{let i=this.parentScope.getVariableByReference(e);if(i)return i;this.addError(t.variableNotDeclared,`Variable '${s}' not declared.`,e)}}addVariableByReference(e,t){let s=t.symbol.value.toLowerCase(),i=this.parentScope.getVariableByReference(e);this.items[s]=i}createDefaultVariable(e){if(e instanceof N){let t=null;switch(e.typeId){case 6:t=!1;break;case 2:t=String.fromCharCode(0);break;case 0:case 1:t=0;break;case 7:t=""}return new be(t,e.typeId)}if(e instanceof B)return new we(e,this);if(e instanceof re){let t=new ve;return t.signature=e.signature,t.type=e,new Ce(e,t)}if(e instanceof oe)return new xe(null,e);if(e instanceof ie){let t=new Ie;return t.signature=e.signature,t.returnType=e.returnType,t.name=new T({value:"outputValue"}),t.type=e,new Ce(e,t)}if(e instanceof le){let t=this.resolveNamedType(e),s=new Se(t,this),i=t.leftIndex,r=t.rightIndex,n=this.getIntegerValueOfIndexConstant(i),a=this.getIntegerValueOfIndexConstant(r),l=Math.min(n,a),o=Math.max(n,a),h=-l;return s.offset=h,s.arrayLength=o-l+1,s.leftIntegerIndex=0,s.rightIntegerIndex=o,s.rightIntegerIndex=o,s}}}class Pe extends f{constructor(e,t,s=[]){super(e),this.identifier=t,this.parameters=s}}class Oe{constructor(e=!1){this.byReference=e}}class Le extends ve{constructor(e,t){super(),this.outputStream=e,this.ouputNewLineSymbol=t,this.type=new re(null,new Oe,null)}async innerRun(e){let t=e.getParametersList();this.outputStream.write(t.map((function(e){return e instanceof ge?e.value.symbol.stringValue:e instanceof be?e.value:void 0})).join("")+this.ouputNewLineSymbol)}}class Te extends ve{constructor(e){super(),this.outputStream=e,this.type=new re(null,new Oe,null)}async innerRun(e){let t=e.getParametersList();this.outputStream.write(t.map((function(e){return e instanceof ge?e.value.symbol.stringValue:e instanceof be?e.value:void 0})).join(""))}}class Ve extends ve{constructor(e,t,s){super(),this.input=e,this.outputStream=t,this.ouputNewLineSymbol=s,this.type=new re(null,new Oe(!0),null),this.char=null}async innerRun(e,s){let i=e.getParametersList(),r=[],n=[];await i.forEach((async function(e){let t=await s.evaluateIdentifierBranch(e);n.push(t.typeId),r.push(t.type)}));let a=await this.getWords(n,this.ouputNewLineSymbol);await a.forEach((async function(a,l){let o=null;switch(n[l]){case 0:o=Number.parseInt(a),isNaN(o)&&e.addError(t.typesMismatch,`Integer value expected, but '${a}' found.`,i[l]);break;case 1:o=parseFloat(a),isNaN(o)&&e.addError(t.typesMismatch,`Float value expected, but '${a}' found.`,i[l]);break;case 2:case 7:o=a;break;default:let s=r[l];s||(s=new N(null,n[l])),e.addError(t.typesMismatch,`Cannot input value of this type: ${s}`,i[l])}let h=new be(o,n[l]);await s.setIdentifierBranchValue(i[l],h)})),this.outputStream.write(this.ouputNewLineSymbol)}async getWords(e){let t=[];for(let s=0;s<e.length;s++){let i=await this.getWord(e[0]);t[s]=i}return t}async getWord(e){let t="";switch(e){case 2:null===this.char?t=await this.input.getChar():(t=this.char,this.char=null);break;case 0:case 1:for(;null===this.char||null!==/[\r\n\s\t]/.exec(this.char);)await this.nextChar();do{t+=this.char,await this.nextChar()}while(null===/[\r\n\s\t]/.exec(this.char));break;default:for(null===this.char&&await this.nextChar();this.char!==this.ouputNewLineSymbol;)t+=this.char,await this.nextChar()}return t}async nextChar(){let e=await this.input.getChar();this.char=e}}class ke{constructor(e,t,s){this.items={writeln:new Le(t,s),write:new Te(t),readln:new Ve(e,t,s)}}addProcedure(e,t){this.items[e.toLowerCase()]=t}getProcedure(e){let t=e.toLowerCase();return this.items.hasOwnProperty(t)?this.items[t]:null}}class Ne extends Ie{constructor(){super(),this.returnType=new N(null,0)}async innerRun(e){let t=e.getParametersList()[0].value.charCodeAt(0);e.setValue("Ord",0,t)}}class Be extends Ie{constructor(){super(),this.returnType=new N(null,2)}async innerRun(e){let t=e.getParametersList()[0].value,s=String.fromCharCode(t);e.setValue("Chr",2,s)}}class Re{constructor(){this.items={chr:new Be,ord:new Ne}}addFunction(e,t){this.items[e.toLowerCase()]=t}getFunction(e){let t=e.toLowerCase();return this.items.hasOwnProperty(t)?this.items[t]:null}}class Me{constructor(e,t){this.tree=e,this.trees=[this.tree],this.treesCounter=0,this.scopes=[],this.currentScopeId=0,this.scopes[this.currentScopeId]=new Ee,this.proceduresStore=new ke(t.input,t.outputStream,t.ouputNewLineSymbol),this.functionsStore=new Re,this.errorsDescription=new s}getCurrentScope(){return this.scopes[this.currentScopeId]}async run(){if(this.setConstants(),this.setTypes(),this.setVariables(),this.tree.sentences)for(let e=0;e<this.tree.sentences.length;e++)await this.evaluateSentence(this.tree.sentences[e])}setVariables(){let e=this.getCurrentScope();this.tree.vars&&this.tree.vars.forEach((function(t){if(!(t instanceof M))throw"VariablesDeclaration object must be here!";t.variablesType,t.identifiers.forEach((function(s){if(!(s instanceof T))throw"Identifier must be here!";{e.addVariable(s,t.variablesType,null,s);let i=t.initialValue;i instanceof L&&e.setValue(s,i.typeId,i.symbol.value,i)}}))}))}setTypes(){let e=this.getCurrentScope();this.tree.types&&this.tree.types.forEach((function(t){if(!(t instanceof A))throw"TypeDeclaration object must be here!";e.addType(t)}))}setConstants(){let e=this.getCurrentScope();this.tree.constants&&this.tree.constants.forEach((function(t){if(!(t instanceof D))throw"ConstantDeclaration object must be here!";e.addConstant(t)}))}async evaluateIndexRing(e){return e.evaluatedIndexExpression=await this.evaluateExpression(e.indexExpression),e.indexRing instanceof S&&await this.evaluateIndexRing(e.indexRing),e}async evaluateIdentifierBranch(e){if(e instanceof T){let s=this.getCurrentScope(),i=e.symbol.value,r=null;if(r=s.getElementByIdentifier(e),null!==r)return r;let n=i.toLowerCase(),a=this.tree.procedures.hasOwnProperty(n)?this.tree.procedures[n]:this.proceduresStore.getProcedure(n);if(null!==a)return new Ce(a.type,a);let l=this.tree.functions.hasOwnProperty(n)?this.tree.functions[n]:this.functionsStore.getFunction(n);if(null!==l)return new Ce(l.type,l);this.addError(t.variableNotDeclared,`Element '${i}' not declared.`,e)}else{if(e instanceof g){this.getCurrentScope();let s=await this.evaluateIdentifierBranch(e.identifier);return s instanceof Se||this.addError(t.arrayExpected,"Array expected",e),e.indexRing=await this.evaluateIndexRing(e.indexRing),s.getByIndexRing(e.indexRing)}if(e instanceof V){let t=await this.evaluateIdentifierBranch(e.identifierBranch),s=t instanceof Ce?t.value:t,i=this.getCurrentScope(),r=new Ee(i),n=null;if(s instanceof Ie||s instanceof H){let e=s.name;n=e.symbol.value.toLowerCase(),r.addVariable(e,s.type.returnType),r.callableName=s.name.symbol.value}await this.addParametersToScope(e.parameters,s.type.signature,r),this.treesCounter++,this.tree=s,this.trees[this.treesCounter]=this.tree,this.currentScopeId++,this.scopes[this.currentScopeId]=r,await this.run(),"function"==typeof s.innerRun&&await s.innerRun(r,this);let a=null;return(s instanceof Ie||s instanceof H)&&(a=r.getVariable(n)),delete this.scopes[this.currentScopeId],this.currentScopeId--,this.treesCounter--,this.tree=this.trees[this.treesCounter],a}if(e instanceof x)return(await this.evaluateIdentifierBranch(e.pointer)).variable;if(e instanceof C){let t=await this.evaluateIdentifierBranch(e.baseExpression),s=e.subField;return t.getByPropertyIdentifier(s)}this.addError(t.typesMismatch,"Identifier branch expected.",e)}}async evaluateSentence(e){let s=this.getCurrentScope();if(e instanceof b){let t=e.destination,i=e.sourceExpression,r=await this.evaluateExpression(i);if(r.getType(),t instanceof C){let e=await this.evaluateIdentifierBranch(t.baseExpression),i=t.subField;s.setRecordVariableProperty(e,i,r)}else t instanceof g&&(t.indexRing=await this.evaluateIndexRing(t.indexRing)),s.setVariableValue(t,r,e.destination)}else if(e instanceof W){if(e.sentences){let t=e.sentences,s=t.length;for(let e=0;e<s;e++){let s=await this.evaluateSentence(t[e]);if(s instanceof pe)return s}}}else{if(e instanceof $)return!0===(await this.evaluateExpression(e.condition)).value?await this.evaluateSentence(e.left):await this.evaluateSentence(e.right);if(e instanceof V||e instanceof Pe)return await this.evaluateIdentifierBranch(e);if(e instanceof he){let t=this.getCurrentScope();for(t.cycleDepth++;!0===(await this.evaluateExpression(e.condition)).value&&!(await this.evaluateSentence(e.body)instanceof pe););t.cycleDepth--}else if(e instanceof ce){let t=this.getCurrentScope();t.cycleDepth++;do{if(await this.evaluateSentence(e.body)instanceof pe)break}while(!0!==(await this.evaluateExpression(e.condition)).value);t.cycleDepth--}else if(e instanceof de){let t=this.getCurrentScope(),s=e.variableIdentifier,i=await this.evaluateExpression(e.initExpression),r=await this.evaluateExpression(e.lastExpression),n=null,a=null,l=i.typeId,o=!1===i.type?l:i.type;if(t.setValue(s,o,i.value,s),e.countDown)switch(l){case 0:n=function(e){return e.value--,e},a=(e,t)=>e.value>=t.value;break;case 2:n=function(e){let t=e.value.charCodeAt(0);return t--,e.value=String.fromCharCode(t),e},a=(e,t)=>e.value.charCodeAt(0)>=t.value.charCodeAt(0);break;case 5:n=function(e){let t=e.type.items,s=t.length,i=e.getIndex();return i--,e.value=t[(i+s)%s],e},a=(e,t)=>e.getIndex()>=t.getIndex()}else switch(l){case 0:n=function(e){return e.value++,e},a=(e,t)=>e.value<=t.value;break;case 2:n=function(e){let t=e.value.charCodeAt(0);return t++,e.value=String.fromCharCode(t),e},a=(e,t)=>e.value.charCodeAt(0)<=t.value.charCodeAt(0);break;case 5:n=function(e){let t=e.type.items,s=t.length,i=e.getIndex();return i++,e.value=t[i%s],e},a=(e,t)=>e.getIndex()<=t.getIndex()}t.cycleDepth++;let h=5===l?new ge(i.value,o):new be(i.value,l),c=!0;for(;a(i,r)&&c&&!(await this.evaluateSentence(e.body)instanceof pe);)h.value=i.value,i=n(i),t.setValue(s,o,i.value),c=a(h,i);t.cycleDepth--}else if(e instanceof pe){if(!(this.getCurrentScope().cycleDepth<=0))return e;this.addError(t.breakOutOfLoop,null,e)}else if(e instanceof ue){let s=await this.evaluateExpression(e.switchExpression),i=!1,r=this.getCurrentScope();for(let n=0;n<e.cases.length;n++){let a=e.cases[n];for(let e=0;e<a.constants.length;e++){let n=a.constants[e];if(r.sameType(n.typeId,s.getType())||this.addError(t.typesMismatch,"The constant and the switch expression have different types",n),n.symbol.value===s.value){i=!0,this.evaluateSentence(a.operator);break}}if(i)break}i||null===e.elseSentence||this.evaluateSentence(e.elseSentence)}}}async addParametersToScope(e,s,i){if(s instanceof Oe)if(s.byReference)i.setParametersList(e);else{let t=await Promise.all(e.map((async e=>await this.evaluateExpression(e))));i.setParametersList(t)}else{let r=0;for(let n=0;n<s.length;n++){let a=s[n],l=a.identifiers,o=a.byReference;for(let s=0;s<l.length;s++){let n=l[s],h=a.type,c=e[r];if(o)c instanceof T||this.addError(t.identifierExpected,"Cannot use other expressions here",c),i.addVariableByReference(c,n);else{let e=await this.evaluateExpression(c);i.addVariable(n,h),i.setValue(n,h,e.value,n)}r++}}}}async evaluateExpression(e){if(e instanceof w){let t=e.identifier,s=await this.evaluateIdentifierBranch(t),i=s.getType();return new xe(s,i)}if(e instanceof Q){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),i=6,r=null;return r=5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()===s.getIndex():t.value===s.value,new be(r,i)}if(e instanceof ee){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),i=6,r=null;return r=2===t.typeId&&2===s.typeId?t.value.charCodeAt(0)>s.value.charCodeAt(0):5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()>s.getIndex():t.value>s.value,new be(r,i)}if(e instanceof Z){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),i=6,r=null;return r=2===t.typeId&&2===s.typeId?t.value.charCodeAt(0)<s.value.charCodeAt(0):5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()<s.getIndex():t.value<s.value,new be(r,i)}if(e instanceof te){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),i=6,r=null;return r=2===t.typeId&&2===s.typeId?t.value.charCodeAt(0)>=s.value.charCodeAt(0):5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()>=s.getIndex():t.value>=s.value,new be(r,i)}if(e instanceof se){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),i=6,r=null;return r=2===t.typeId&&2===s.typeId?t.value.charCodeAt(0)<=s.value.charCodeAt(0):5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()<=s.getIndex():t.value<=s.value,new be(r,i)}if(e instanceof Y){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),i=6,r=null;return r=5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()!==s.getIndex():t.value!==s.value,new be(r,i)}return e instanceof J?(await this.evaluateExpression(e.left),await this.evaluateExpression(e.right),new be(!1,6)):await this.evaluateSimpleExpression(e)}async evaluateSimpleExpression(e){if(e instanceof P||e instanceof O){let t=await this.evaluateSimpleExpression(e.left),s=await this.evaluateSimpleExpression(e.right),i=1===t.typeId||1===s.typeId?1:0,r=null;return e instanceof P?r=t.value+s.value:e instanceof O&&(r=t.value-s.value),new be(r,i)}if(e instanceof z){let t=await this.evaluateSimpleExpression(e.left),s=await this.evaluateSimpleExpression(e.right),i=6,r=t.value||s.value;return new be(r,i)}return await this.evaluateTerm(e)}async evaluateTerm(e){if(e instanceof G){let t=await this.evaluateTerm(e.value);return new be(!t.value,t.typeId)}if(e instanceof U){let t=await this.evaluateTerm(e.value);return new be(-t.value,t.typeId)}if(e instanceof I){let t=await this.evaluateMultiplier(e.left),s=await this.evaluateMultiplier(e.right),i=1===t.typeId||1===s.typeId?1:0,r=t.value*s.value;return new be(r,i)}if(e instanceof E){let t=await this.evaluateMultiplier(e.left),s=await this.evaluateMultiplier(e.right),i=1,r=t.value/s.value;return new be(r,i)}if(e instanceof q){let t=await this.evaluateMultiplier(e.left),s=await this.evaluateMultiplier(e.right),i=0,r=Math.trunc(t.value/s.value);return new be(r,i)}if(e instanceof j){let t=await this.evaluateMultiplier(e.left),s=await this.evaluateMultiplier(e.right),i=0,r=t.value%s.value;return new be(r,i)}if(e instanceof F){let t=await this.evaluateMultiplier(e.left),s=await this.evaluateMultiplier(e.right),i=6,r=t.value&&s.value;return new be(r,i)}return await this.evaluateMultiplier(e)}async evaluateMultiplier(e){return e instanceof L?new be(e.symbol.value,e.typeId):e instanceof V||e instanceof T||e instanceof g||e instanceof x||e instanceof C?await this.evaluateIdentifierBranch(e):await this.evaluateExpression(e)}addError(e,t=null,s=null){let r=this.errorsDescription.getErrorTextByCode(e)+(null===t?"":". "+t),n=null===s?null:s.symbol.textPosition;throw new i(e,r,n)}async setIdentifierBranchValue(e,t){let s=this.getCurrentScope();if(e instanceof C){let i=await this.evaluateIdentifierBranch(e.baseExpression),r=e.subField;s.setRecordVariableProperty(i,r,t)}else e instanceof g&&this.evaluateIndexRing(e.indexRing),s.setVariableValue(e,t,e)}}class De{engine;error;constructor(e){this.config=e}async runString(e){let t=e=>{if(!(e instanceof i))throw e;{s.printListing(e);let t=this.config.listingOutput.outputLines;for(let e=0;e<t.length;e++)this.config.outputStream.addLine(t[e],!0);this.error=e}};try{var s=new r(e,this.config.listingOutput),n=new p(s),a=new me(n).analyze(),l=new Me(a,this.config);await l.run().catch(t)}catch(e){t(e)}return this.engine=l,l}getVar(e){return this.engine.getCurrentScope().items[e]}getVarValue(e){let t=this.getVar(e);return 3===t.typeId?this.getVar(e).items:5===t.typeId?this.getVar(e).value.symbol.stringValue:this.getVar(e).value}getError(){return this.error}}function Ae(e){return(e<10?1:Math.floor(Math.log10(e)))+1}document.querySelector(".screen").addEventListener("click",(function(e){let t=document.querySelector("div.screen div span[contenteditable=true]");if(e.preventDefault(),t){let e=document.createRange(),s=window.getSelection();0===t.childNodes.length&&t.appendChild(document.createTextNode(""));let i=t.childNodes[0].length;s.anchorOffset!==i&&0!==i||(e.setStart(t.childNodes[0],i),e.collapse(!0),s.removeAllRanges(),s.addRange(e))}}));let We=new class{constructor(){this.screen=document.querySelector(".screen"),this.letters=[],this.lettersCounter=0}getLine(e=!1){let t=document.querySelector(".screen"),s=t.querySelectorAll("div"),i=null;return e||0===s.length?(i=document.createElement("div"),t.appendChild(i)):i=s[s.length-1],i}addLine(e,t=!1){let s=this.getLine(t),i=document.createElement("span");i.textContent=e,s.appendChild(i)}write(e){let t=e.split("\n").map((function(e){return e.replace(/ /g," ")}));this.addLine(t[0]);for(let e=1;e<t.length;e++)this.addLine(t[e],!0)}async read(e=!1){let t=this.getLine(e),s=document.createElement("span");s.contentEditable="true",t.appendChild(s);let i=document.querySelector(".screen"),r=function(e){"Enter"===e.key&&(this.querySelector("span[contenteditable=true").contentEditable="false",e.preventDefault(),i.removeEventListener("click",r))},n=new Promise((function(e,t){setInterval((()=>{"false"===s.contentEditable&&e(s.textContent)}),300)}));return i.addEventListener("keydown",r),n}async getChar(){if(0===this.letters.length||this.lettersCounter>=this.letters.length){let e=await this.read()+"\n";console.log("word",e),this.letters=e.split(""),this.lettersCounter=0}let e=this.letters[this.lettersCounter];return this.lettersCounter++,e}};const $e={outputStream:We,listingOutput:new class extends class{constructor(){this.errorsCounter=0}listErrors(e){e.forEach((e=>this.listError(e)))}getLinePrefix(e){return"  "+(e<10?"0":"")+e+"    "}getErrorText(e,t){var s=Ae(e.textPosition.lineNumber),i=s-Ae(t),r=i<0?2+i:2,n=s+4;return"**"+(t<10?"0":"")+"0".repeat(i>0?i:0)+t+"*".repeat(r)+" ".repeat(e.textPosition.charNumber+1)+"^ Error Code "+e.errorCode+"\n"+"*".repeat(n)+"  "+e.errorText}listError(e){console.log(this.getErrorText(e,++this.errorsCounter))}}{constructor(){super(),this.outputLines=[]}listLine(e,t){var s=this.getLinePrefix(t+1)+e;this.outputLines.push(s.replace(/[\n\r]/g,""))}listError(e){this.outputLines.push(this.getErrorText(e,++this.errorsCounter))}},ouputNewLineSymbol:"\n",input:We};let qe=document.querySelectorAll("div.delphi div.toolbar span a.command_help"),je=document.querySelector("dialog");document.querySelector("#close").onclick=function(){je.close()},qe.forEach((e=>{e.addEventListener("click",(async function(e){je.show();let t=this.parentNode.parentNode.parentNode.querySelector("table tbody tr td.code div.container").querySelectorAll("div.line"),s=[];for(let e=0;e<t.length;e++){let i=[...t[e].childNodes];for(let e=0;e<i.length;e++){let t=i[e];s.push(t.tagName&&"BR"===t.tagName?"\n":i[e].textContent)}s.push("\n")}let i=s.join(""),r=new De($e);try{await r.runString(i)}catch(e){}console.log($e.outputStream.value),$e.outputStream.value="",e.preventDefault()}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,