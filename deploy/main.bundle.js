(()=>{"use strict";class e{constructor(e=0,t=0){this.lineNumber=e,this.charNumber=t}}const t={inadmissibleSymbol:3,forbiddenCharacter:6,nameNotDescribed:104,breakOutOfLoop:105,identifierAlreadyUsed:106,variableNotDeclared:107,constantOrVariableNotDeclared:108,typesMismatch:109,typeNotDeclared:110,indexIsOutOfRange:111,identifierExpected:112,elementIsNotInitialized:113,notCallableElement:114,arrayExpected:115,recordPropertyIsNotDefined:116};class s{constructor(){this.errorCodeMapper=new Map([[1,"An error in primitive type"],[2,"Name expected"],[t.inadmissibleSymbol,"Inadmissible Symbol"],[t.forbiddenCharacter,"Forbidden character"],[t.nameNotDescribed,"Name is not described"],[t.breakOutOfLoop,"'break' is out of loop"],[t.identifierAlreadyUsed,"Identifier already used"],[t.variableNotDeclared,"Variable not declared"],[t.constantOrVariableNotDeclared,"Constant or variable not declared"],[t.typesMismatch,"Types mismatch"],[t.identifierExpected,"Identifier expected"],[t.indexIsOutOfRange,"Index is out of range"],[t.elementIsNotInitialized,"Element is not initialized"]])}getErrorTextByCode(e){return this.errorCodeMapper.has(e)?this.errorCodeMapper.get(e):null}}class i extends Error{constructor(e,t,s){super(t+` // line ${s.lineNumber} `+` column ${s.charNumber} `),this.errorCode=e,this.errorText=t,this.textPosition=s}}class n extends class{constructor(t,i){this.errorsDescription=new s,this.positionNow=new e,this.printer=t,this.reader=i,this.currentLine,this.currentLineErrors=[],this.lines=[],this.linePointer=0,this.currentLine,this.endOfFile=!1}setLines(e){this.lines=e.split(/\r?\n/),this.readNextLine()}getCurrentPosition(){return new e(this.positionNow.lineNumber,this.positionNow.charNumber)}nextCh(){return this.endOfFile&&this.positionNow.charNumber>=this.currentLine.length?null:(this.positionNow.charNumber===this.currentLine.length&&(this.currentLineErrors.length>0&&this.printer.listErrors(this.currentLineErrors),this.readNextLine(),this.currentLineErrors=[],this.positionNow.lineNumber++,this.positionNow.charNumber=0),this.currentLine[this.positionNow.charNumber++])}prevCh(){return 0===this.linePointer&&0===this.positionNow.charNumber?null:(0===this.positionNow.charNumber&&(this.readPrevLine(),this.currentLineErrors=[],this.positionNow.lineNumber--,this.positionNow.charNumber=this.currentLine.length),this.positionNow.charNumber--,this.currentLine[this.positionNow.charNumber-1])}readNextLine(){var e=this.lines[this.linePointer++];this.currentLine=e.split(""),this.currentLine.push("\n"),this.endOfFile=this.linePointer===this.lines.length}readPrevLine(){if(this.linePointer>0){var e=this.lines[--this.linePointer];this.currentLine=e.split(""),this.currentLine.push("\n")}}addError(e,t=null,s=null){let n=this.errorsDescription.getErrorTextByCode(e)+(null===t?"":". "+t),r=null===s?this.getCurrentPosition():s;throw new i(e,n,r)}printListing(e=null){let t=e.textPosition.lineNumber;for(let e=0;e<=t;e++)this.printer.listLine(this.lines[e],e);this.printer.listError(e);for(let e=t+1;e<=this.lines.length-1;e++)this.printer.listLine(this.lines[e],e)}readWords(e){this.reader.readWords(e)}}{constructor(e,t,s=null){super(t,s),this.setLines(e)}}const r={star:21,slash:60,equal:16,comma:20,semicolon:14,colon:5,point:61,arrow:62,leftPar:9,rightPar:4,lBracket:11,rBracket:12,flPar:63,frPar:64,later:65,greater:66,laterEqual:67,greaterEqual:68,laterGreater:69,plus:70,minus:71,lComment:72,rComment:73,assign:51,twoPoints:74,at:75,ident:2,floatC:82,intC:15,charC:83,stringC:84,booleanC:85,caseSy:31,elseSy:32,fileSy:57,gotoSy:33,thenSy:52,untilSy:53,doSy:54,withSy:37,ifSy:56,ofSy:102,orSy:103,inSy:104,toSy:105,endSy:106,varSy:107,divSy:108,andSy:109,notSy:110,forSy:111,modSy:112,nilSy:113,setSy:114,typeSy:120,realSy:121,charSy:122,beginSy:123,whileSy:124,arraySy:125,constSy:126,labelSy:127,downtoSy:128,stringSy:129,packedSy:130,recordSy:131,repeatSy:132,integerSy:133,booleanSy:134,programSy:135,functionSy:136,procedureSy:137,breakSy:138,trueSy:139,falseSy:140,plusAssign:141,minusAssign:142,slashAssign:143,starAssign:144};class a{constructor(){this.keyWordsCodes=new Map([["if",r.ifSy],["do",r.doSy],["of",r.ofSy],["or",r.orSy],["in",r.inSy],["to",r.toSy],["end",r.endSy],["var",r.varSy],["div",r.divSy],["and",r.andSy],["not",r.notSy],["for",r.forSy],["mod",r.modSy],["nil",r.nilSy],["set",r.setSy],["then",r.thenSy],["else",r.elseSy],["case",r.caseSy],["file",r.fileSy],["goto",r.gotoSy],["type",r.typeSy],["with",r.withSy],["real",r.realSy],["char",r.charSy],["true",r.trueSy],["begin",r.beginSy],["break",r.breakSy],["while",r.whileSy],["array",r.arraySy],["const",r.constSy],["label",r.labelSy],["until",r.untilSy],["false",r.falseSy],["downto",r.downtoSy],["string",r.stringSy],["packed",r.packedSy],["record",r.recordSy],["repeat",r.repeatSy],["program",r.programSy],["integer",r.integerSy],["boolean",r.booleanSy],["function",r.functionSy],["procedure",r.procedureSy]])}getSymbolCodeByKeyWord(e){let t=e.toLowerCase();return this.keyWordsCodes.has(t)?this.keyWordsCodes.get(t):r.ident}}class l{constructor(e,t,s,i){this.textPosition=e,this.symbolCode=t,this.stringValue=s,this.value=i}}class o extends l{constructor(e,t,s){super(e,t,s,s)}}class h extends l{constructor(e,t,s){super(e,t,s,parseFloat(s))}}class c extends l{constructor(e,t,s){super(e,t,s,Number.parseInt(s))}}class u extends l{constructor(e,t,s){super(e,t,s,s.replace(/'/g,""))}}class y extends l{constructor(e,t,s){super(e,t,s,s.replace(/'/g,""))}}class d extends l{constructor(e,t,s){super(e,t,s,"true"===s.toLowerCase())}}class p{constructor(e){this.fileIO=e,this.errorsCodes=t,this.token=null,this.currentWord=null,this.char=" ",this.symbol=null,this.MAX_IDENT=64,this.keyWords=new a,this.wordBuffer=null}nextSym(){return null===this.char?null:(this.skipWhiteSpaces(),this.token=this.fileIO.getCurrentPosition(),this.scanSymbol())}scanSymbol(){if(null===this.char)return null;if(null===this.wordBuffer?this.currentWord="":(this.currentWord=this.wordBuffer,this.wordBuffer=null),null!==/[a-z]/i.exec(this.char)){for(;null!==/\w/i.exec(this.char);)this.currentWord+=this.char,this.char=this.fileIO.nextCh();return this.getSymbol(this.keyWords.getSymbolCodeByKeyWord(this.currentWord))}if(null!==/[\d.]/.exec(this.char)){if(this.currentWord+=this.char,this.char=this.fileIO.nextCh(),".."===this.currentWord)return this.symbol=r.twoPoints,this.getSymbol(this.symbol);if("."===this.currentWord&&"."===this.char)return this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(r.twoPoints);if("."===this.currentWord&&null===/\d/.exec(this.char))return this.symbol=r.point,this.getSymbol(this.symbol);{let e="."===this.currentWord,t=null;for(;null!==/[\d.]/.exec(this.char);){if("."===this.char){if(e){if("."===t)return this.wordBuffer=".",new c(this.token,r.intC,this.currentWord);break}e=!0}t=this.char,this.currentWord+=this.char,this.char=this.fileIO.nextCh()}let s=0,i=!1,n="";if(/e/i.exec(this.char))if(i=!0,s++,n+=this.char,this.char=this.fileIO.nextCh(),/[\d+-]/.exec(this.char))if(/[+-]/.exec(this.char)&&(s++,n+=this.char,this.char=this.fileIO.nextCh()),/\d/.exec(this.char))for(;/\d/.exec(this.char);)s++,n+=this.char,this.char=this.fileIO.nextCh();else i=!1;else i=!1;if(i)this.currentWord+=n;else for(let e=1;e<=s;e++)this.char=this.fileIO.prevCh();return e||i?new h(this.token,r.floatC,this.currentWord):new c(this.token,r.intC,this.currentWord)}}switch(this.currentWord+=this.char,this.char){case":":return this.char=this.fileIO.nextCh(),"="===this.char?(this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(r.assign)):this.getSymbol(r.colon);case"<":switch(this.char=this.fileIO.nextCh(),this.char){case"=":return this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(r.laterEqual);case">":return this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(r.laterGreater);default:return this.getSymbol(r.later)}case">":return this.char=this.fileIO.nextCh(),"="===this.char?(this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(r.greaterEqual)):this.getSymbol(r.greater);case"-":return this.char=this.fileIO.nextCh(),"="===this.char?(this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(r.minusAssign)):this.getSymbol(r.minus);case"+":return this.char=this.fileIO.nextCh(),"="===this.char?(this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(r.plusAssign)):this.getSymbol(r.plus);case"*":return this.char=this.fileIO.nextCh(),"="===this.char?(this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(r.starAssign)):this.getSymbol(r.star);case"/":if(this.char=this.fileIO.nextCh(),"="===this.char)return this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(r.slashAssign);{let e=null;if("/"===this.char){do{e=this.fileIO.nextCh()}while("\n"!==e);return this.char=this.fileIO.nextCh(),this.skipWhiteSpaces(),this.scanSymbol()}return this.getSymbol(r.slash)}case"=":return this.char=this.fileIO.nextCh(),this.getSymbol(r.equal);case",":return this.char=this.fileIO.nextCh(),this.getSymbol(r.comma);case";":return this.char=this.fileIO.nextCh(),this.getSymbol(r.semicolon);case"^":return this.char=this.fileIO.nextCh(),this.getSymbol(r.arrow);case"(":this.char=this.fileIO.nextCh();var e=null,t=this.currentWord;if("*"===this.char){do{e=t,t=this.fileIO.nextCh()}while("*"!==e||")"!==t);return this.char=this.fileIO.nextCh(),this.skipWhiteSpaces(),this.scanSymbol()}return this.getSymbol(r.leftPar);case")":return this.char=this.fileIO.nextCh(),this.getSymbol(r.rightPar);case"[":return this.char=this.fileIO.nextCh(),this.getSymbol(r.lBracket);case"]":return this.char=this.fileIO.nextCh(),this.getSymbol(r.rBracket);case"{":let s=null;do{s=this.fileIO.nextCh()}while("}"!==s);return this.char=this.fileIO.nextCh(),this.skipWhiteSpaces(),this.scanSymbol();case"}":return this.char=this.fileIO.nextCh(),this.getSymbol(r.frPar);case"<":return this.char=this.fileIO.nextCh(),this.getSymbol(r.later);case">":return this.char=this.fileIO.nextCh(),this.getSymbol(r.greater);case"@":return this.char=this.fileIO.nextCh(),this.getSymbol(r.at);case"'":do{this.char=this.fileIO.nextCh(),this.currentWord+=this.char}while("'"!==this.char);return this.char=this.fileIO.nextCh(),3===this.currentWord.length?new u(this.token,r.charC,this.currentWord):new y(this.token,r.stringC,this.currentWord)}return this.addForbiddenCharacterError(this.char),this.char=this.fileIO.nextCh(),null}getSymbol(e){return e===r.trueSy||e===r.falseSy?new d(this.token,r.booleanC,this.currentWord):new o(this.token,e,this.currentWord)}skipWhiteSpaces(){for(;null!==/\s/.exec(this.char);)this.char=this.fileIO.nextCh()}addForbiddenCharacterError(e){this.fileIO.addError(this.errorsCodes.forbiddenCharacter,` '${e}'`,this.token)}}class m{constructor(){this.symbolCodeMapper=new Map([[r.star,"*"],[r.slash,"/"],[r.equal,"="],[r.comma,","],[r.semicolon,";"],[r.colon,":"],[r.point,"."],[r.arrow,"^"],[r.leftPar,"("],[r.rightPar,")"],[r.lBracket,"["],[r.rBracket,"]"],[r.flPar,"{"],[r.frPar,"}"],[r.later,"<"],[r.greater,">"],[r.laterEqual,"<="],[r.greaterEqual,">="],[r.laterGreater,"<>"],[r.plus,"+ "],[r.minus,"- "],[r.lComment,"(*"],[r.rComment,"*)"],[r.assign,":="],[r.twoPoints,".."],[r.ident,"Identifier"],[r.floatC,"Float Constant"],[r.intC,"Integer Constant"],[r.charC,"Character Constant"],[r.caseSy,"case"],[r.elseSy,"else"],[r.fileSy,"file"],[r.gotoSy,"goto"],[r.thenSy,"then"],[r.untilSy,"until"],[r.doSy,"do"],[r.withSy,"with"],[r.ifSy,"if"],[r.ofSy,"of"],[r.orSy,"or"],[r.inSy,"in"],[r.toSy,"to"],[r.endSy,"end"],[r.varSy,"var"],[r.divSy,"div"],[r.andSy,"and"],[r.notSy,"not"],[r.forSy,"for"],[r.modSy,"mod"],[r.nilSy,"nil"],[r.setSy,"set"],[r.typeSy,"type"],[r.realSy,"real"],[r.charSy,"char"],[r.beginSy,"begin"],[r.whileSy,"while"],[r.arraySy,"array"],[r.constSy,"const"],[r.labelSy,"label"],[r.downtoSy,"downto"],[r.stringSy,"string"],[r.packedSy,"packed"],[r.recordSy,"record"],[r.repeatSy,"repeat"],[r.integerSy,"integer"],[r.programSy,"program"],[r.functionSy,"function"],[r.procedureSy,"procedure"]])}getSymbolTextByCode(e){return this.symbolCodeMapper.has(e)?this.symbolCodeMapper.get(e):null}}class f{constructor(e){this.symbol=e}}class b extends f{constructor(e,t,s){super(e),this.destination=t,this.sourceExpression=s}}class w extends f{constructor(e,t,s){super(e),this.identifier=t,this.indexRing=s}}class g extends f{constructor(e,t,s=null){super(e),this.indexExpression=t,this.indexRing=s,this.evaluatedIndexExpression=null}appendIndexRing(e){null===this.indexRing?this.indexRing=e:this.indexRing.appendIndexRing(e)}}class x extends f{constructor(e,t){super(e),this.pointer=t}}class S extends f{constructor(e,t){super(e),this.identifier=t}}class C extends f{constructor(e,t,s){super(e),this.baseExpression=t,this.subField=s}}class v extends f{constructor(e,t,s){super(e),this.left=t,this.right=s}}class I extends v{constructor(e,t,s){super(e,t,s)}}class E extends v{constructor(e,t,s){super(e,t,s)}}class k extends v{constructor(e,t,s){super(e,t,s)}}class T extends v{constructor(e,t,s){super(e,t,s)}}class L extends f{constructor(e,t){super(e),this.typeId=t}}class V extends L{constructor(e,t){super(e,t)}toString(){switch(this.typeId){case 6:return"boolean";case 2:return"char";case 0:return"integer";case 1:return"real";case 7:return"string"}}}class O extends V{constructor(e=null){super(e,6)}}class P extends V{constructor(e=null,t=7){super(e,t)}}class N extends P{constructor(e=null){super(e,2)}}class R extends V{constructor(e,t=null){super(e,t)}}class A extends R{constructor(e=null){super(e,0)}}class B extends R{constructor(e=null){super(e,1)}}class M extends f{constructor(e){switch(super(e),e.symbolCode){case r.intC:this.type=new A(null),this.typeId=0;break;case r.floatC:this.type=new B(null),this.typeId=1;break;case r.charC:this.type=new N(null),this.typeId=2;break;case r.stringC:this.type=new P(null),this.typeId=7;break;case r.booleanC:this.type=new O(null),this.typeId=6;break;case r.ident:this.typeId=5}}}class W extends f{constructor(e){super(e)}}class D extends f{constructor(e,t,s=[]){super(e),this.identifierBranch=t,this.parameters=s}}class $ extends L{constructor(e,t){super(e,4);let s=this;this.typesList={},t.forEach((e=>{let t=e.type;e.identifiers.forEach((e=>{let i=e.symbol.value;s.typesList[i]=t}))}))}toString(){let e=[],t=null;for(t in this.typesList)e.push(`${t}: `+this.typesList[t].toString());return`record(${e.join(", ")})`}}class F extends L{constructor(e){super(e,9)}toString(){return this.symbol.stringValue}}class q extends f{constructor(e,t,s,i){super(e),this.identifiers=t,this.variablesType=s,this.initialValue=i}}class j extends f{constructor(e,t,s,i=null){super(e),this.identifier=t,this.value=s,this.type=i}}class z extends f{constructor(e,t,s){super(e),this.identifier=t,this.type=s}}class U extends f{constructor(e){super(e),this.sentences=[]}}class G extends f{constructor(e,t,s,i){super(e),this.condition=t,this.left=s,this.right=i}}class _ extends v{constructor(e,t,s){super(e,t,s)}}class K extends v{constructor(e,t,s){super(e,t,s)}}class X extends v{constructor(e,t,s){super(e,t,s)}}class H extends v{constructor(e,t,s){super(e,t,s)}}class J extends f{constructor(e,t){super(e),this.value=t}}class Q extends f{constructor(e,t){super(e),this.value=t}}class Y extends L{constructor(e,t=null,s=null){super(e,11),this.returnType=s,this.signature=t}toString(){let e=[];return this.signature.length>0&&this.signature.forEach((function(t,s){let i=t.identifiers.map((e=>e.symbol.stringValue)).join(", ");e[s]=i+": "+t.type.toString()})),`function(${e.join("; ")}): ${this.returnType.toString()}`}}class Z{constructor(e=!1){this.byReference=e}}class ee{constructor(e=null){this.parentFunctionsStore=e,this.items={}}addFunction(e,t){let s=e.toLowerCase();if(this.items.hasOwnProperty(s))if(Array.isArray(this.items[s]))this.items[s].push(t);else{let e=this.items[s];this.items[s]=[e,t]}else this.items[s]=t}getFunction(e,t,s=null,i=null){let n=[];if(null===s&&i instanceof Y){let e=i.signature;i=i.returnType,s=[];for(let t=0;t<e.length;t++)for(let i=0;i<e[t].identifiers.length;i++)s[t+i]=e[t].type,n[t+i]=e[t].byReference}let r=e.toLowerCase(),a=null;if(!this.items.hasOwnProperty(r))return this.parentFunctionsStore?this.parentFunctionsStore.getFunction(e,t,s):null;if(a=this.items[r],!a||Array.isArray(a)||a.type.signature instanceof Z||null===s||(a=[a]),Array.isArray(a)){let r=a.filter((e=>{let r=e.type.signature,a=e.type.returnType;if(r.map((e=>e.identifiers.length)).reduce(((e,t)=>e+t),0)!==(null===s?0:s.length))return!1;let l=[],o=[];for(let e=0;e<r.length;e++)for(let t=0;t<r[e].identifiers.length;t++)l[e+t]=r[e].type,o[e+t]=r[e].byReference;if(null!==a&&null!==i&&!t.checkType(a,i))return!1;for(let e=0;e<l.length;e++)if(!t.checkType(l[e],s[e])||o.length>0&&n.length>0&&o[e]!==n[e])return!1;return!0}));return r.length>0?r[0]:this.parentFunctionStore?this.parentFunctionsStore.getFunction(e,t,s):null}return a}}class te extends f{constructor(e,t=null){super(e),this.name=null,this.vars=[],this.functionsStore=new ee(t instanceof te?t.functionsStore:null),this.sentences=[],this.types=[],this.constants=[],this.parentFunction=t}getType(){return this.type}}class se extends te{constructor(e){super(e)}}class ie extends te{constructor(e,t=null,s=null){super(e,s),this.type=t}}class ne extends te{constructor(e,t=null,s=null){super(e,s),this.type=t}}class re extends v{constructor(e,t,s){super(e,t,s)}}class ae extends v{constructor(e,t,s){super(e,t,s)}}class le extends v{constructor(e,t,s){super(e,t,s)}}class oe extends v{constructor(e,t,s){super(e,t,s)}}class he extends v{constructor(e,t,s){super(e,t,s)}}class ce extends v{constructor(e,t,s){super(e,t,s)}}class ue extends v{constructor(e,t,s){super(e,t,s)}}class ye extends L{constructor(e,t,s){super(e,10),this.identifiers=s,this.signature=t}toString(){let e=[];return this.signature.length>0&&this.signature.forEach((function(t,s){let i=t.identifiers.map((e=>e.symbol.stringValue)).join(", ");e[s]=i+": "+t.type.toString()})),`procedure(${e.join("; ")})`}}class de extends f{constructor(e,t=!1,s=null,i=[]){super(e),this.byReference=t,this.type=s,this.identifiers=i}}class pe extends L{constructor(e){super(e,5),this.items=[]}toString(){return`enum(${this.items.map((e=>e.symbol.stringValue)).join(", ")})`}}class me extends L{constructor(e,t=null,s=null,i=null){super(e,3),this.typeOfElements=i,this.leftIndex=t,this.rightIndex=s}toString(){return`array [${this.leftIndex.symbol.value}..${this.rightIndex.symbol.value}] of ${this.typeOfElements}`}}class fe extends L{constructor(e,t){super(e,8),this.type=t}toString(){return`^${this.type}`}}class be extends f{constructor(e,t,s){super(e),this.condition=t,this.body=s}}class we extends f{constructor(e,t,s){super(e),this.condition=t,this.body=s}}class ge extends f{constructor(e,t=null,s=[],i=null){super(e),this.switchExpression=t,this.cases=s,this.elseSentence=i}}class xe extends f{constructor(e,t=[],s=null){super(e),this.constants=t,this.operator=s}}class Se extends f{constructor(e,t,s,i,n,r){super(e),this.variableIdentifier=t,this.initExpression=s,this.lastExpression=i,this.countDown=n,this.body=r}}class Ce extends f{constructor(e){super(e)}}class ve{constructor(e){this.lexicalAnalyzer=e,this.symbolsDescription=new m,this.symbol=null,this.tree=null,this.trees=[],this.treesCounter=0,this.errorDetected=!1}nextSym(){this.symbol=this.lexicalAnalyzer.nextSym()}anotherSymbolExpected(e){let s=`'${this.symbolsDescription.getSymbolTextByCode(e)}' expected but '${this.symbol.stringValue}' found.`;this.lexicalAnalyzer.fileIO.addError(t.inadmissibleSymbol,s,this.symbol.textPosition)}accept(e){if(null===this.symbol)return null;this.symbol.symbolCode===e?this.nextSym():(this.errorDetected=!0,this.anotherSymbolExpected(e),this.goToEnd())}analyze(){return this.tree=new se(this.symbol),this.trees[this.treesCounter]=this.tree,this.nextSym(),this.scanProgramme(),this.tree}scanProgramme(){this.symbol.symbolCode===r.programSy&&(this.nextSym(),this.tree.name=this.symbol.stringValue,this.accept(r.ident),this.accept(r.semicolon)),this.scanBlock(),this.accept(r.point)}scanBlock(){for(;this.symbol.symbolCode!==r.beginSy;)switch(this.symbol.symbolCode){case r.constSy:this.constPart();break;case r.typeSy:this.typePart();break;case r.varSy:this.varPart();break;case r.procedureSy:this.scanProcedure();break;case r.functionSy:this.scanFunction();break;default:let e=`Symbol 'begin' expecsted but '${this.symbol.stringValue}' found.`;this.addError(t.inadmissibleSymbol,e,this.symbol)}this.statementPart()}constPart(){if(this.symbol.symbolCode===r.constSy){this.nextSym();do{let e=this.symbol;this.accept(r.ident);let t=null;this.symbol.symbolCode===r.colon&&(this.nextSym(),t=this.scanType());let s=this.symbol;this.accept(r.equal);let i=this.scanConstant(),n=new j(s,new W(e),i,t);this.tree.constants.push(n),this.accept(r.semicolon)}while(this.symbol.symbolCode===r.ident)}}typePart(){if(this.symbol.symbolCode===r.typeSy){this.nextSym();do{let e=this.symbol;this.accept(r.ident);let t=this.symbol;this.accept(r.equal);let s=this.scanType(),i=new z(t,new W(e),s);this.tree.types.push(i),this.accept(r.semicolon)}while(this.symbol.symbolCode===r.ident)}}varPart(){if(this.symbol.symbolCode===r.varSy){this.nextSym();do{this.tree.vars.push(this.scanVarDeclaration()),this.accept(r.semicolon)}while(!this.errorDetected&&this.symbol.symbolCode===r.ident)}}scanVarDeclaration(){let e=[],t=null,s=!1;do{t=new W(this.symbol),this.accept(r.ident),e.push(t),s=this.symbol.symbolCode===r.comma,s&&this.nextSym()}while(!this.errorDetected&&s);let i=this.symbol;this.accept(r.colon);let n=this.scanType(),a=null;return this.symbol.symbolCode===r.equal&&(this.nextSym(),a=this.scanConstant()),new q(i,e,n,a)}scanListArrayType(e){let t=null,s=this.scanConstant();this.accept(r.twoPoints);let i=this.scanConstant();return this.symbol.symbolCode===r.comma?(e=this.symbol,this.nextSym(),t=this.scanListArrayType()):(this.accept(r.rBracket),this.accept(r.ofSy),t=this.scanType()),new me(e,s,i,t)}scanType(){let e=null;if(this.symbol.symbolCode===r.arrow){e=this.symbol,this.nextSym();let t=this.scanType();return new fe(e,t)}if(this.symbol.symbolCode===r.integerSy||this.symbol.symbolCode===r.booleanSy||this.symbol.symbolCode===r.realSy||this.symbol.symbolCode===r.stringSy||this.symbol.symbolCode===r.charSy){e=this.symbol,this.nextSym();let t=null;switch(e.symbolCode){case r.charSy:t=2;break;case r.integerSy:t=0;break;case r.stringSy:t=7;break;case r.realSy:t=1;break;case r.booleanSy:t=6}return new V(e,t)}if(this.symbol.symbolCode===r.ident)return e=this.symbol,this.nextSym(),new F(e);if(this.symbol.symbolCode===r.arraySy)return e=this.symbol,this.nextSym(),this.accept(r.lBracket),this.scanListArrayType(e);if(this.symbol.symbolCode===r.leftPar){let e=new pe(this.symbol),t=null;do{this.nextSym(),t=new W(this.symbol),e.items.push(t),this.accept(r.ident)}while(this.symbol.symbolCode===r.comma);return this.accept(r.rightPar),e}if(this.symbol.symbolCode===r.functionSy){let e=new Y(this.symbol);return this.nextSym(),e.signature=this.scanParametersList(),this.accept(r.colon),e.returnType=this.scanType(),e}if(this.symbol.symbolCode===r.procedureSy){let e=new ye(this.symbol);return this.nextSym(),e.signature=this.scanParametersList(),e}if(this.symbol.symbolCode===r.recordSy){let e=this.symbol;this.nextSym();let t=[];do{if(t.length>0&&(this.symbol.symbolCode===r.semicolon&&this.nextSym(),this.symbol.symbolCode===r.endSy))break;let e=new de(this.symbol),s=[];do{s.length>0&&this.symbol.symbolCode===r.comma&&this.nextSym(),s.push(new W(this.symbol)),this.accept(r.ident)}while(this.symbol.symbolCode===r.comma);this.accept(r.colon),e.identifiers=s,e.type=this.scanType(),t.push(e)}while(this.symbol.symbolCode===r.semicolon);return this.accept(r.endSy),new $(e,t)}}scanProcedure(){let e=this.symbol;this.accept(r.procedureSy);let t=new W(this.symbol);this.accept(r.ident);let s=new ye(e);s.signature=this.scanParametersList();let i=this.tree;this.treesCounter++,this.tree=new ie(e,s,i),this.trees[this.treesCounter]=this.tree,this.tree.name=t;let n=this.tree.name.symbol.value.toLowerCase();this.tree.signature=this.scanParametersList(),this.accept(r.semicolon),this.scanBlock(),this.accept(r.semicolon),this.trees[this.treesCounter-1].functionsStore.addFunction(n,this.tree),this.treesCounter--,this.tree=this.trees[this.treesCounter]}scanFunction(){let e=this.symbol;this.accept(r.functionSy);let t=new W(this.symbol);this.accept(r.ident);let s=new Y(e);s.signature=this.scanParametersList(),this.accept(r.colon),s.returnType=this.scanType();let i=this.tree;this.treesCounter++,this.tree=new ne(e,s,i),this.trees[this.treesCounter]=this.tree,this.tree.name=t;let n=this.tree.name.symbol.value.toLowerCase();this.accept(r.semicolon),this.scanBlock(),this.accept(r.semicolon),this.trees[this.treesCounter-1].functionsStore.addFunction(n,this.tree),this.treesCounter--,this.tree=this.trees[this.treesCounter]}scanParametersList(){let e=[];if(this.symbol.symbolCode===r.leftPar){if(this.nextSym(),this.symbol.symbolCode!==r.rightPar)do{e.length>0&&this.symbol.symbolCode===r.semicolon&&this.nextSym();let t=!1;this.symbol.symbolCode===r.varSy&&(t=!0,this.nextSym());let s=new de(this.symbol,t),i=[];do{i.length>0&&this.symbol.symbolCode===r.comma&&this.nextSym(),i.push(new W(this.symbol)),this.accept(r.ident)}while(this.symbol.symbolCode===r.comma);this.accept(r.colon),s.identifiers=i,s.type=this.scanType(),e.push(s)}while(this.symbol.symbolCode===r.semicolon);this.accept(r.rightPar)}return e}statementPart(){for(this.accept(r.beginSy);null!==this.symbol&&this.symbol.symbolCode!==r.endSy;){let e=this.scanSentence();this.tree.sentences.push(e),this.symbol.symbolCode!==r.endSy&&this.accept(r.semicolon)}this.accept(r.endSy)}goToEnd(){do{this.nextSym()}while(null!==this.symbol)}scanSentence(){if(this.symbol.symbolCode===r.ident){let e=this.scanIdentifierBranch();if(this.symbol.symbolCode===r.assign||this.symbol.symbolCode===r.plusAssign||this.symbol.symbolCode===r.minusAssign||this.symbol.symbolCode===r.starAssign||this.symbol.symbolCode===r.slashAssign){let t=this.symbol;return this.nextSym(),new b(t,e,this.scanExpression())}return e}if(this.symbol.symbolCode===r.beginSy)return this.scanCompoundOperator();if(this.symbol.symbolCode===r.ifSy){let e=this.symbol;this.nextSym();let t=this.scanExpression();this.accept(r.thenSy);let s=this.scanSentence(),i=null;return this.symbol.symbolCode===r.elseSy&&(this.nextSym(),i=this.scanSentence()),new G(e,t,s,i)}if(this.symbol.symbolCode===r.whileSy){let e=this.symbol;this.nextSym();let t=this.scanExpression();this.accept(r.doSy);let s=this.scanSentence();return new be(e,t,s)}if(this.symbol.symbolCode===r.repeatSy){let e=this.symbol,t=new U(e);for(this.nextSym();null!==this.symbol&&this.symbol.symbolCode!==r.untilSy;){let e=this.scanSentence();t.sentences.push(e),this.symbol.symbolCode!==r.untilSy&&this.accept(r.semicolon)}this.accept(r.untilSy);let s=t,i=this.scanExpression();return new we(e,i,s)}if(this.symbol.symbolCode===r.forSy){let e=this.symbol;this.nextSym();let s=this.symbol;this.accept(r.ident);let i=new W(s);this.symbol,this.accept(r.assign);let n=this.scanSimpleExpression(),a=!1;switch(this.symbol.symbolCode){case r.downtoSy:a=!0;break;case r.toSy:a=!1;break;default:let e=`Symbols 'to' or 'downto' expected but '${this.symbol.stringValue}' found.`;this.addError(t.inadmissibleSymbol,e,this.symbol)}this.nextSym();let l=this.scanSimpleExpression();this.accept(r.doSy);let o=this.scanSentence();return new Se(e,i,n,l,a,o)}if(this.symbol.symbolCode===r.breakSy){let e=this.symbol;return this.nextSym(),new Ce(e)}if(this.symbol.symbolCode===r.caseSy){let e=this.symbol;this.nextSym();let t=this.scanExpression();this.accept(r.ofSy);let s=new ge(e,t);do{let e=new xe(this.symbol),t=null;do{e.constants.push(this.scanConstant()),t=this.symbol.symbolCode===r.comma,t&&this.nextSym()}while(t);this.accept(r.colon),e.operator=this.scanSentence(),s.cases.push(e),this.symbol.symbolCode!==r.endSy&&this.symbol.symbolCode!==r.elseSy?this.accept(r.semicolon):this.symbol.symbolCode===r.semicolon&&this.nextSym()}while(this.symbol.symbolCode!==r.endSy&&this.symbol.symbolCode!==r.elseSy);return this.symbol.symbolCode===r.elseSy&&(this.nextSym(),s.elseSentence=this.scanSentence(),this.symbol.symbolCode===r.semicolon&&this.accept(r.semicolon)),this.accept(r.endSy),s}}scanCompoundOperator(){let e=new U(this.symbol);for(this.accept(r.beginSy);null!==this.symbol&&this.symbol.symbolCode!==r.endSy;){let t=this.scanSentence();e.sentences.push(t),this.symbol.symbolCode!==r.endSy&&this.accept(r.semicolon)}return this.accept(r.endSy),e}scanIndicesBrackets(e){this.accept(r.lBracket);let t=new g(e,this.scanExpression());for(;this.symbol.symbolCode===r.comma;){let e=this.symbol;this.nextSym();let s=new g(e,this.scanExpression());t.appendIndexRing(s)}return this.accept(r.rBracket),t}scanIndices(e){this.symbol;let t=this.scanIndicesBrackets(this.symbol);for(;this.symbol.symbolCode===r.lBracket;){let e=this.symbol,s=this.scanIndicesBrackets(e);t.appendIndexRing(s)}return t}scanIdentifierBranch(e=null){let t=null;if(null===e){let e=this.symbol;this.nextSym(),t=new W(e)}else t=e;switch(this.symbol.symbolCode){case r.leftPar:let e=this.symbol;this.nextSym();let s=this.scanParameters();return this.scanIdentifierBranch(new D(e,t,s));case r.lBracket:let i=this.symbol;return this.scanIdentifierBranch(new w(i,t,this.scanIndices()));case r.point:let n=this.symbol;this.nextSym();let a=new W(this.symbol);return this.accept(r.ident),this.scanIdentifierBranch(new C(n,t,a));case r.arrow:let l=this.symbol;return this.nextSym(),this.scanIdentifierBranch(new x(l,t));default:return t}}scanExpression(){if(this.symbol.symbolCode===r.at){let e=this.symbol;this.nextSym();let t=this.symbol;this.accept(r.ident);let s=new W(t),i=this.scanIdentifierBranch(s);return new S(e,i)}let e=this.scanSimpleExpression();switch(this.symbol.symbolCode){case r.equal:return this.nextSym(),new ae(this.symbol,e,this.scanSimpleExpression());case r.later:return this.nextSym(),new oe(this.symbol,e,this.scanSimpleExpression());case r.greater:return this.nextSym(),new he(this.symbol,e,this.scanSimpleExpression());case r.laterGreater:return this.nextSym(),new le(this.symbol,e,this.scanSimpleExpression());case r.laterEqual:return this.nextSym(),new ue(this.symbol,e,this.scanSimpleExpression());case r.greaterEqual:return this.nextSym(),new ce(this.symbol,e,this.scanSimpleExpression());case r.inSy:return this.nextSym(),new re(this.symbol,e,this.scanSimpleExpression());default:return e}}scanSimpleExpression(){let e=!1,t=!1,s=null,i=null;switch(this.symbol.symbolCode){case r.minus:e=!0;case r.plus:i=this.symbol,this.nextSym();break;case r.notSy:t=!0,i=this.symbol,this.nextSym()}for(s=this.scanTerm(),e&&(s=new J(i,s)),t&&(s=new Q(i,s));null!==this.symbol&&(this.symbol.symbolCode===r.plus||this.symbol.symbolCode===r.minus||this.symbol.symbolCode===r.orSy);)switch(this.symbol.symbolCode){case r.plus:this.nextSym(),s=new k(this.symbol,s,this.scanTerm());break;case r.minus:this.nextSym(),s=new T(this.symbol,s,this.scanTerm());break;case r.orSy:this.nextSym(),s=new H(this.symbol,s,this.scanTerm())}return s}scanTerm(){let e=this.scanMultiplier(),t=null;for(;[r.star,r.slash,r.divSy,r.modSy,r.andSy].includes(this.symbol.symbolCode);)switch(t=this.symbol.symbolCode,this.nextSym(),t){case r.star:e=new I(this.symbol,e,this.scanMultiplier());break;case r.slash:e=new E(this.symbol,e,this.scanMultiplier());break;case r.divSy:e=new _(this.symbol,e,this.scanMultiplier());break;case r.modSy:e=new K(this.symbol,e,this.scanMultiplier());break;case r.andSy:e=new X(this.symbol,e,this.scanMultiplier())}return e}scanMultiplier(){if(this.symbol.symbolCode===r.ident)return this.scanIdentifierBranch();if(this.symbol.symbolCode===r.floatC||this.symbol.symbolCode===r.intC||this.symbol.symbolCode===r.stringC||this.symbol.symbolCode===r.charC||this.symbol.symbolCode===r.booleanC)return this.scanUnsignedConstant();if(this.symbol.symbolCode===r.leftPar){this.nextSym();let e=this.scanExpression();return this.accept(r.rightPar),e}{let e=`Multiplier expression expected but '${this.symbol.stringValue}' found.`;this.addError(t.inadmissibleSymbol,e,this.symbol)}}scanParameters(){let e=[];if(this.symbol.symbolCode!==r.rightPar)do{e.length>0&&this.symbol.symbolCode===r.comma&&this.nextSym(),e.push(this.scanExpression())}while(this.symbol.symbolCode===r.comma);return this.accept(r.rightPar),e}scanUnsignedConstant(){let e=null;switch(this.symbol.symbolCode){case r.floatC:case r.intC:case r.charC:case r.stringC:case r.booleanC:e=new M(this.symbol),this.nextSym()}return e}scanConstant(){let e=!1,t=null;switch(this.symbol.symbolCode){case r.minus:t=this.symbol,this.nextSym(),e=!0;break;case r.plus:t=this.symbol,this.nextSym()}let s=null;switch(this.symbol.symbolCode){case r.floatC:case r.intC:case r.charC:case r.stringC:case r.booleanC:case r.ident:s=new M(this.symbol),this.nextSym()}return e&&(s=new J(t,s)),s}addError(e,t=null,s){this.lexicalAnalyzer.fileIO.addError(e,t,s.textPosition)}}class Ie{constructor(){this.type=null,this.typeId=null}getType(){return this.type?this.type:this.typeId}}class Ee extends Ie{constructor(e,t){if(super(),this.value=e,this.typeId=t,t instanceof V)this.type=t;else switch(t){case 6:this.type=new O(null);break;case 2:this.type=new N(null);break;case 0:this.type=new A(null);break;case 1:this.type=new B(null);break;case 7:this.type=new P(null)}}clone(){return new Ee(this.value,this.typeId)}}class ke extends Ie{constructor(e,t=null){super(),this.typeId=12,this.variableType=e,this.valueType=t,this.type=e}clone(){return new ke(this.valueType,this.type.type)}}class Te extends Ie{constructor(e,t){super(),this.value=e,this.typeId=5,this.type=t}getIndex(){let e=this.type.items.length;for(let t=0;t<e;t++)if(this.type.items[t].symbol.stringValue.toLowerCase()===this.value.symbol.stringValue.toLowerCase())return t}clone(){return new Te(this.value,this.type)}}class Le extends Ie{constructor(e,t){super(),this.typeId=3,this.type=e,this.scope=t,this.items=[],this.leftIntegerIndex=0,this.rightIntegerIndex=null,this.offset=null,this.arrayLength=null}setValue(e,s,i){let n=e.evaluatedIndexExpression,r=this.scope.getIntegerValueOfIndexVariable(n)+this.offset;r<0||r>=this.arrayLength?this.scope.addError(t.indexIsOutOfRange,"",e):void 0===this.items[r]&&(this.items[r]=this.scope.createVariable(this.type.typeOfElements,i));let a=this.items[r];null===e.indexRing?a.value=i.value:e.indexRing instanceof g&&a.setValue(e.indexRing,s,i)}getByIndexRing(e){let s=e.evaluatedIndexExpression,i=this.scope.getIntegerValueOfIndexVariable(s)+this.offset;if(!(i<0||i>=this.arrayLength)){void 0===this.items[i]&&(this.items[i]=this.scope.createDefaultVariable(this.type.typeOfElements));let t=this.items[i];return e.indexRing instanceof g?t.getByIndexRing(e.indexRing):t}this.scope.addError(t.indexIsOutOfRange,"",e)}clone(){let e=new Le(this.type,this.scope);return e.rightIntegerIndex=this.rightIntegerIndex,e.offset=this.offset,e.arrayLength=this.arrayLength,e.parentArray=this.parentArray,this.items.forEach(((t,s)=>{e.items[s]=t.clone()})),e}}class Ve extends Ie{constructor(e,t){super(),this.typeId=8,this.type=new fe(null,t),this.variable=e}clone(){return new Ve(this.variable,this.type)}}class Oe extends Ie{constructor(e,t){super(),this.typeId=4,this.type=e,this.items={},this.scope=t}setPropertyByPropertyIdentifier(e,s){let i=e.symbol.value;this.type.typesList.hasOwnProperty(i)?this.items[i]=s:this.scope.addError(t.indexIsOutOfRange,`Property ${i} is not defined.`,e)}getByPropertyIdentifier(e){let s=e.symbol.value;if(this.type.typesList.hasOwnProperty(s)){if(!this.items.hasOwnProperty(s)){let e=this.type.typesList[s];this.items[s]=this.scope.createDefaultVariable(e)}return this.items[s]}this.scope.addError(t.indexIsOutOfRange,`Property ${s} is not defined.`,e)}clone(){let e=new Oe(this.type,this.scope),t=null;for(t in this.items)e.items[t]=this.items[t].clone(this.scope);return e}}class Pe extends Ie{constructor(e,t=null){super(),this.type=e,this.typeId=e.typeId,this.value=t}clone(){return new Pe(this.type,this.value)}}class Ne extends te{constructor(e=null){super(e),this.vars=[],this.signature=[],this.sentences=[],this.name=null}async innerRun(){}}class Re extends Ne{constructor(e=null){super(),this.name=e}}class Ae extends f{constructor(e=null,t=null){super(e),this.typeId=t}}class Be{constructor(e=null){this.type=e}}class Me extends Ae{constructor(e=null){super(null,null)}}class We extends Ae{constructor(){super(null,null)}}class De{constructor(e=null){this.parentScope=e,this.items={},this.constants={},this.enumsItems={},this.types={},this.cycleDepth=0,this.errorsDescription=new s,this.parametersList=null,this.callableName=null}addVariable(e,s,i=null,n=null,r=!1){let a=(e instanceof W?e.symbol.value:e).toLowerCase();if(this.constants.hasOwnProperty(a))this.addError(t.identifierAlreadyUsed,`Constant '${a}' declared.`,null===n?s:n);else if(this.items.hasOwnProperty(a))this.addError(t.identifierAlreadyUsed,`Variable '${a}' already declared.`,null===n?s:n);else{let e=this.createVariable(s,i);this.items[a]=e,r&&(this.items.result=e)}}createVariable(e,t=null){let s=this.resolveNamedType(e);if(s instanceof V){if(null===t)switch(s.typeId){case 0:case 1:t=0;break;case 2:t=String.fromCharCode(0);break;case 7:t=""}return new Ee(t,s.typeId)}if(s instanceof pe)return null===t&&(t=s.items[0]),new Te(t,s);if(s instanceof me)return this.createArrayVariable(t,e);if(s instanceof fe){let s=this.resolveNamedType(e.type);return new Ve(t,s)}return s instanceof Y||s instanceof ye||s instanceof $?this.createDefaultVariable(s):s instanceof Be?new ke(s.type,t):void 0}getIntegerValueOfIndexConstant(e){if(e instanceof M)switch(e.typeId){case 0:return e.symbol.value;case 2:return e.symbol.value.charCodeAt(0);case 5:return this.getEnumElement(e).getIndex()}else if(e instanceof J){let s=e.value;if(s instanceof M&&0===s.typeId)return-s.symbol.value;this.addError(t.typesMismatch,"Integer constant expected after unary minus.",s)}}getIntegerValueOfIndexVariable(e){switch(e.typeId){case 0:return e.value;case 2:return e.value.charCodeAt(0);case 5:return this.getEnumElement(e.value).getIndex()}}createArrayVariable(e,t){let s=this.resolveNamedType(t),i=new Le(s,this);i.parentArray=e;let n=s.leftIndex,r=s.rightIndex,a=this.getIntegerValueOfIndexConstant(n),l=this.getIntegerValueOfIndexConstant(r),o=Math.min(a,l),h=Math.max(a,l),c=-o;return i.offset=c,i.arrayLength=h-o+1,i.leftIntegerIndex=0,i.rightIntegerIndex=h,i.rightIntegerIndex=h,i}resolveNamedType(e){if(e instanceof F){let t=e.symbol.stringValue,s=this.getType(t);return this.resolveNamedType(s)}return e}setValue(e,s,i,n=null){let r=i instanceof Ee||i instanceof Te||i instanceof Pe?i.value:i,a=null;e instanceof W?a=e:e instanceof w&&(a=e.identifier);let l=a.symbol.stringValue.toLowerCase();if(this.items.hasOwnProperty(l)){let i=this.items[l];if(i instanceof Ee||i instanceof Te||i instanceof Pe)this.sameType(i.getType(),s)?this.items[l].value=r:this.addTypeMismatchError(s,i,n);else if(i instanceof Le){let t=null;if(e instanceof W)if(t=i.type,this.sameType(s,t)){let e=r.clone();i.items=e.items}else this.addTypeMismatchError(s,i,n);else if(e instanceof w){let a=e.indexRing;t=this.getDestinationType(i.type,a),this.sameType(s,t)?(r instanceof Le&&(r=r.clone()),i.setValue(a,s,r)):this.addTypeMismatchError(s,i,n)}}else if(i instanceof Oe){let e=r.clone();i.items=e.items}else i instanceof Ve&&s instanceof fe?this.sameType(i.type,s)?i.variable=r.variable:this.addTypeMismatchError(s,i,n):i instanceof ke&&s instanceof Be?this.typeIncluded(i.variableType,r.valueType)?i.valueType=r.valueType:this.addTypeMismatchError(i.variableType,r,n):this.addError(t.typesMismatch,null,n)}else this.parentScope?this.parentScope.setValue(e,s,r,n):this.addError(t.variableNotDeclared,`Variable '${l}' not declared.`,n)}setVariableValue(e,s,i=null){let n=s.getType(),r=null;e instanceof W?r=e:e instanceof w&&(r=e.identifier);let a=r.symbol.stringValue.toLowerCase();if(this.items.hasOwnProperty(a)){let r=this.items[a];if((r instanceof Ee||r instanceof Te||r instanceof Pe||r instanceof Le&&e instanceof W||r instanceof Oe)&&(this.typeIncluded(r.getType(),n)||this.addTypeMismatchError(n,r,i)),r instanceof Ee||r instanceof Te||r instanceof Pe)this.items[a].value=s.value;else if(r instanceof Le){if(e instanceof W){let e=s.clone();r.items=e.items}else if(e instanceof w){let t=e.indexRing,a=this.getDestinationType(r.type,t);this.sameType(n,a)?(s=s.clone(),r.setValue(t,n,s)):this.addTypeMismatchError(n,r,i)}}else if(r instanceof Oe){let e=s.clone();r.items=e.items}else r instanceof Ve&&n instanceof fe?this.sameType(r.type,n)?r.variable=s.variable:this.addTypeMismatchError(n,r,i):this.addError(t.typesMismatch,null,i)}else this.parentScope?this.parentScope.setVariableValue(e,s,i):this.addError(t.variableNotDeclared,`Variable '${a}' not declared.`,i)}setRecordVariableProperty(e,s,i){let n=i.getType(),r=e.getByPropertyIdentifier(s);this.sameType(r.getType(),n)||this.addTypeMismatchError(n,r,s),r instanceof Ee||r instanceof Te||r instanceof Pe?r.value=i.value:r instanceof Le||r instanceof Oe?e.setPropertyByPropertyIdentifier(s,i.clone()):this.addError(t.typesMismatch,null,s)}setVariableObject(e,t){let s=e.symbol.stringValue.toLowerCase();this.items[s]=t}addTypeMismatchError(e,s,i){let n=Number.isInteger(e)?new V(null,e):e,r=!1===s.type?new V(null,s.typeId):s.type;this.addError(t.typesMismatch,`Type ${r} expected but ${n} found.`,i)}getDestinationType(e,t){return e instanceof me&&t&&null!==t?this.getDestinationType(e.typeOfElements,t.indexRing):e}getVariable(e){let t=e.toLowerCase();return this.items.hasOwnProperty(t)?this.items[t]:this.parentScope?this.parentScope.getVariable(e):null}getElementByIdentifier(e){if(e instanceof W){let t=e.symbol.value.toLowerCase();if(this.types.hasOwnProperty(t)){let e=this.types[t];return new ke(e,e)}return this.constants.hasOwnProperty(t)?this.constants[t]:this.items.hasOwnProperty(t)?this.items[t]:this.enumsItems.hasOwnProperty(t)?this.enumsItems[t]:this.parentScope?this.parentScope.getElementByIdentifier(e):null}}getEnumElement(e){let s=e.symbol.value.toLowerCase();if(this.enumsItems.hasOwnProperty(s))return this.enumsItems[s];this.addError(t.variableNotDeclared,`Enum element '${s}' not declared.`,e)}sameType(e,t){let s=e instanceof F?this.resolveNamedType(e):e,i=t instanceof F?this.resolveNamedType(t):t;if(s instanceof V)return s.typeId===i.typeId;if(s.constructor!==i.constructor)return!1;if(s instanceof pe)return Object.is(s,i);if(s instanceof Y||s instanceof ye){let e=this.getParametersArray(s),t=this.getParametersArray(i);return e.length===t.length&&(!(s instanceof Y)||this.sameType(s.returnType,i.returnType))}if(s instanceof me)return this.sameType(s.typeOfElements,i.typeOfElements)&&s.leftIndex.symbol.value===i.leftIndex.symbol.value&&s.rightIndex.symbol.value===i.rightIndex.symbol.value;if(s instanceof fe)return this.sameType(s.type,i.type);if(s instanceof $){let e=Object.keys(s.typesList).length===Object.keys(i.typesList).length,t=null;for(t in s.typesList){if(!e)return!1;e=e&&i.typesList.hasOwnProperty(t)&&this.sameType(s.typesList[t],i.typesList[t])}return e}}getParametersArray(e){let t=[],s=0,i=e.signature.length;for(let n=0;n<i;n++){let i=e.signature[n],r=i.identifiers.length;for(let e=0;e<r;e++)t[s++]=i}return t}addError(e,t=null,s=null){let n=this.errorsDescription.getErrorTextByCode(e)+(null===t?"":". "+t),r=null===s?null:s.symbol.textPosition;throw new i(e,n,r)}addType(e){let s=e.identifier.symbol.stringValue.toLowerCase();if(this.types.hasOwnProperty(s))this.addError(t.identifierAlreadyUsed,`Type '${s}' already declared.`,e);else if(this.types[s]=e.type,e.type instanceof pe){let s=this;e.type.items.forEach((function(i){let n=i.symbol.stringValue.toLowerCase();s.enumsItems.hasOwnProperty(n)&&s.addError(t.identifierAlreadyUsed,`Enumeration item '${n}' already declared.`,i),s.enumsItems[n]=new Te(i,e.type)}))}}getType(e,s=null){let i=e.toLowerCase();return this.types.hasOwnProperty(i)?this.types[i]:this.parentScope?this.parentScope.getType(e,s):void this.addError(t.typeNotDeclared,`Type '${i}' not declared.`,s)}getParametersList(){return this.parametersList}setParametersList(e){this.parametersList=e}addConstant(e){let s=e.identifier.symbol.stringValue,i=e.type,n=e.value,r=s.toLowerCase();if(this.constants.hasOwnProperty(r))this.addError(t.identifierAlreadyUsed,`Constant '${r}' already declared.`,e);else{let e=null,t=this.resolveNamedType(i);(null===t||t instanceof V)&&(e=new Ee(n.symbol.value,i?t.typeId:n.typeId)),this.constants[r]=e}}getVariableByReference(e){let s=e.symbol.value.toLowerCase();if(this.items.hasOwnProperty(s))return this.items[s];{let i=this.parentScope.getVariableByReference(e);if(i)return i;this.addError(t.variableNotDeclared,`Variable '${s}' not declared.`,e)}}addVariableByReference(e,t){let s=t.symbol.value.toLowerCase(),i=this.parentScope.getVariableByReference(e);this.items[s]=i}createDefaultVariable(e){if(e instanceof V){let t=null;switch(e.typeId){case 6:t=!1;break;case 2:t=String.fromCharCode(0);break;case 0:case 1:t=0;break;case 7:t=""}return new Ee(t,e.typeId)}if(e instanceof $)return new Oe(e,this);if(e instanceof ye){let t=new Ne;return t.signature=e.signature,t.type=e,new Pe(e,t)}if(e instanceof fe)return new Ve(null,e);if(e instanceof Y){let t=new Re;return t.signature=e.signature,t.returnType=e.returnType,t.name=new W({value:"outputValue"}),t.type=e,new Pe(e,t)}if(e instanceof me){let t=this.resolveNamedType(e),s=new Le(t,this),i=t.leftIndex,n=t.rightIndex,r=this.getIntegerValueOfIndexConstant(i),a=this.getIntegerValueOfIndexConstant(n),l=Math.min(r,a),o=Math.max(r,a),h=-l;return s.offset=h,s.arrayLength=o-l+1,s.leftIntegerIndex=0,s.rightIntegerIndex=o,s.rightIntegerIndex=o,s}}typeIncluded(e,t){return e instanceof Me?t instanceof O||t instanceof N||t instanceof A||t instanceof pe:e instanceof We?t instanceof me:e instanceof P&&t instanceof N||this.sameType(e,t)}checkType(e,t){return!(e instanceof Ae&&!this.typeIncluded(e,t))&&(e instanceof R?t instanceof R:!(e instanceof L&&!this.sameType(e,t)||e instanceof Be&&!this.typeIncluded(e.type,t)))}}class $e extends f{constructor(e,t,s=[]){super(e),this.identifier=t,this.parameters=s}}class Fe extends Re{constructor(){super()}async innerRun(e){let t=e.getParametersList()[0].value.charCodeAt(0),s="ord";e.addVariable(s,this.type.returnType,null,null,!0),e.callableName=s,e.setValue(new Identifier(new Symbol(null,null,s)),new CharType,t)}}class qe extends Re{constructor(){super()}async innerRun(e){let t=e.getParametersList()[0].value,s=String.fromCharCode(t),i="chr";e.addVariable(i,this.type.returnType,null,null,!0),e.callableName=i,e.setValue(new Identifier(new Symbol(null,null,i)),new N,s)}}class je extends Re{constructor(){super("low"),this.type=new Y(null,[new de(null,!1,new We,[new W(new o(null,null,"array"))])],new Me)}async innerRun(e){let t=e.getVariable("array").type.leftIndex,s=null,i=t.typeId,n=t.symbol.value;switch(i){case 6:s=new O(null);break;case 2:s=new N(null);break;case 0:s=new A(null)}e.addVariable("low",s,n,null,!0),e.callableName="low"}}class ze extends Re{constructor(){super("low"),this.type=new Y(null,[new de(null,!1,new Be(new We),[new W(new o(null,null,"array"))])],new Me)}async innerRun(e){let t=e.getVariable("array").valueType.leftIndex,s=null,i=t.typeId,n=t.symbol.value;switch(i){case 6:s=new O(null);break;case 2:s=new N(null);break;case 0:s=new A(null)}e.addVariable("low",s,n,null,!0),e.callableName="low"}}class Ue extends Re{constructor(){super("high"),this.type=new Y(null,[new de(null,!1,new We,[new W(new o(null,null,"array"))])],new Me)}async innerRun(e){let t=e.getVariable("array").type.rightIndex,s=null,i=t.typeId,n=t.symbol.value;switch(i){case 6:s=new O(null);break;case 2:s=new N(null);break;case 0:s=new A(null)}let r="high";e.addVariable(r,s,n,null,!0),e.callableName=r}}class Ge extends Re{constructor(){super("high"),this.type=new Y(null,[new de(null,!1,new Be(new We),[new W(new o(null,null,"array"))])],new Me)}async innerRun(e){let t=e.getVariable("array").valueType.rightIndex,s=null,i=t.typeId,n=t.symbol.value;switch(i){case 6:s=new O(null);break;case 2:s=new N(null);break;case 0:s=new A(null)}let r="high";e.addVariable(r,s,n,null,!0),e.callableName=r}}class _e extends Re{constructor(){super("random"),this.type=new Y(null,[new de(null,!1,new A,[new W(new o(null,null,"limit"))])],new A)}async innerRun(e){let t=e.getVariable("limit"),s=Math.sign(t.value),i=Math.abs(t.value),n=Math.floor(Math.random()*i),r="random";e.addVariable(r,this.type.returnType,null,null,!0),e.callableName=r,e.setValue(new W(new o(null,null,r)),this.type.returnType,0===n?0:s*n)}}class Ke extends Re{constructor(){super("random"),this.type=new Y(null,[],new B)}async innerRun(e){let t=Math.random(),s="random";e.addVariable(s,this.type.returnType,null,null,!0),e.callableName=s,e.setValue(new W(new o(null,null,s)),this.type.returnType,t)}}class Xe extends Re{constructor(){super("length"),this.type=new Y(null,[new de(null,!1,new P,[new W(new o(null,null,"inputString"))])],new A)}async innerRun(e){let t=e.getVariable("inputString").value,s="string"==typeof t?t.length:0,i=new A,n="length";e.addVariable(n,i,s,null,!0),e.callableName=n}}class He extends Ne{constructor(e,t){super(),this.outputStream=e,this.ouputNewLineSymbol=t,this.type=new ye(null,new Z,null)}async innerRun(e){let t=e.getParametersList();this.outputStream.write((null===t?"":t.map((function(e){return e instanceof Te?e.value.symbol.stringValue:e instanceof Ee?e.value:void 0})).join(""))+this.ouputNewLineSymbol)}}class Je extends Ne{constructor(e){super(),this.outputStream=e,this.type=new ye(null,new Z,null)}async innerRun(e){let t=e.getParametersList();this.outputStream.write(null===t?"":t.map((function(e){return e instanceof Te?e.value.symbol.stringValue:e instanceof Ee?e.value:void 0})).join(""))}}class Qe extends Ne{constructor(e,t,s){super(),this.input=e,this.outputStream=t,this.ouputNewLineSymbol=s,this.type=new ye(null,new Z(!0),null),this.char=null}async innerRun(e,s){let i=e.getParametersList(),n=[],r=[];await Promise.all(i.map((async e=>{let t=await s.evaluateIdentifierBranch(e);r.push(t.typeId),n.push(t.type)})));let a=await this.getWords(r,this.ouputNewLineSymbol);await a.forEach((async function(a,l){let o=null;switch(r[l]){case 0:o=Number.parseInt(a),isNaN(o)&&e.addError(t.typesMismatch,`Integer value expected, but '${a}' found.`,i[l]);break;case 1:o=parseFloat(a),isNaN(o)&&e.addError(t.typesMismatch,`Float value expected, but '${a}' found.`,i[l]);break;case 2:case 7:o=a;break;default:let s=n[l];s||(s=new V(null,r[l])),e.addError(t.typesMismatch,`Cannot input value of this type: ${s}`,i[l])}let h=new Ee(o,r[l]);await s.setIdentifierBranchValue(i[l],h)}))}async getWords(e){let t=[];for(let s=0;s<e.length;s++){let i=await this.getWord(e[0]);t[s]=i}return t}async getWord(e){let t="";switch(e){case 2:null===this.char?t=await this.input.getChar():(t=this.char,this.char=null);break;case 0:case 1:for(;null===this.char||null!==/[\r\n\s\t]/.exec(this.char);)await this.nextChar();do{t+=this.char,await this.nextChar()}while(null===/[\r\n\s\t]/.exec(this.char));break;default:for(null!==this.char&&""!==this.char&&"\n"!==this.char||await this.nextChar();this.char!==this.ouputNewLineSymbol;)t+=this.char,await this.nextChar()}return t}async nextChar(){let e=await this.input.getChar();this.char=e}}class Ye extends Ne{constructor(e,t,s){super(),this.input=e,this.outputStream=t,this.ouputNewLineSymbol=s,this.type=new ye(null,new Z(!0),null),this.char=null}async innerRun(e,s){let i=e.getParametersList(),n=[],r=[];await Promise.all(i.map((async e=>{let t=await s.evaluateIdentifierBranch(e);r.push(t.typeId),n.push(t.type)})));let a=await this.getWords(r,this.ouputNewLineSymbol);await a.forEach((async function(a,l){let o=null;switch(r[l]){case 0:o=Number.parseInt(a),isNaN(o)&&e.addError(t.typesMismatch,`Integer value expected, but '${a}' found.`,i[l]);break;case 1:o=parseFloat(a),isNaN(o)&&e.addError(t.typesMismatch,`Float value expected, but '${a}' found.`,i[l]);break;case 2:case 7:o=a;break;default:let s=n[l];s||(s=new V(null,r[l])),e.addError(t.typesMismatch,`Cannot input value of this type: ${s}`,i[l])}let h=new Ee(o,r[l]);await s.setIdentifierBranchValue(i[l],h)}))}async getWords(e){let t=[];for(let s=0;s<e.length;s++){let i=await this.getWord(e[0]);t[s]=i}return t}async getWord(e){let t="";switch(e){case 2:null===this.char?t=await this.input.getChar():(t=this.char,this.char=null);break;case 0:case 1:for(;null===this.char||null!==/[\r\n\s\t]/.exec(this.char);)await this.nextChar();do{t+=this.char,await this.nextChar()}while(null===/[\r\n\s\t]/.exec(this.char));break;default:for(null!==this.char&&""!==this.char&&"\n"!==this.char||await this.nextChar();this.char!==this.ouputNewLineSymbol;)t+=this.char,await this.nextChar()}return t}async nextChar(){let e=await this.input.getChar();this.char=e}}class Ze extends Ne{constructor(){super(),this.type=new ye(null,[],null)}async innerRun(e){}}class et extends Ne{constructor(){super("val"),this.type=new ye(null,[new de(null,!1,new P,[new W(new o(null,null,"s"))]),new de(null,!0,new R,[new W(new o(null,null,"v"))]),new de(null,!0,new A,[new W(new o(null,null,"code"))])]),this.char=null,this.letters=[],this.charCounter=0}async innerRun(e){let t=e.getVariable("s"),s=e.getVariable("v"),i=e.getVariable("code"),n=0,r=1,a=1,l=!1;this.letters=t.value.split(""),this.charCounter=0;let o="",h=s.type.typeId;if(this.char=this.nextCh(),this.skipWhiteSpaces(),null!==/[+-]/.exec(this.char)&&(a="-"===this.char?-1:1,this.char=this.nextCh(),this.skipWhiteSpaces()),null!==this.char)switch(h){case 0:for(;/\d/.exec(this.char);)o+=this.char,this.char=this.nextCh();if(""===o){l=!0,r=this.charCounter;break}this.skipWhiteSpaces(),l||this.charCounter!==this.letters.length?this.charCounter!==this.letters.length&&(r=this.charCounter):(n=Number.parseInt(o)*a,r=0);break;case 1:let e=!1;for(;null!==/[\d\.]/.exec(this.char);){if("."===this.char){if(e){l=!0,r=this.charCounter;break}e=!0}o+=this.char,this.char=this.nextCh()}if("."===o)o+="0";else if(""===o){l=!0;break}if(/e/i.exec(this.char)){if(o+=this.char,this.char=this.nextCh(),!/[\d+-]/.exec(this.char)){r=this.charCounter,l=!0;break}if(/[+-]/.exec(this.char)&&(o+=this.char,this.char=this.nextCh()),!/\d/.exec(this.char)){r=this.charCounter,l=!0;break}for(;/\d/.exec(this.char);)o+=this.char,this.char=this.nextCh()}this.skipWhiteSpaces(),l||this.charCounter!==this.letters.length?this.charCounter!==this.letters.length&&(r=this.charCounter):(n=parseFloat(o)*a,r=0)}s.value=n,i.value=r}nextCh(){return this.charCounter<this.letters.length?this.letters[this.charCounter++]:null}skipWhiteSpaces(){for(;null!==this.char&&null!==/\s/.exec(this.char);)this.char=this.nextCh()}}class tt extends ee{constructor(e,t,s){super(),this.items.chr=new qe,this.items.ord=new Fe,this.items.random=[new _e,new Ke],this.items.low=[new je,new ze],this.items.high=[new Ue,new Ge],this.items.length=[new Xe],this.items.writeln=new He(t,s),this.items.write=new Je(t),this.items.readln=new Qe(e,t,s),this.items.read=new Ye(e,t,s),this.items.randomize=new Ze,this.items.val=new et}addFunction(e,t){this.items[e.toLowerCase()]=t}}class st{constructor(e,t){this.tree=e,this.trees=[this.tree],this.treesCounter=0,this.scopes=[],this.currentScopeId=0,this.scopes[this.currentScopeId]=new De,this.functionsStore=new tt(t.input,t.outputStream,t.ouputNewLineSymbol),this.errorsDescription=new s}getCurrentScope(){return this.scopes[this.currentScopeId]}async run(){if(this.setConstants(),this.setTypes(),this.setVariables(),this.tree.sentences)for(let e=0;e<this.tree.sentences.length;e++)await this.evaluateSentence(this.tree.sentences[e])}setVariables(){let e=this.getCurrentScope();this.tree.vars&&this.tree.vars.forEach((function(t){if(!(t instanceof q))throw"VariablesDeclaration object must be here!";t.variablesType,t.identifiers.forEach((function(s){if(!(s instanceof W))throw"Identifier must be here!";{e.addVariable(s,t.variablesType,null,s);let i=t.initialValue;i instanceof M&&e.setValue(s,i.type,i.symbol.value,i)}}))}))}setTypes(){let e=this.getCurrentScope();this.tree.types&&this.tree.types.forEach((function(t){if(!(t instanceof z))throw"TypeDeclaration object must be here!";e.addType(t)}))}setConstants(){let e=this.getCurrentScope();this.tree.constants&&this.tree.constants.forEach((function(t){if(!(t instanceof j))throw"ConstantDeclaration object must be here!";e.addConstant(t)}))}async evaluateIndexRing(e){return e.evaluatedIndexExpression=await this.evaluateExpression(e.indexExpression),e.indexRing instanceof g&&await this.evaluateIndexRing(e.indexRing),e}async evaluateIdentifierBranchRunner(e,t=null,s=null){let i=await this.evaluateIdentifierBranch(e,t,s);for(;i instanceof Pe;){let e=this.getCurrentScope(),t=i.value,n=t.type,r=n.returnType;if(!(Array.isArray(n.signature)&&0===n.signature.length&&null===s||n.signature instanceof Z||!e.checkType(s,n)&&(n instanceof ye||e.checkType(s,r))))break;{let s=new De(e),n=null;if(t instanceof ne){let e=t.name;n=e.symbol.value.toLowerCase(),s.addVariable(e,t.type.returnType,null,null,!0),s.callableName=t.name.symbol.value}else t instanceof Re&&(n=t.name);this.treesCounter++,this.tree=t,this.trees[this.treesCounter]=this.tree,this.currentScopeId++,this.scopes[this.currentScopeId]=s,await this.run(),"function"==typeof t.innerRun&&await t.innerRun(s,this);let r=null;(t instanceof Re||t instanceof ne)&&(r=s.getVariable(n)),delete this.scopes[this.currentScopeId],this.currentScopeId--,this.treesCounter--,this.tree=this.trees[this.treesCounter],i=r}}return i}async evaluateIdentifierBranch(e,s=null,i=null){if(e instanceof W){let n=this.getCurrentScope(),r=e.symbol.value,a=n.getElementByIdentifier(e);if(null!==a)return a;let l=r.toLowerCase(),o=this.tree.functionsStore.getFunction(l,n,s,i)||this.functionsStore.getFunction(l,n,s,i);if(null!==o)return new Pe(Array.isArray(o)?new Y(null):o.type,o);this.addError(t.variableNotDeclared,`Element '${r}' not declared.`,e)}else if(e instanceof w){let i=this.getCurrentScope(),n=await this.evaluateIdentifierBranch(e.identifier,s),r=n.type;await this.evaluateIndexRing(e.indexRing);let a=e.indexRing;if(r instanceof me)return n.getByIndexRing(a);if(r instanceof P){null!==a.indexRing&&this.addError(t.typesMismatch," Illegal qualifier. Cannot apply more than one indices to String.",e);let s=a.evaluatedIndexExpression.type;s instanceof A||0===s.typeId||this.addError(t.typesMismatch,`Integer index expected but ${s} found.`,a.indexExpression);let r=a.evaluatedIndexExpression.value,l=n.value,o="string"==typeof l?l.length:0,h=0!==r&&r>=1&&r<=o?l[r-1]:String.fromCharCode(0);return i.createVariable(new N,h)}this.addError(t.typesMismatch,`Array or String expected but ${n.type} found.`,e)}else{if(e instanceof D){let t=e.parameters,s=await Promise.all(t.map((async e=>await this.evaluateExpression(e)))),i=[];Array.isArray(s)&&(i=s.map((e=>e.type)));let n=await this.evaluateIdentifierBranch(e.identifierBranch,i),r=n instanceof Pe?n.value:n,a=this.getCurrentScope(),l=new De(a),o=null;if(r instanceof ne){let e=r.name;o=e.symbol.value.toLowerCase(),l.addVariable(e,r.type.returnType,null,null,!0),l.callableName=r.name.symbol.value}else r instanceof Re&&(o=r.name);await this.addParametersToScope(e.parameters,s,r.type.signature,l),this.treesCounter++,this.tree=r,this.trees[this.treesCounter]=this.tree,this.currentScopeId++,this.scopes[this.currentScopeId]=l,await this.run(),"function"==typeof r.innerRun&&await r.innerRun(l,this);let h=null;return(r instanceof Re||r instanceof ne)&&(h=l.getVariable(o)),delete this.scopes[this.currentScopeId],this.currentScopeId--,this.treesCounter--,this.tree=this.trees[this.treesCounter],h}if(e instanceof x)return(await this.evaluateIdentifierBranch(e.pointer,s)).variable;if(e instanceof C){let t=await this.evaluateIdentifierBranch(e.baseExpression,s),i=e.subField;return t.getByPropertyIdentifier(i)}this.addError(t.typesMismatch,"Identifier branch expected.",e)}}async evaluateSentence(e){let s=this.getCurrentScope();if(e instanceof b){let i=e.destination,n=await this.evaluateIdentifierBranch(i),a=n.type,l=e.sourceExpression,o=await this.evaluateExpression(l,a),h=o.getType(),c=e.symbol.symbolCode;switch(c){case r.plusAssign:case r.minusAssign:case r.slashAssign:case r.starAssign:let s=n.getType(),i=s.typeId,a=h.typeId;switch(a){case 1:case 0:break;default:this.addError(t.typesMismatch,"Non-numeric source for assign operator",e)}switch(s.typeId){case 1:break;case 0:1!==a.typeId&&c!==r.slashAssign||this.addError(t.typesMismatch,"Cannot assign floating point value to an integer variable",e);break;default:this.addError(t.typesMismatch,"Non-numeric destination for assign operator",e)}let l=null;switch(c){case r.plusAssign:l=n.value+o.value;break;case r.minusAssign:l=n.value-o.value;break;case r.slashAssign:l=n.value/o.value;break;case r.starAssign:l=n.value*o.value}o=new Ee(l,i);default:case r.assign:}if(i instanceof C){let e=await this.evaluateIdentifierBranch(i.baseExpression),t=i.subField;s.setRecordVariableProperty(e,t,o)}else i instanceof w&&(i.indexRing=await this.evaluateIndexRing(i.indexRing)),s.setVariableValue(i,o,e.destination)}else if(e instanceof U){if(e.sentences){let t=e.sentences,s=t.length;for(let e=0;e<s;e++){let s=await this.evaluateSentence(t[e]);if(s instanceof Ce)return s}}}else{if(e instanceof G)return!0===(await this.evaluateExpression(e.condition)).value?await this.evaluateSentence(e.left):await this.evaluateSentence(e.right);if(e instanceof D||e instanceof $e)return await this.evaluateIdentifierBranch(e);if(e instanceof be){let t=this.getCurrentScope();for(t.cycleDepth++;!0===(await this.evaluateExpression(e.condition)).value&&!(await this.evaluateSentence(e.body)instanceof Ce););t.cycleDepth--}else if(e instanceof we){let t=this.getCurrentScope();t.cycleDepth++;do{if(await this.evaluateSentence(e.body)instanceof Ce)break}while(!0!==(await this.evaluateExpression(e.condition)).value);t.cycleDepth--}else if(e instanceof Se){let t=this.getCurrentScope(),s=e.variableIdentifier,i=await this.evaluateExpression(e.initExpression),n=await this.evaluateExpression(e.lastExpression),r=null,a=null,l=i.typeId,o=i.type;if(t.setValue(s,o,i.value,s),e.countDown)switch(l){case 0:r=function(e){return e.value--,e},a=(e,t)=>e.value>=t.value;break;case 2:r=function(e){let t=e.value.charCodeAt(0);return t--,e.value=String.fromCharCode(t),e},a=(e,t)=>e.value.charCodeAt(0)>=t.value.charCodeAt(0);break;case 5:r=function(e){let t=e.type.items,s=t.length,i=e.getIndex();return i--,e.value=t[(i+s)%s],e},a=(e,t)=>e.getIndex()>=t.getIndex()}else switch(l){case 0:r=function(e){return e.value++,e},a=(e,t)=>e.value<=t.value;break;case 2:r=function(e){let t=e.value.charCodeAt(0);return t++,e.value=String.fromCharCode(t),e},a=(e,t)=>e.value.charCodeAt(0)<=t.value.charCodeAt(0);break;case 5:r=function(e){let t=e.type.items,s=t.length,i=e.getIndex();return i++,e.value=t[i%s],e},a=(e,t)=>e.getIndex()<=t.getIndex()}t.cycleDepth++;let h=5===l?new Te(i.value,o):new Ee(i.value,o),c=!0;for(;a(i,n)&&c&&!(await this.evaluateSentence(e.body)instanceof Ce);)h.value=i.value,i=r(i),t.setValue(s,o,i.value),c=a(h,i);t.cycleDepth--}else if(e instanceof Ce){if(!(this.getCurrentScope().cycleDepth<=0))return e;this.addError(t.breakOutOfLoop,null,e)}else if(e instanceof ge){let s=await this.evaluateExpression(e.switchExpression),i=!1;this.getCurrentScope();for(let n=0;n<e.cases.length;n++){let r=e.cases[n];for(let e=0;e<r.constants.length;e++){let n=r.constants[e];if(n.typeId!==s.type.typeId&&this.addError(t.typesMismatch,"The constant and the switch expression have different types",n),n.symbol.value===s.value){i=!0,this.evaluateSentence(r.operator);break}}if(i)break}i||null===e.elseSentence||this.evaluateSentence(e.elseSentence)}else e instanceof W&&await this.evaluateIdentifierBranchRunner(e)}}async addParametersToScope(e,s,i,n){if(i instanceof Z)i.byReference?n.setParametersList(e):n.setParametersList(s);else{let r=0;for(let a=0;a<i.length;a++){let l=i[a],o=l.identifiers,h=l.byReference;for(let i=0;i<o.length;i++){let a=o[i],c=l.type,u=e[r];if(h)u instanceof W||this.addError(t.identifierExpected,"Cannot use other expressions here",u),n.addVariableByReference(u,a);else{let e=s[r];c instanceof Ae&&(c=e.type),n.addVariable(a,c),n.setValue(a,c,e,a)}r++}}}}async evaluateExpression(e,t=null){if(e instanceof S){let t=e.identifier,s=await this.evaluateIdentifierBranch(t),i=s.getType();return new Ve(s,i)}if(e instanceof ae){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),i=6,n=null;return n=5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()===s.getIndex():t.value===s.value,new Ee(n,i)}if(e instanceof he){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),i=6,n=null;return n=2===t.typeId&&2===s.typeId?t.value.charCodeAt(0)>s.value.charCodeAt(0):5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()>s.getIndex():t.value>s.value,new Ee(n,i)}if(e instanceof oe){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),i=6,n=null;return n=2===t.typeId&&2===s.typeId?t.value.charCodeAt(0)<s.value.charCodeAt(0):5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()<s.getIndex():t.value<s.value,new Ee(n,i)}if(e instanceof ce){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),i=6,n=null;return n=2===t.typeId&&2===s.typeId?t.value.charCodeAt(0)>=s.value.charCodeAt(0):5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()>=s.getIndex():t.value>=s.value,new Ee(n,i)}if(e instanceof ue){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),i=6,n=null;return n=2===t.typeId&&2===s.typeId?t.value.charCodeAt(0)<=s.value.charCodeAt(0):5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()<=s.getIndex():t.value<=s.value,new Ee(n,i)}if(e instanceof le){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),i=6,n=null;return n=5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()!==s.getIndex():t.value!==s.value,new Ee(n,i)}return e instanceof re?(await this.evaluateExpression(e.left),await this.evaluateExpression(e.right),new Ee(!1,6)):await this.evaluateSimpleExpression(e,t)}async evaluateSimpleExpression(e,t=null){if(e instanceof k||e instanceof T){let t=await this.evaluateSimpleExpression(e.left),s=await this.evaluateSimpleExpression(e.right),i=t.type instanceof P&&s.type instanceof P?7:1===t.typeId||1===s.typeId?1:0,n=null;return e instanceof k?n=t.value+s.value:e instanceof T&&(n=t.value-s.value),new Ee(n,i)}if(e instanceof H){let t=await this.evaluateSimpleExpression(e.left),s=await this.evaluateSimpleExpression(e.right),i=6,n=t.value||s.value;return new Ee(n,i)}return await this.evaluateTerm(e,t)}async evaluateTerm(e,t=null){if(e instanceof Q){let t=await this.evaluateTerm(e.value);return new Ee(!t.value,t.typeId)}if(e instanceof J){let t=await this.evaluateTerm(e.value);return new Ee(-t.value,t.typeId)}if(e instanceof I){let t=await this.evaluateMultiplier(e.left),s=await this.evaluateMultiplier(e.right),i=1===t.typeId||1===s.typeId?1:0,n=t.value*s.value;return new Ee(n,i)}if(e instanceof E){let t=await this.evaluateMultiplier(e.left),s=await this.evaluateMultiplier(e.right),i=1,n=t.value/s.value;return new Ee(n,i)}if(e instanceof _){let t=await this.evaluateMultiplier(e.left),s=await this.evaluateMultiplier(e.right),i=0,n=Math.trunc(t.value/s.value);return new Ee(n,i)}if(e instanceof K){let t=await this.evaluateMultiplier(e.left),s=await this.evaluateMultiplier(e.right),i=0,n=t.value%s.value;return new Ee(n,i)}if(e instanceof X){let t=await this.evaluateMultiplier(e.left),s=await this.evaluateMultiplier(e.right),i=6,n=t.value&&s.value;return new Ee(n,i)}return await this.evaluateMultiplier(e,t)}async evaluateMultiplier(e,t=null){return e instanceof M?new Ee(e.symbol.value,e.typeId):e instanceof D||e instanceof W||e instanceof w||e instanceof x||e instanceof C?await this.evaluateIdentifierBranchRunner(e,null,t):await this.evaluateExpression(e)}addError(e,t=null,s=null){let n=this.errorsDescription.getErrorTextByCode(e)+(null===t?"":". "+t),r=null===s?null:s.symbol.textPosition;throw new i(e,n,r)}async setIdentifierBranchValue(e,t){let s=this.getCurrentScope();if(e instanceof C){let i=await this.evaluateIdentifierBranch(e.baseExpression),n=e.subField;s.setRecordVariableProperty(i,n,t)}else e instanceof w&&this.evaluateIndexRing(e.indexRing),s.setVariableValue(e,t,e)}}class it{engine;error;constructor(e){this.config=e}async runString(e){let t=e=>{if(!(e instanceof i))throw e;{s.printListing(e);let t=this.config.listingOutput.outputLines;for(let e=0;e<t.length;e++)this.config.outputStream.addLine(t[e],!0);this.error=e}};try{var s=new n(e,this.config.listingOutput),r=new p(s),a=new ve(r).analyze(),l=new st(a,this.config);await l.run().catch(t)}catch(e){t(e)}return this.engine=l,l}getVar(e){return this.engine.getCurrentScope().items[e]}getVarValue(e){let t=this.getVar(e);return 3===t.typeId?this.getVar(e).items:5===t.typeId?this.getVar(e).value.symbol.stringValue:this.getVar(e).value}getError(){return this.error}}function nt(e){return(e<10?1:Math.floor(Math.log10(e)))+1}class rt extends class{constructor(){this.errorsCounter=0}listErrors(e){e.forEach((e=>this.listError(e)))}getLinePrefix(e){return"  "+(e<10?"0":"")+e+"    "}getErrorText(e,t){var s=nt(e.textPosition.lineNumber),i=s-nt(t),n=i<0?2+i:2,r=s+4;return"**"+(t<10?"0":"")+"0".repeat(i>0?i:0)+t+"*".repeat(n)+" ".repeat(e.textPosition.charNumber+1)+"^ Error Code "+e.errorCode+"\n"+"*".repeat(r)+"  "+e.errorText}listError(e){console.log(this.getErrorText(e,++this.errorsCounter))}}{constructor(){super(),this.outputLines=[]}listLine(e,t){var s=this.getLinePrefix(t+1)+e;this.outputLines.push(s.replace(/[\n\r]/g,""))}listError(e){this.outputLines.push(this.getErrorText(e,++this.errorsCounter))}}class at{constructor(){this.screen=document.querySelector(".screen"),this.letters=[],this.lettersCounter=0}getLine(e=!1){let t=document.querySelector(".screen"),s=t.querySelectorAll("div"),i=null;return e||0===s.length?(i=document.createElement("div"),t.appendChild(i)):i=s[s.length-1],i}addLine(e,t=!1){let s=this.getLine(t),i=document.createElement("span");i.textContent=e.replace(/ /g," "),s.appendChild(i),i.scrollIntoView()}write(e){let t=e.split("\n");this.addLine(t[0]);for(let e=1;e<t.length;e++)this.addLine(t[e],!0)}async read(e=!1){let t=this.getLine(e),s=document.createElement("span");s.contentEditable="true",t.appendChild(s),s.scrollIntoView();let i=document.querySelector(".screen");i.click();let n=this,r=function(e){if("Enter"===e.key){let t=this.querySelector("span[contenteditable=true");t&&(t.contentEditable="false",n.addLine("",!0),e.preventDefault(),i.removeEventListener("click",r))}},a=new Promise((function(e,t){setInterval((()=>{"false"===s.contentEditable&&e(s.textContent)}),300)}));return i.addEventListener("keydown",r),a}async getChar(){if(0===this.letters.length||this.lettersCounter>=this.letters.length){let e=await this.read()+"\n";this.letters=e.split(""),this.lettersCounter=0}let e=this.letters[this.lettersCounter];return this.lettersCounter++,e}}function lt(e){let t=document.querySelector("div.screen div span[contenteditable=true]");if(e.preventDefault(),t){let e=document.createRange(),s=window.getSelection();0===t.childNodes.length&&t.appendChild(document.createTextNode(""));let i=t.childNodes[0].length;s.anchorOffset!==i&&0!==i||(e.setStart(t.childNodes[0],i),e.collapse(!0),s.removeAllRanges(),s.addRange(e))}}document.addEventListener("DOMContentLoaded",(()=>{let e=document.createElement("dialog"),t=document.createElement("div");t.classList.add("screen");let s=document.createElement("button");s.id="close",s.textContent="Закрыть",e.appendChild(t),e.appendChild(s),document.querySelector("body").appendChild(e),t.addEventListener("click",lt);let i=new at;const n={outputStream:i,listingOutput:new rt,ouputNewLineSymbol:"\n",input:i};let r=document.querySelectorAll("div.delphi");document.querySelector("#close").onclick=function(){e.close()},r.forEach((t=>{t.querySelector("div.toolbar span a.command_help");let s=document.createElement("div");s.classList.add("run_button"),s.textContent="▶";let i=t.parentNode;i.prepend(s),s.addEventListener("click",(async function(t){e.show();let s=i.querySelector("table tbody tr td.code div.container").querySelectorAll("div.line"),r=[];for(let e=0;e<s.length;e++){let t=[...s[e].childNodes];for(let e=0;e<t.length;e++){let s=t[e];r.push(s.tagName&&"BR"===s.tagName?"\n":t[e].textContent)}r.push("\n")}let a=r.join(""),l=new it(n);try{await l.runString(a)}catch(e){}n.outputStream.value="",t.preventDefault()}))}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,