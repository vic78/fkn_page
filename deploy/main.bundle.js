(()=>{"use strict";class e{constructor(e=0,t=0){this.lineNumber=e,this.charNumber=t}}const t={inadmissibleSymbol:3,forbiddenCharacter:6,nameNotDescribed:104,breakOutOfLoop:105,identifierAlreadyUsed:106,variableNotDeclared:107,constantOrVariableNotDeclared:108,typesMismatch:109,typeNotDeclared:110,indexIsOutOfRange:111,identifierExpected:112,elementIsNotInitialized:113,notCallableElement:114,arrayExpected:115,recordPropertyIsNotDefined:116};class s{constructor(){this.errorCodeMapper=new Map([[1,"An error in primitive type"],[2,"Name expected"],[t.inadmissibleSymbol,"Inadmissible Symbol"],[t.forbiddenCharacter,"Forbidden character"],[t.nameNotDescribed,"Name is not described"],[t.breakOutOfLoop,"'break' is out of loop"],[t.identifierAlreadyUsed,"Identifier already used"],[t.variableNotDeclared,"Variable not declared"],[t.constantOrVariableNotDeclared,"Constant or variable not declared"],[t.typesMismatch,"Types mismatch"],[t.identifierExpected,"Identifier expected"],[t.indexIsOutOfRange,"Index is out of range"],[t.elementIsNotInitialized,"Element is not initialized"]])}getErrorTextByCode(e){return this.errorCodeMapper.has(e)?this.errorCodeMapper.get(e):null}}class i extends Error{constructor(e,t,s){super(t+` // line ${s.lineNumber} `+` column ${s.charNumber} `),this.errorCode=e,this.errorText=t,this.textPosition=s}}class r extends class{constructor(t,i){this.errorsDescription=new s,this.positionNow=new e,this.printer=t,this.reader=i,this.currentLine,this.currentLineErrors=[],this.lines=[],this.linePointer=0,this.currentLine,this.endOfFile=!1}setLines(e){this.lines=e.split(/\r?\n/),this.readNextLine()}getCurrentPosition(){return new e(this.positionNow.lineNumber,this.positionNow.charNumber)}nextCh(){return this.endOfFile&&this.positionNow.charNumber>=this.currentLine.length?null:(this.positionNow.charNumber===this.currentLine.length&&(this.currentLineErrors.length>0&&this.printer.listErrors(this.currentLineErrors),this.readNextLine(),this.currentLineErrors=[],this.positionNow.lineNumber++,this.positionNow.charNumber=0),this.currentLine[this.positionNow.charNumber++])}readNextLine(){var e=this.lines[this.linePointer++];this.currentLine=e.split(""),this.currentLine.push("\n"),this.endOfFile=this.linePointer===this.lines.length}addError(e,t=null,s=null){let r=this.errorsDescription.getErrorTextByCode(e)+(null===t?"":". "+t),n=null===s?this.getCurrentPosition():s;throw new i(e,r,n)}printListing(e=null){let t=e.textPosition.lineNumber;for(let e=0;e<=t;e++)this.printer.listLine(this.lines[e],e);this.printer.listError(e);for(let e=t+1;e<=this.lines.length-1;e++)this.printer.listLine(this.lines[e],e)}readWords(e){this.reader.readWords(e)}}{constructor(e,t,s=null){super(t,s),this.setLines(e)}}const n={star:21,slash:60,equal:16,comma:20,semicolon:14,colon:5,point:61,arrow:62,leftPar:9,rightPar:4,lBracket:11,rBracket:12,flPar:63,frPar:64,later:65,greater:66,laterEqual:67,greaterEqual:68,laterGreater:69,plus:70,minus:71,lComment:72,rComment:73,assign:51,twoPoints:74,at:75,ident:2,floatC:82,intC:15,charC:83,stringC:84,booleanC:85,caseSy:31,elseSy:32,fileSy:57,gotoSy:33,thenSy:52,untilSy:53,doSy:54,withSy:37,ifSy:56,ofSy:102,orSy:103,inSy:104,toSy:105,endSy:106,varSy:107,divSy:108,andSy:109,notSy:110,forSy:111,modSy:112,nilSy:113,setSy:114,typeSy:120,realSy:121,charSy:122,beginSy:123,whileSy:124,arraySy:125,constSy:126,labelSy:127,downtoSy:128,stringSy:129,packedSy:130,recordSy:131,repeatSy:132,integerSy:133,booleanSy:134,programSy:135,functionSy:136,procedureSy:137,breakSy:138,trueSy:139,falseSy:140};class a{constructor(){this.keyWordsCodes=new Map([["if",n.ifSy],["do",n.doSy],["of",n.ofSy],["or",n.orSy],["in",n.inSy],["to",n.toSy],["end",n.endSy],["var",n.varSy],["div",n.divSy],["and",n.andSy],["not",n.notSy],["for",n.forSy],["mod",n.modSy],["nil",n.nilSy],["set",n.setSy],["then",n.thenSy],["else",n.elseSy],["case",n.caseSy],["file",n.fileSy],["goto",n.gotoSy],["type",n.typeSy],["with",n.withSy],["real",n.realSy],["char",n.charSy],["true",n.trueSy],["begin",n.beginSy],["break",n.breakSy],["while",n.whileSy],["array",n.arraySy],["const",n.constSy],["label",n.labelSy],["until",n.untilSy],["false",n.falseSy],["downto",n.downtoSy],["string",n.stringSy],["packed",n.packedSy],["record",n.recordSy],["repeat",n.repeatSy],["program",n.programSy],["integer",n.integerSy],["boolean",n.booleanSy],["function",n.functionSy],["procedure",n.procedureSy]])}getSymbolCodeByKeyWord(e){let t=e.toLowerCase();return this.keyWordsCodes.has(t)?this.keyWordsCodes.get(t):n.ident}}class l{constructor(e,t,s,i){this.textPosition=e,this.symbolCode=t,this.stringValue=s,this.value=i}}class o extends l{constructor(e,t,s){super(e,t,s,s)}}class h extends l{constructor(e,t,s){super(e,t,s,parseFloat(s))}}class c extends l{constructor(e,t,s){super(e,t,s,Number.parseInt(s))}}class u extends l{constructor(e,t,s){super(e,t,s,s.replace(/'/g,""))}}class y extends l{constructor(e,t,s){super(e,t,s,s.replace(/'/g,""))}}class d extends l{constructor(e,t,s){super(e,t,s,"true"===s.toLowerCase())}}class p{constructor(e){this.fileIO=e,this.errorsCodes=t,this.token=null,this.currentWord=null,this.char=" ",this.symbol=null,this.MAX_IDENT=64,this.keyWords=new a,this.wordBuffer=null}nextSym(){return null===this.char?null:(this.skipWhiteSpaces(),this.token=this.fileIO.getCurrentPosition(),this.scanSymbol())}scanSymbol(){if(null===this.char)return null;if(null===this.wordBuffer?this.currentWord="":(this.currentWord=this.wordBuffer,this.wordBuffer=null),null!==/[a-z]/i.exec(this.char)){for(;null!==/\w/i.exec(this.char);)this.currentWord+=this.char,this.char=this.fileIO.nextCh();return this.getSymbol(this.keyWords.getSymbolCodeByKeyWord(this.currentWord))}if(null!==/[\d.]/.exec(this.char)){if(this.currentWord+=this.char,this.char=this.fileIO.nextCh(),".."===this.currentWord)return this.symbol=n.twoPoints,this.getSymbol(this.symbol);if("."===this.currentWord&&"."===this.char)return this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(n.twoPoints);if("."===this.currentWord&&null===/\d/.exec(this.char))return this.symbol=n.point,this.getSymbol(this.symbol);{let e="."===this.currentWord,t=null;for(;null!==/[\d.]/.exec(this.char);){if("."===this.char){if(e){if("."===t)return this.wordBuffer=".",new c(this.token,n.intC,this.currentWord);break}e=!0}t=this.char,this.currentWord+=this.char,this.char=this.fileIO.nextCh()}return e?new h(this.token,n.floatC,this.currentWord):new c(this.token,n.intC,this.currentWord)}}switch(this.currentWord+=this.char,this.char){case":":return this.char=this.fileIO.nextCh(),"="===this.char?(this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(n.assign)):this.getSymbol(n.colon);case"<":switch(this.char=this.fileIO.nextCh(),this.char){case"=":return this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(n.laterEqual);case">":return this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(n.laterGreater);default:return this.getSymbol(n.later)}case">":return this.char=this.fileIO.nextCh(),"="===this.char?(this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(n.greaterEqual)):this.getSymbol(n.greater);case"-":return this.char=this.fileIO.nextCh(),this.getSymbol(n.minus);case"+":return this.char=this.fileIO.nextCh(),this.getSymbol(n.plus);case"*":return this.char=this.fileIO.nextCh(),this.getSymbol(n.star);case"/":return this.char=this.fileIO.nextCh(),this.getSymbol(n.slash);case"=":return this.char=this.fileIO.nextCh(),this.getSymbol(n.equal);case",":return this.char=this.fileIO.nextCh(),this.getSymbol(n.comma);case";":return this.char=this.fileIO.nextCh(),this.getSymbol(n.semicolon);case"^":return this.char=this.fileIO.nextCh(),this.getSymbol(n.arrow);case"(":this.char=this.fileIO.nextCh();var e=null,t=this.currentWord;if("*"===this.char){do{e=t,t=this.fileIO.nextCh()}while("*"!==e||")"!==t);return this.char=this.fileIO.nextCh(),this.skipWhiteSpaces(),this.scanSymbol()}return this.getSymbol(n.leftPar);case")":return this.char=this.fileIO.nextCh(),this.getSymbol(n.rightPar);case"[":return this.char=this.fileIO.nextCh(),this.getSymbol(n.lBracket);case"]":return this.char=this.fileIO.nextCh(),this.getSymbol(n.rBracket);case"{":return this.char=this.fileIO.nextCh(),this.getSymbol(n.flPar);case"}":return this.char=this.fileIO.nextCh(),this.getSymbol(n.frPar);case"<":return this.char=this.fileIO.nextCh(),this.getSymbol(n.later);case">":return this.char=this.fileIO.nextCh(),this.getSymbol(n.greater);case"@":return this.char=this.fileIO.nextCh(),this.getSymbol(n.at);case"'":do{this.char=this.fileIO.nextCh(),this.currentWord+=this.char}while("'"!==this.char);return this.char=this.fileIO.nextCh(),3===this.currentWord.length?new u(this.token,n.charC,this.currentWord):new y(this.token,n.stringC,this.currentWord)}return this.addForbiddenCharacterError(this.char),this.char=this.fileIO.nextCh(),null}getSymbol(e){return e===n.trueSy||e===n.falseSy?new d(this.token,n.booleanC,this.currentWord):new o(this.token,e,this.currentWord)}skipWhiteSpaces(){for(var e=/\s/;null!==e.exec(this.char);)this.char=this.fileIO.nextCh()}addForbiddenCharacterError(e){this.fileIO.addError(this.errorsCodes.forbiddenCharacter,` '${e}'`,this.token)}}class m{constructor(){this.symbolCodeMapper=new Map([[n.star,"*"],[n.slash,"/"],[n.equal,"="],[n.comma,","],[n.semicolon,";"],[n.colon,":"],[n.point,"."],[n.arrow,"^"],[n.leftPar,"("],[n.rightPar,")"],[n.lBracket,"["],[n.rBracket,"]"],[n.flPar,"{"],[n.frPar,"}"],[n.later,"<"],[n.greater,">"],[n.laterEqual,"<="],[n.greaterEqual,">="],[n.laterGreater,"<>"],[n.plus,"+ "],[n.minus,"- "],[n.lComment,"(*"],[n.rComment,"*)"],[n.assign,":="],[n.twoPoints,".."],[n.ident,"Identifier"],[n.floatC,"Float Constant"],[n.intC,"Integer Constant"],[n.charC,"Character Constant"],[n.caseSy,"case"],[n.elseSy,"else"],[n.fileSy,"file"],[n.gotoSy,"goto"],[n.thenSy,"then"],[n.untilSy,"until"],[n.doSy,"do"],[n.withSy,"with"],[n.ifSy,"if"],[n.ofSy,"of"],[n.orSy,"or"],[n.inSy,"in"],[n.toSy,"to"],[n.endSy,"end"],[n.varSy,"var"],[n.divSy,"div"],[n.andSy,"and"],[n.notSy,"not"],[n.forSy,"for"],[n.modSy,"mod"],[n.nilSy,"nil"],[n.setSy,"set"],[n.typeSy,"type"],[n.realSy,"real"],[n.charSy,"char"],[n.beginSy,"begin"],[n.whileSy,"while"],[n.arraySy,"array"],[n.constSy,"const"],[n.labelSy,"label"],[n.downtoSy,"downto"],[n.stringSy,"string"],[n.packedSy,"packed"],[n.recordSy,"record"],[n.repeatSy,"repeat"],[n.integerSy,"integer"],[n.programSy,"program"],[n.functionSy,"function"],[n.procedureSy,"procedure"]])}getSymbolTextByCode(e){return this.symbolCodeMapper.has(e)?this.symbolCodeMapper.get(e):null}}class f{constructor(e){this.symbol=e}}class b extends f{constructor(e,t,s){super(e),this.destination=t,this.sourceExpression=s}}class g extends f{constructor(e,t,s){super(e),this.identifier=t,this.indexRing=s}}class S extends f{constructor(e,t,s=null){super(e),this.indexExpression=t,this.indexRing=s,this.evaluatedIndexExpression=null}appendIndexRing(e){null===this.indexRing?this.indexRing=e:this.indexRing.appendIndexRing(e)}}class x extends f{constructor(e,t){super(e),this.pointer=t}}class w extends f{constructor(e,t){super(e),this.identifier=t}}class C extends f{constructor(e,t,s){super(e),this.baseExpression=t,this.subField=s}}class v extends f{constructor(e,t,s){super(e),this.left=t,this.right=s}}class I extends v{constructor(e,t,s){super(e,t,s)}}class E extends v{constructor(e,t,s){super(e,t,s)}}class P extends v{constructor(e,t,s){super(e,t,s)}}class O extends v{constructor(e,t,s){super(e,t,s)}}class L extends f{constructor(e){super(e);let t=null;switch(e.symbolCode){case n.intC:t=0;break;case n.floatC:t=1;break;case n.charC:t=2;break;case n.stringC:t=7;break;case n.booleanC:t=6;break;case n.ident:t=5}this.typeId=t}}class T extends f{constructor(e){super(e)}}class V extends f{constructor(e,t,s=[]){super(e),this.identifierBranch=t,this.parameters=s}}class k extends f{constructor(e,t){super(e),this.typeId=t}}class N extends k{constructor(e,t){super(e,t)}toString(){switch(this.typeId){case 6:return"boolean";case 2:return"char";case 0:return"integer";case 1:return"real";case 7:return"string"}}}class B extends k{constructor(e,t){super(e,4);let s=this;this.typesList={},t.forEach((e=>{let t=e.type;e.identifiers.forEach((e=>{let i=e.symbol.value;s.typesList[i]=t}))}))}toString(){let e=[],t=null;for(t in this.typesList)e.push(`${t}: `+this.typesList[t].toString());return`record(${e.join(", ")})`}}class R extends k{constructor(e){super(e,9)}toString(){return this.symbol.stringValue}}class M extends f{constructor(e,t,s,i){super(e),this.identifiers=t,this.variablesType=s,this.initialValue=i}}class D extends f{constructor(e,t,s,i=null){super(e),this.identifier=t,this.value=s,this.type=i}}class A extends f{constructor(e,t,s){super(e),this.identifier=t,this.type=s}}class W extends f{constructor(e){super(e),this.sentences=[]}}class $ extends f{constructor(e,t,s,i){super(e),this.condition=t,this.left=s,this.right=i}}class j extends v{constructor(e,t,s){super(e,t,s)}}class q extends v{constructor(e,t,s){super(e,t,s)}}class F extends v{constructor(e,t,s){super(e,t,s)}}class z extends v{constructor(e,t,s){super(e,t,s)}}class U extends f{constructor(e,t){super(e),this.value=t}}class G extends f{constructor(e,t){super(e),this.value=t}}class K extends f{constructor(e){super(e),this.name=null,this.vars=[],this.procedures={},this.functions={},this.sentences=[],this.types=[]}getType(){return this.type}}class _ extends K{constructor(e){super(e)}}class X extends K{constructor(e,t=null){super(e),this.type=t}}class H extends K{constructor(e,t=null){super(e),this.type=t}}class J extends v{constructor(e,t,s){super(e,t,s)}}class Q extends v{constructor(e,t,s){super(e,t,s)}}class Y extends v{constructor(e,t,s){super(e,t,s)}}class Z extends v{constructor(e,t,s){super(e,t,s)}}class ee extends v{constructor(e,t,s){super(e,t,s)}}class te extends v{constructor(e,t,s){super(e,t,s)}}class se extends v{constructor(e,t,s){super(e,t,s)}}class ie extends k{constructor(e,t=null,s=null){super(e,11),this.returnType=s,this.signature=t}toString(){let e=[];return this.signature.length>0&&this.signature.forEach((function(t,s){let i=t.identifiers.map((e=>e.symbol.stringValue)).join(", ");e[s]=i+": "+t.type.toString()})),`function(${e.join("; ")}): ${this.returnType.toString()}`}}class re extends k{constructor(e,t,s){super(e,10),this.identifiers=s,this.signature=t}toString(){let e=[];return this.signature.length>0&&this.signature.forEach((function(t,s){let i=t.identifiers.map((e=>e.symbol.stringValue)).join(", ");e[s]=i+": "+t.type.toString()})),`procedure(${e.join("; ")})`}}class ne extends f{constructor(e,t=!1,s=null,i=[]){super(e),this.type=s,this.identifiers=i,this.byReference=t}}class ae extends k{constructor(e){super(e,5),this.items=[]}toString(){return`enum(${this.items.map((e=>e.symbol.stringValue)).join(", ")})`}}class le extends k{constructor(e,t=null,s=null,i=null){super(e,3),this.typeOfElements=i,this.leftIndex=t,this.rightIndex=s}toString(){return`array [${this.leftIndex.symbol.value}..${this.rightIndex.symbol.value}] of ${this.typeOfElements}`}}class oe extends k{constructor(e,t){super(e,8),this.type=t}toString(){return`^${this.type}`}}class he extends f{constructor(e,t,s){super(e),this.condition=t,this.body=s}}class ce extends f{constructor(e,t,s){super(e),this.condition=t,this.body=s}}class ue extends f{constructor(e,t=null,s=[],i=null){super(e),this.switchExpression=t,this.cases=s,this.elseSentence=i}}class ye extends f{constructor(e,t=[],s=null){super(e),this.constants=t,this.operator=s}}class de extends f{constructor(e,t,s,i,r,n){super(e),this.variableIdentifier=t,this.initExpression=s,this.lastExpression=i,this.countDown=r,this.body=n}}class pe extends f{constructor(e){super(e)}}class me{constructor(e){this.lexicalAnalyzer=e,this.symbolsDescription=new m,this.symbol=null,this.tree=null,this.trees=[],this.treesCounter=0,this.errorDetected=!1}nextSym(){this.symbol=this.lexicalAnalyzer.nextSym()}anotherSymbolExpected(e){let s=`'${this.symbolsDescription.getSymbolTextByCode(e)}' expected but '${this.symbol.stringValue}' found.`;this.lexicalAnalyzer.fileIO.addError(t.inadmissibleSymbol,s,this.symbol.textPosition)}accept(e){if(null===this.symbol)return null;this.symbol.symbolCode===e?this.nextSym():(this.errorDetected=!0,this.anotherSymbolExpected(e),this.goToEnd())}analyze(){return this.tree=new _(this.symbol),this.trees[this.treesCounter]=this.tree,this.nextSym(),this.scanProgramme(),this.tree}scanProgramme(){this.symbol.symbolCode===n.programSy&&(this.nextSym(),this.tree.name=this.symbol.stringValue,this.accept(n.ident),this.accept(n.semicolon)),this.scanBlock(),this.accept(n.point)}scanBlock(){this.labelPart(),this.constPart(),this.typePart(),this.varPart(),this.procFuncPart(),this.statementPart()}labelPart(){}constPart(){if(this.symbol.symbolCode===n.constSy){this.tree.constants=[],this.nextSym();do{let e=this.symbol;this.accept(n.ident);let t=null;this.symbol.symbolCode===n.colon&&(this.nextSym(),t=this.scanType());let s=this.symbol;this.accept(n.equal);let i=this.scanConstant(),r=new D(s,new T(e),i,t);this.tree.constants.push(r),this.accept(n.semicolon)}while(this.symbol.symbolCode===n.ident)}}typePart(){if(this.tree.types=[],this.symbol.symbolCode===n.typeSy){this.nextSym();do{let e=this.symbol;this.accept(n.ident);let t=this.symbol;this.accept(n.equal);let s=this.scanType(),i=new A(t,new T(e),s);this.tree.types.push(i),this.accept(n.semicolon)}while(this.symbol.symbolCode===n.ident)}}varPart(){if(this.symbol.symbolCode===n.varSy){this.nextSym();do{this.tree.vars.push(this.scanVarDeclaration()),this.accept(n.semicolon)}while(!this.errorDetected&&this.symbol.symbolCode===n.ident)}}scanVarDeclaration(){let e=[],t=null,s=!1;do{t=new T(this.symbol),this.accept(n.ident),e.push(t),s=this.symbol.symbolCode===n.comma,s&&this.nextSym()}while(!this.errorDetected&&s);let i=this.symbol;this.accept(n.colon);let r=this.scanType(),a=null;return this.symbol.symbolCode===n.equal&&(this.nextSym(),a=this.scanConstant()),new M(i,e,r,a)}scanListArrayType(e){let t=null,s=this.scanConstant();this.accept(n.twoPoints);let i=this.scanConstant();return this.symbol.symbolCode===n.comma?(e=this.symbol,this.nextSym(),t=this.scanListArrayType()):(this.accept(n.rBracket),this.accept(n.ofSy),t=this.scanType()),new le(e,s,i,t)}scanType(){let e=null;if(this.symbol.symbolCode===n.arrow){e=this.symbol,this.nextSym();let t=this.scanType();return new oe(e,t)}if(this.symbol.symbolCode===n.integerSy||this.symbol.symbolCode===n.booleanSy||this.symbol.symbolCode===n.realSy||this.symbol.symbolCode===n.stringSy||this.symbol.symbolCode===n.charSy){e=this.symbol,this.nextSym();let t=null;switch(e.symbolCode){case n.charSy:t=2;break;case n.integerSy:t=0;break;case n.stringSy:t=7;break;case n.realSy:t=1;break;case n.booleanSy:t=6}return new N(e,t)}if(this.symbol.symbolCode===n.ident)return e=this.symbol,this.nextSym(),new R(e);if(this.symbol.symbolCode===n.arraySy)return e=this.symbol,this.nextSym(),this.accept(n.lBracket),this.scanListArrayType(e);if(this.symbol.symbolCode===n.leftPar){let e=new ae(this.symbol),t=null;do{this.nextSym(),t=new T(this.symbol),e.items.push(t),this.accept(n.ident)}while(this.symbol.symbolCode===n.comma);return this.accept(n.rightPar),e}if(this.symbol.symbolCode===n.functionSy){let e=new ie(this.symbol);return this.nextSym(),e.signature=this.scanParametersList(),this.accept(n.colon),e.returnType=this.scanType(),e}if(this.symbol.symbolCode===n.procedureSy){let e=new re(this.symbol);return this.nextSym(),e.signature=this.scanParametersList(),e}if(this.symbol.symbolCode===n.recordSy){let e=this.symbol;this.nextSym();let t=[];do{if(t.length>0&&(this.symbol.symbolCode===n.semicolon&&this.nextSym(),this.symbol.symbolCode===n.endSy))break;let e=new ne(this.symbol),s=[];do{s.length>0&&this.symbol.symbolCode===n.comma&&this.nextSym(),s.push(new T(this.symbol)),this.accept(n.ident)}while(this.symbol.symbolCode===n.comma);this.accept(n.colon),e.identifiers=s,e.type=this.scanType(),t.push(e)}while(this.symbol.symbolCode===n.semicolon);return this.accept(n.endSy),new B(e,t)}}procFuncPart(){for(;this.symbol.symbolCode===n.procedureSy||this.symbol.symbolCode===n.functionSy;)switch(this.symbol.symbolCode){case n.procedureSy:this.scanProcedure();break;case n.functionSy:this.scanFunction()}}scanProcedure(){let e=this.symbol;this.accept(n.procedureSy);let t=new T(this.symbol);this.accept(n.ident);let s=new re(e);s.signature=this.scanParametersList(),this.treesCounter++,this.tree=new X(e,s),this.trees[this.treesCounter]=this.tree,this.tree.name=t;let i=this.tree.name.symbol.value.toLowerCase();this.tree.signature=this.scanParametersList(),this.accept(n.semicolon),this.scanBlock(),this.accept(n.semicolon),this.trees[this.treesCounter-1].procedures[i]=this.tree,this.treesCounter--,this.tree=this.trees[this.treesCounter]}scanFunction(){let e=this.symbol;this.accept(n.functionSy);let t=new T(this.symbol);this.accept(n.ident);let s=new ie(e);s.signature=this.scanParametersList(),this.accept(n.colon),s.returnType=this.scanType(),this.treesCounter++,this.tree=new H(e,s),this.trees[this.treesCounter]=this.tree,this.tree.name=t;let i=this.tree.name.symbol.value.toLowerCase();this.accept(n.semicolon),this.scanBlock(),this.accept(n.semicolon),this.trees[this.treesCounter-1].functions[i]=this.tree,this.treesCounter--,this.tree=this.trees[this.treesCounter]}scanParametersList(){let e=[];if(this.symbol.symbolCode===n.leftPar){if(this.nextSym(),this.symbol.symbolCode!==n.rightPar)do{e.length>0&&this.symbol.symbolCode===n.semicolon&&this.nextSym();let t=!1;this.symbol.symbolCode===n.varSy&&(t=!0,this.nextSym());let s=new ne(this.symbol,t),i=[];do{i.length>0&&this.symbol.symbolCode===n.comma&&this.nextSym(),i.push(new T(this.symbol)),this.accept(n.ident)}while(this.symbol.symbolCode===n.comma);this.accept(n.colon),s.identifiers=i,s.type=this.scanType(),e.push(s)}while(this.symbol.symbolCode===n.semicolon);this.accept(n.rightPar)}return e}statementPart(){for(this.accept(n.beginSy);null!==this.symbol&&this.symbol.symbolCode!==n.endSy;){let e=this.scanSentence();this.tree.sentences.push(e),this.symbol.symbolCode!==n.endSy&&this.accept(n.semicolon)}this.accept(n.endSy)}goToEnd(){do{this.nextSym()}while(null!==this.symbol)}scanSentence(){if(this.symbol.symbolCode===n.ident){let e=this.scanIdentifierBranch();if(this.symbol.symbolCode===n.assign){let t=this.symbol;return this.nextSym(),new b(t,e,this.scanExpression())}return e}if(this.symbol.symbolCode===n.beginSy)return this.scanCompoundOperator();if(this.symbol.symbolCode===n.ifSy){let e=this.symbol;this.nextSym();let t=this.scanExpression();this.accept(n.thenSy);let s=this.scanSentence(),i=null;return this.symbol.symbolCode===n.elseSy&&(this.nextSym(),i=this.scanSentence()),new $(e,t,s,i)}if(this.symbol.symbolCode===n.whileSy){let e=this.symbol;this.nextSym();let t=this.scanExpression();this.accept(n.doSy);let s=this.scanSentence();return new he(e,t,s)}if(this.symbol.symbolCode===n.repeatSy){let e=this.symbol,t=new W(e);for(this.nextSym();null!==this.symbol&&this.symbol.symbolCode!==n.untilSy;){let e=this.scanSentence();t.sentences.push(e),this.accept(n.semicolon)}this.accept(n.untilSy);let s=t,i=this.scanExpression();return new ce(e,i,s)}if(this.symbol.symbolCode===n.forSy){let e=this.symbol;this.nextSym();let s=this.symbol;this.accept(n.ident);let i=new T(s);this.symbol,this.accept(n.assign);let r=this.scanSimpleExpression(),a=!1;switch(this.symbol.symbolCode){case n.downtoSy:a=!0;break;case n.toSy:a=!1;break;default:let e=`Symbols 'to' or 'downto' expected but '${this.symbol.stringValue}' found.`;this.addError(t.inadmissibleSymbol,e,this.symbol)}this.nextSym();let l=this.scanSimpleExpression();this.accept(n.doSy);let o=this.scanSentence();return new de(e,i,r,l,a,o)}if(this.symbol.symbolCode===n.breakSy){let e=this.symbol;return this.nextSym(),new pe(e)}if(this.symbol.symbolCode===n.caseSy){let e=this.symbol;this.nextSym();let t=this.scanExpression();this.accept(n.ofSy);let s=new ue(e,t);do{let e=new ye(this.symbol),t=null;do{e.constants.push(this.scanConstant()),t=this.symbol.symbolCode===n.comma,t&&this.nextSym()}while(t);this.accept(n.colon),e.operator=this.scanSentence(),s.cases.push(e),this.symbol.symbolCode!==n.endSy&&this.symbol.symbolCode!==n.elseSy?this.accept(n.semicolon):this.symbol.symbolCode===n.semicolon&&this.nextSym()}while(this.symbol.symbolCode!==n.endSy&&this.symbol.symbolCode!==n.elseSy);return this.symbol.symbolCode===n.elseSy&&(this.nextSym(),s.elseSentence=this.scanSentence(),this.symbol.symbolCode===n.semicolon&&this.accept(n.semicolon)),this.accept(n.endSy),s}}scanCompoundOperator(){let e=new W(this.symbol);for(this.accept(n.beginSy);null!==this.symbol&&this.symbol.symbolCode!==n.endSy;){let t=this.scanSentence();e.sentences.push(t),this.symbol.symbolCode!==n.endSy&&this.accept(n.semicolon)}return this.accept(n.endSy),e}scanIndicesBrackets(e){this.accept(n.lBracket);let t=new S(e,this.scanExpression());for(;this.symbol.symbolCode===n.comma;){let e=this.symbol;this.nextSym();let s=new S(e,this.scanExpression());t.appendIndexRing(s)}return this.accept(n.rBracket),t}scanIndices(e){this.symbol;let t=this.scanIndicesBrackets(this.symbol);for(;this.symbol.symbolCode===n.lBracket;){let e=this.symbol,s=this.scanIndicesBrackets(e);t.appendIndexRing(s)}return t}scanIdentifierBranch(e=null){let t=null;if(null===e){let e=this.symbol;this.nextSym(),t=new T(e)}else t=e;switch(this.symbol.symbolCode){case n.leftPar:let e=this.symbol;this.nextSym();let s=this.scanParameters();return this.scanIdentifierBranch(new V(e,t,s));case n.lBracket:let i=this.symbol;return this.scanIdentifierBranch(new g(i,t,this.scanIndices()));case n.point:let r=this.symbol;this.nextSym();let a=new T(this.symbol);return this.accept(n.ident),this.scanIdentifierBranch(new C(r,t,a));case n.arrow:let l=this.symbol;return this.nextSym(),this.scanIdentifierBranch(new x(l,t));default:return t}}scanExpression(){if(this.symbol.symbolCode===n.at){let e=this.symbol;this.nextSym();let t=this.symbol;this.accept(n.ident);let s=new T(t),i=this.scanIdentifierBranch(s);return new w(e,i)}let e=this.scanSimpleExpression();switch(this.symbol.symbolCode){case n.equal:return this.nextSym(),new Q(this.symbol,e,this.scanSimpleExpression());case n.later:return this.nextSym(),new Z(this.symbol,e,this.scanSimpleExpression());case n.greater:return this.nextSym(),new ee(this.symbol,e,this.scanSimpleExpression());case n.laterGreater:return this.nextSym(),new Y(this.symbol,e,this.scanSimpleExpression());case n.laterEqual:return this.nextSym(),new se(this.symbol,e,this.scanSimpleExpression());case n.greaterEqual:return this.nextSym(),new te(this.symbol,e,this.scanSimpleExpression());case n.inSy:return this.nextSym(),new J(this.symbol,e,this.scanSimpleExpression());default:return e}}scanSimpleExpression(){let e=!1,t=!1,s=null,i=null;switch(this.symbol.symbolCode){case n.minus:e=!0;case n.plus:i=this.symbol,this.nextSym();break;case n.notSy:t=!0,i=this.symbol,this.nextSym()}for(s=this.scanTerm(),e&&(s=new U(i,s)),t&&(s=new G(i,s));null!==this.symbol&&(this.symbol.symbolCode===n.plus||this.symbol.symbolCode===n.minus||this.symbol.symbolCode===n.orSy);)switch(this.symbol.symbolCode){case n.plus:this.nextSym(),s=new P(this.symbol,s,this.scanTerm());break;case n.minus:this.nextSym(),s=new O(this.symbol,s,this.scanTerm());break;case n.orSy:this.nextSym(),s=new z(this.symbol,s,this.scanTerm())}return s}scanTerm(){let e=this.scanMultiplier(),t=null;for(;[n.star,n.slash,n.divSy,n.modSy,n.andSy].includes(this.symbol.symbolCode);)switch(t=this.symbol.symbolCode,this.nextSym(),t){case n.star:e=new I(this.symbol,e,this.scanMultiplier());break;case n.slash:e=new E(this.symbol,e,this.scanMultiplier());break;case n.divSy:e=new j(this.symbol,e,this.scanMultiplier());break;case n.modSy:e=new q(this.symbol,e,this.scanMultiplier());break;case n.andSy:e=new F(this.symbol,e,this.scanMultiplier())}return e}scanMultiplier(){if(this.symbol.symbolCode===n.ident)return this.scanIdentifierBranch();if(this.symbol.symbolCode===n.floatC||this.symbol.symbolCode===n.intC||this.symbol.symbolCode===n.stringC||this.symbol.symbolCode===n.charC||this.symbol.symbolCode===n.booleanC)return this.scanUnsignedConstant();if(this.symbol.symbolCode===n.leftPar){this.nextSym();let e=this.scanExpression();return this.accept(n.rightPar),e}}scanParameters(){let e=[];if(this.symbol.symbolCode!==n.rightPar)do{e.length>0&&this.symbol.symbolCode===n.comma&&this.nextSym(),e.push(this.scanExpression())}while(this.symbol.symbolCode===n.comma);return this.accept(n.rightPar),e}scanUnsignedConstant(){let e=null;switch(this.symbol.symbolCode){case n.floatC:case n.intC:case n.charC:case n.stringC:case n.booleanC:e=new L(this.symbol),this.nextSym()}return e}scanConstant(){let e=!1,t=null;switch(this.symbol.symbolCode){case n.minus:t=this.symbol,this.nextSym(),e=!0;break;case n.plus:t=this.symbol,this.nextSym()}let s=null;switch(this.symbol.symbolCode){case n.floatC:case n.intC:case n.charC:case n.stringC:case n.booleanC:case n.ident:s=new L(this.symbol),this.nextSym()}return e&&(s=new U(t,s)),s}addError(e,t=null,s){this.lexicalAnalyzer.fileIO.addError(e,t,s.textPosition)}}class fe{constructor(){this.type=null,this.typeId=null}getType(){return this.type?this.type:this.typeId}}class be extends fe{constructor(e,t){super(),this.value=e,this.typeId=t,this.type=!1}clone(){return new be(this.value,this.typeId)}}class ge extends fe{constructor(e,t){super(),this.value=e,this.typeId=5,this.type=t}getIndex(){let e=this.type.items.length;for(let t=0;t<e;t++)if(this.type.items[t].symbol.stringValue.toLowerCase()===this.value.symbol.stringValue.toLowerCase())return t}clone(){return new ge(this.value,this.type)}}class Se extends fe{constructor(e,t){super(),this.typeId=3,this.type=e,this.scope=t,this.items=[],this.leftIntegerIndex=0,this.rightIntegerIndex=null,this.offset=null,this.arrayLength=null}setValue(e,s,i){let r=e.evaluatedIndexExpression,n=this.scope.getIntegerValueOfIndexVariable(r)+this.offset;n<0||n>=this.arrayLength?this.scope.addError(t.indexIsOutOfRange,"",e):void 0===this.items[n]&&(this.items[n]=this.scope.createVariable(this.type.typeOfElements,i));let a=this.items[n];null===e.indexRing?a.value=i.value:e.indexRing instanceof S&&a.setValue(e.indexRing,s,i)}getByIndexRing(e){let s=e.evaluatedIndexExpression,i=this.scope.getIntegerValueOfIndexVariable(s)+this.offset;if(!(i<0||i>=this.arrayLength)){void 0===this.items[i]&&(this.items[i]=this.scope.createDefaultVariable(this.type.typeOfElements));let t=this.items[i];return e.indexRing instanceof S?t.getByIndexRing(e.indexRing):t}this.scope.addError(t.indexIsOutOfRange,"",e)}clone(){let e=new Se(this.type,this.scope);return e.rightIntegerIndex=this.rightIntegerIndex,e.offset=this.offset,e.arrayLength=this.arrayLength,e.parentArray=this.parentArray,this.items.forEach(((t,s)=>{e.items[s]=t.clone()})),e}}class xe extends fe{constructor(e,t){super(),this.typeId=8,this.type=new oe(null,t),this.variable=e}clone(){return new xe(this.variable,this.type)}}class we extends fe{constructor(e,t){super(),this.typeId=4,this.type=e,this.items={},this.scope=t}setPropertyByPropertyIdentifier(e,s){let i=e.symbol.value;this.type.typesList.hasOwnProperty(i)?this.items[i]=s:this.scope.addError(t.indexIsOutOfRange,`Property ${i} is not defined.`,e)}getByPropertyIdentifier(e){let s=e.symbol.value;if(this.type.typesList.hasOwnProperty(s)){if(!this.items.hasOwnProperty(s)){let e=this.type.typesList[s];this.items[s]=this.scope.createDefaultVariable(e)}return this.items[s]}this.scope.addError(t.indexIsOutOfRange,`Property ${s} is not defined.`,e)}clone(){let e=new we(this.type,this.scope),t=null;for(t in this.items)e.items[t]=this.items[t].clone(this.scope);return e}}class Ce extends fe{constructor(e,t=null){super(),this.type=e,this.typeId=e.typeId,this.value=t}clone(){return new Ce(this.type,this.value)}}class ve extends K{constructor(){super(),this.vars=[],this.signature=[],this.sentences=[],this.name=null}async innerRun(){}}class Ie extends ve{constructor(){super(),this.returnType=null}}class Ee{constructor(e=null){this.parentScope=e,this.items={},this.constants={},this.enumsItems={},this.types={},this.cycleDepth=0,this.errorsDescription=new s,this.parametersList=null,this.callableName=null}addVariable(e,s,i=null,r=null){let n=e.symbol.value.toLowerCase();this.constants.hasOwnProperty(n)?this.addError(t.identifierAlreadyUsed,`Constant '${n}' declared.`,null===r?s:r):this.items.hasOwnProperty(n)?this.addError(t.identifierAlreadyUsed,`Variable '${n}' already declared.`,null===r?s:r):this.items[n]=this.createVariable(s,i)}createVariable(e,t=null){let s=this.resolveNamedType(e);if(s instanceof N){if(null===t)switch(s.typeId){case 0:case 1:t=0;break;case 2:t=String.fromCharCode(0);break;case 7:t=""}return new be(t,s.typeId)}if(s instanceof ae)return null===t&&(t=s.items[0]),new ge(t,s);if(s instanceof le)return this.createArrayVariable(t,e);if(s instanceof oe){let s=this.resolveNamedType(e.type);return new xe(t,s)}return s instanceof ie||s instanceof re||s instanceof B?this.createDefaultVariable(s):void 0}getIntegerValueOfIndexConstant(e){if(e instanceof L)switch(e.typeId){case 0:return e.symbol.value;case 2:return e.symbol.value.charCodeAt(0);case 5:return this.getEnumElement(e).getIndex()}else if(e instanceof U){let s=e.value;if(s instanceof L&&0===s.typeId)return-s.symbol.value;this.addError(t.typesMismatch,"Integer constant expected after unary minus.",s)}}getIntegerValueOfIndexVariable(e){switch(e.typeId){case 0:return e.value;case 2:return e.value.charCodeAt(0);case 5:return this.getEnumElement(e.value).getIndex()}}createArrayVariable(e,t){let s=this.resolveNamedType(t),i=new Se(s,this);i.parentArray=e;let r=s.leftIndex,n=s.rightIndex,a=this.getIntegerValueOfIndexConstant(r),l=this.getIntegerValueOfIndexConstant(n),o=Math.min(a,l),h=Math.max(a,l),c=-o;return i.offset=c,i.arrayLength=h-o+1,i.leftIntegerIndex=0,i.rightIntegerIndex=h,i.rightIntegerIndex=h,i}resolveNamedType(e){if(e instanceof R){let t=e.symbol.stringValue,s=this.getType(t);return this.resolveNamedType(s)}return e}setValue(e,s,i,r=null){let n=null;e instanceof T?n=e:e instanceof g&&(n=e.identifier);let a=n.symbol.stringValue.toLowerCase();if(this.items.hasOwnProperty(a)){let n=this.items[a];if(n instanceof be||n instanceof ge||n instanceof Ce)this.sameType(n.getType(),s)?this.items[a].value=i:this.addTypeMismatchError(s,n,r);else if(n instanceof Se){let t=null;if(e instanceof T)t=n.type,this.sameType(s,t)?this.setVariableObject(e,i.clone()):this.addTypeMismatchError(s,n,r);else if(e instanceof g){let a=e.indexRing;t=this.getDestinationType(n.type,a),this.sameType(s,t)?(i instanceof Se&&(i=i.clone()),n.setValue(a,s,i)):this.addTypeMismatchError(s,n,r)}}else n instanceof xe&&s instanceof oe?this.sameType(n.type,s)?n.variable=i.variable:this.addTypeMismatchError(s,n,r):this.addError(t.typesMismatch,null,r)}else this.parentScope?this.parentScope.setValue(e,s,i,r):this.addError(t.variableNotDeclared,`Variable '${a}' not declared.`,r)}setVariableValue(e,s,i=null){let r=s.getType(),n=null;e instanceof T?n=e:e instanceof g&&(n=e.identifier);let a=n.symbol.stringValue.toLowerCase();if(this.items.hasOwnProperty(a)){let n=this.items[a];if((n instanceof be||n instanceof ge||n instanceof Ce||n instanceof Se&&e instanceof T||n instanceof we)&&(this.sameType(n.getType(),r)||this.addTypeMismatchError(r,n,i)),n instanceof be||n instanceof ge||n instanceof Ce)this.items[a].value=s.value;else if(n instanceof Se){if(e instanceof T)this.setVariableObject(e,s.clone());else if(e instanceof g){let t=e.indexRing,a=this.getDestinationType(n.type,t);this.sameType(r,a)?(s=s.clone(),n.setValue(t,r,s)):this.addTypeMismatchError(r,n,i)}}else n instanceof we?this.setVariableObject(e,s.clone()):n instanceof xe&&r instanceof oe?this.sameType(n.type,r)?n.variable=s.variable:this.addTypeMismatchError(r,n,i):this.addError(t.typesMismatch,null,i)}else this.parentScope?this.parentScope.setVariableValue(e,s,i):this.addError(t.variableNotDeclared,`Variable '${a}' not declared.`,i)}setRecordVariableProperty(e,s,i){let r=i.getType(),n=e.getByPropertyIdentifier(s);this.sameType(n.getType(),r)||this.addTypeMismatchError(r,n,s),n instanceof be||n instanceof ge||n instanceof Ce?n.value=i.value:n instanceof Se||n instanceof we?e.setPropertyByPropertyIdentifier(s,i.clone()):this.addError(t.typesMismatch,null,s)}setVariableObject(e,t){let s=e.symbol.stringValue.toLowerCase();this.items[s]=t}addTypeMismatchError(e,s,i){let r=Number.isInteger(e)?new N(null,e):e,n=!1===s.type?new N(null,s.typeId):s.type;this.addError(t.typesMismatch,`Type ${n} expected but ${r} found.`,i)}getDestinationType(e,t){return e instanceof le&&t&&null!==t?this.getDestinationType(e.typeOfElements,t.indexRing):e}getVariable(e){let t=e.toLowerCase();return this.items.hasOwnProperty(t)?this.items[t]:this.parentScope?this.parentScope.getVariable(e):null}getElementByIdentifier(e){if(e instanceof T){let t=e.symbol.value.toLowerCase();return this.constants.hasOwnProperty(t)?this.constants[t]:this.items.hasOwnProperty(t)?this.items[t]:this.enumsItems.hasOwnProperty(t)?this.enumsItems[t]:this.parentScope?this.parentScope.getElementByIdentifier(e):null}}getEnumElement(e){let s=e.symbol.value.toLowerCase();if(this.enumsItems.hasOwnProperty(s))return this.enumsItems[s];this.addError(t.variableNotDeclared,`Enum element '${s}' not declared.`,e)}sameType(e,t){if(Number.isInteger(e)&&Number.isInteger(t))return e===t;if(Number.isInteger(e)&&!Number.isInteger(t))return e===t.typeId;if(Number.isInteger(t)&&!Number.isInteger(e))return e.typeId===t;if(e.constructor!==t.constructor)return!1;if(e instanceof N)return e.typeId===t.typeId;if(e instanceof ae)return Object.is(e,t);if(e instanceof ie||e instanceof re){let s=this.getParametersArray(e),i=this.getParametersArray(t);return s.length===i.length&&(!(e instanceof ie)||this.sameType(e.returnType,t.returnType))}if(e instanceof le)return this.sameType(e.typeOfElements,t.typeOfElements)&&e.leftIndex.symbol.value===t.leftIndex.symbol.value&&e.rightIndex.symbol.value===t.rightIndex.symbol.value;if(e instanceof oe)return this.sameType(e.type,t.type);if(e instanceof B){let s=Object.keys(e.typesList).length===Object.keys(t.typesList).length,i=null;for(i in e.typesList){if(!s)return!1;s=s&&t.typesList.hasOwnProperty(i)&&this.sameType(e.typesList[i],t.typesList[i])}return s}}getParametersArray(e){let t=[],s=0,i=e.signature.length;for(let r=0;r<i;r++){let i=e.signature[r],n=i.identifiers.length;for(let e=0;e<n;e++)t[s++]=i}return t}addError(e,t=null,s=null){let r=this.errorsDescription.getErrorTextByCode(e)+(null===t?"":". "+t),n=null===s?null:s.symbol.textPosition;throw new i(e,r,n)}addType(e){let s=e.identifier.symbol.stringValue.toLowerCase();if(this.types.hasOwnProperty(s))this.addError(t.identifierAlreadyUsed,`Type '${s}' already declared.`,e);else if(this.types[s]=e.type,e.type instanceof ae){let s=this;e.type.items.forEach((function(i){let r=i.symbol.stringValue.toLowerCase();s.enumsItems.hasOwnProperty(r)&&s.addError(t.identifierAlreadyUsed,`Enumeration item '${r}' already declared.`,i),s.enumsItems[r]=new ge(i,e.type)}))}}getType(e,s=null){let i=e.toLowerCase();if(this.types.hasOwnProperty(i))return this.types[i];this.addError(t.typeNotDeclared,`Type '${i}' not declared.`,s)}getParametersList(){return this.parametersList}setParametersList(e){this.parametersList=e}addConstant(e){let s=e.identifier.symbol.stringValue,i=e.type,r=e.value,n=s.toLowerCase();if(this.constants.hasOwnProperty(n))this.addError(t.identifierAlreadyUsed,`Constant '${n}' already declared.`,e);else{let e=null,t=this.resolveNamedType(i);(null===t||t instanceof N)&&(e=new be(r.symbol.value,i?t.typeId:r.typeId)),this.constants[n]=e}}getVariableByReference(e){let s=e.symbol.value.toLowerCase();if(this.items.hasOwnProperty(s))return this.items[s];{let i=this.parentScope.getVariableByReference(e);if(i)return i;this.addError(t.variableNotDeclared,`Variable '${s}' not declared.`,e)}}addVariableByReference(e,t){let s=t.symbol.value.toLowerCase(),i=this.parentScope.getVariableByReference(e);this.items[s]=i}createDefaultVariable(e){if(e instanceof N){let t=null;switch(e.typeId){case 6:t=!1;break;case 2:t=String.fromCharCode(0);break;case 0:case 1:t=0;break;case 7:t=""}return new be(t,e.typeId)}if(e instanceof B)return new we(e,this);if(e instanceof re){let t=new ve;return t.signature=e.signature,t.type=e,new Ce(e,t)}if(e instanceof oe)return new xe(null,e);if(e instanceof ie){let t=new Ie;return t.signature=e.signature,t.returnType=e.returnType,t.name=new T({value:"outputValue"}),t.type=e,new Ce(e,t)}if(e instanceof le){let t=this.resolveNamedType(e),s=new Se(t,this),i=t.leftIndex,r=t.rightIndex,n=this.getIntegerValueOfIndexConstant(i),a=this.getIntegerValueOfIndexConstant(r),l=Math.min(n,a),o=Math.max(n,a),h=-l;return s.offset=h,s.arrayLength=o-l+1,s.leftIntegerIndex=0,s.rightIntegerIndex=o,s.rightIntegerIndex=o,s}}}class Pe extends f{constructor(e,t,s=[]){super(e),this.identifier=t,this.parameters=s}}class Oe{constructor(e=!1){this.byReference=e}}class Le extends ve{constructor(e,t){super(),this.outputStream=e,this.ouputNewLineSymbol=t,this.type=new re(null,new Oe,null)}async innerRun(e){let t=e.getParametersList();this.outputStream.write(t.map((function(e){return e instanceof ge?e.value.symbol.stringValue:e instanceof be?e.value:void 0})).join("")+this.ouputNewLineSymbol)}}class Te extends ve{constructor(e){super(),this.outputStream=e,this.type=new re(null,new Oe,null)}async innerRun(e){let t=e.getParametersList();this.outputStream.write(t.map((function(e){return e instanceof ge?e.value.symbol.stringValue:e instanceof be?e.value:void 0})).join(""))}}class Ve extends ve{constructor(e,t,s){super(),this.input=e,this.outputStream=t,this.ouputNewLineSymbol=s,this.type=new re(null,new Oe(!0),null),this.char=null}async innerRun(e,s){let i=e.getParametersList(),r=[],n=[];await i.forEach((async function(e){let t=await s.evaluateIdentifierBranch(e);n.push(t.typeId),r.push(t.type)}));let a=await this.getWords(n,this.ouputNewLineSymbol);await a.forEach((async function(a,l){let o=null;switch(n[l]){case 0:o=Number.parseInt(a),isNaN(o)&&e.addError(t.typesMismatch,`Integer value expected, but '${a}' found.`,i[l]);break;case 1:o=parseFloat(a),isNaN(o)&&e.addError(t.typesMismatch,`Float value expected, but '${a}' found.`,i[l]);break;case 2:case 7:o=a;break;default:let s=r[l];s||(s=new N(null,n[l])),e.addError(t.typesMismatch,`Cannot input value of this type: ${s}`,i[l])}let h=new be(o,n[l]);await s.setIdentifierBranchValue(i[l],h)})),this.outputStream.write(this.ouputNewLineSymbol)}async getWords(e){let t=[];for(let s=0;s<e.length;s++){let i=await this.getWord(e[0]);t[s]=i}return t}async getWord(e){let t="";switch(e){case 2:null===this.char?t=await this.input.getChar():(t=this.char,this.char=null);break;case 0:case 1:for(;null===this.char||null!==/[\r\n\s\t]/.exec(this.char);)await this.nextChar();do{t+=this.char,await this.nextChar()}while(null===/[\r\n\s\t]/.exec(this.char));break;default:for(null===this.char&&await this.nextChar();this.char!==this.ouputNewLineSymbol;)t+=this.char,await this.nextChar()}return t}async nextChar(){let e=await this.input.getChar();this.char=e}}class ke{constructor(e,t,s){this.items={writeln:new Le(t,s),write:new Te(t),readln:new Ve(e,t,s)}}addProcedure(e,t){this.items[e.toLowerCase()]=t}getProcedure(e){let t=e.toLowerCase();return this.items.hasOwnProperty(t)?this.items[t]:null}}class Ne extends Ie{constructor(){super(),this.returnType=new N(null,0)}async innerRun(e){let t=e.getParametersList()[0].value.charCodeAt(0);e.setValue("Ord",0,t)}}class Be extends Ie{constructor(){super(),this.returnType=new N(null,2)}async innerRun(e){let t=e.getParametersList()[0].value,s=String.fromCharCode(t);e.setValue("Chr",2,s)}}class Re{constructor(){this.items={chr:new Be,ord:new Ne}}addFunction(e,t){this.items[e.toLowerCase()]=t}getFunction(e){let t=e.toLowerCase();return this.items.hasOwnProperty(t)?this.items[t]:null}}class Me{constructor(e,t){this.tree=e,this.trees=[this.tree],this.treesCounter=0,this.scopes=[],this.currentScopeId=0,this.scopes[this.currentScopeId]=new Ee,this.proceduresStore=new ke(t.input,t.outputStream,t.ouputNewLineSymbol),this.functionsStore=new Re,this.errorsDescription=new s}getCurrentScope(){return this.scopes[this.currentScopeId]}async run(){if(this.setConstants(),this.setTypes(),this.setVariables(),this.tree.sentences)for(let e=0;e<this.tree.sentences.length;e++)await this.evaluateSentence(this.tree.sentences[e])}setVariables(){let e=this.getCurrentScope();this.tree.vars&&this.tree.vars.forEach((function(t){if(!(t instanceof M))throw"VariablesDeclaration object must be here!";t.variablesType,t.identifiers.forEach((function(s){if(!(s instanceof T))throw"Identifier must be here!";{e.addVariable(s,t.variablesType,null,s);let i=t.initialValue;i instanceof L&&e.setValue(s,i.typeId,i.symbol.value,i)}}))}))}setTypes(){let e=this.getCurrentScope();this.tree.types&&this.tree.types.forEach((function(t){if(!(t instanceof A))throw"TypeDeclaration object must be here!";e.addType(t)}))}setConstants(){let e=this.getCurrentScope();this.tree.constants&&this.tree.constants.forEach((function(t){if(!(t instanceof D))throw"ConstantDeclaration object must be here!";e.addConstant(t)}))}async evaluateIndexRing(e){return e.evaluatedIndexExpression=await this.evaluateExpression(e.indexExpression),e.indexRing instanceof S&&await this.evaluateIndexRing(e.indexRing),e}async evaluateIdentifierBranch(e){if(e instanceof T){let s=this.getCurrentScope(),i=e.symbol.value,r=null;if(r=s.getElementByIdentifier(e),null!==r)return r;let n=i.toLowerCase(),a=this.tree.procedures.hasOwnProperty(n)?this.tree.procedures[n]:this.proceduresStore.getProcedure(n);if(null!==a)return new Ce(a.type,a);let l=this.tree.functions.hasOwnProperty(n)?this.tree.functions[n]:this.functionsStore.getFunction(n);if(null!==l)return new Ce(l.type,l);this.addError(t.variableNotDeclared,`Element '${i}' not declared.`,e)}else{if(e instanceof g){this.getCurrentScope();let s=await this.evaluateIdentifierBranch(e.identifier);return s instanceof Se||this.addError(t.arrayExpected,"Array expected",e),e.indexRing=await this.evaluateIndexRing(e.indexRing),s.getByIndexRing(e.indexRing)}if(e instanceof V){let t=await this.evaluateIdentifierBranch(e.identifierBranch),s=t instanceof Ce?t.value:t,i=this.getCurrentScope(),r=new Ee(i),n=null;if(s instanceof Ie||s instanceof H){let e=s.name;n=e.symbol.value.toLowerCase(),r.addVariable(e,s.type.returnType),r.callableName=s.name.symbol.value}await this.addParametersToScope(e.parameters,s.type.signature,r),this.treesCounter++,this.tree=s,this.trees[this.treesCounter]=this.tree,this.currentScopeId++,this.scopes[this.currentScopeId]=r,await this.run(),"function"==typeof s.innerRun&&await s.innerRun(r,this);let a=null;return(s instanceof Ie||s instanceof H)&&(a=r.getVariable(n)),delete this.scopes[this.currentScopeId],this.currentScopeId--,this.treesCounter--,this.tree=this.trees[this.treesCounter],a}if(e instanceof x)return(await this.evaluateIdentifierBranch(e.pointer)).variable;if(e instanceof C){let t=await this.evaluateIdentifierBranch(e.baseExpression),s=e.subField;return t.getByPropertyIdentifier(s)}this.addError(t.typesMismatch,"Identifier branch expected.",e)}}async evaluateSentence(e){let s=this.getCurrentScope();if(e instanceof b){let t=e.destination,i=e.sourceExpression,r=await this.evaluateExpression(i);if(r.getType(),t instanceof C){let e=await this.evaluateIdentifierBranch(t.baseExpression),i=t.subField;s.setRecordVariableProperty(e,i,r)}else t instanceof g&&(t.indexRing=await this.evaluateIndexRing(t.indexRing)),s.setVariableValue(t,r,e.destination)}else if(e instanceof W){if(e.sentences){let t=e.sentences,s=t.length;for(let e=0;e<s;e++){let s=await this.evaluateSentence(t[e]);if(s instanceof pe)return s}}}else{if(e instanceof $)return!0===(await this.evaluateExpression(e.condition)).value?await this.evaluateSentence(e.left):await this.evaluateSentence(e.right);if(e instanceof V||e instanceof Pe)return await this.evaluateIdentifierBranch(e);if(e instanceof he){let t=this.getCurrentScope();for(t.cycleDepth++;!0===(await this.evaluateExpression(e.condition)).value&&!(await this.evaluateSentence(e.body)instanceof pe););t.cycleDepth--}else if(e instanceof ce){let t=this.getCurrentScope();t.cycleDepth++;do{if(await this.evaluateSentence(e.body)instanceof pe)break}while(!0!==(await this.evaluateExpression(e.condition)).value);t.cycleDepth--}else if(e instanceof de){let t=this.getCurrentScope(),s=e.variableIdentifier,i=await this.evaluateExpression(e.initExpression),r=await this.evaluateExpression(e.lastExpression),n=null,a=null,l=i.typeId,o=!1===i.type?l:i.type;if(t.setValue(s,o,i.value,s),e.countDown)switch(l){case 0:n=function(e){return e.value--,e},a=(e,t)=>e.value>=t.value;break;case 2:n=function(e){let t=e.value.charCodeAt(0);return t--,e.value=String.fromCharCode(t),e},a=(e,t)=>e.value.charCodeAt(0)>=t.value.charCodeAt(0);break;case 5:n=function(e){let t=e.type.items,s=t.length,i=e.getIndex();return i--,e.value=t[(i+s)%s],e},a=(e,t)=>e.getIndex()>=t.getIndex()}else switch(l){case 0:n=function(e){return e.value++,e},a=(e,t)=>e.value<=t.value;break;case 2:n=function(e){let t=e.value.charCodeAt(0);return t++,e.value=String.fromCharCode(t),e},a=(e,t)=>e.value.charCodeAt(0)<=t.value.charCodeAt(0);break;case 5:n=function(e){let t=e.type.items,s=t.length,i=e.getIndex();return i++,e.value=t[i%s],e},a=(e,t)=>e.getIndex()<=t.getIndex()}t.cycleDepth++;let h=5===l?new ge(i.value,o):new be(i.value,l),c=!0;for(;a(i,r)&&c&&!(await this.evaluateSentence(e.body)instanceof pe);)h.value=i.value,i=n(i),t.setValue(s,o,i.value),c=a(h,i);t.cycleDepth--}else if(e instanceof pe){if(!(this.getCurrentScope().cycleDepth<=0))return e;this.addError(t.breakOutOfLoop,null,e)}else if(e instanceof ue){let s=await this.evaluateExpression(e.switchExpression),i=!1,r=this.getCurrentScope();for(let n=0;n<e.cases.length;n++){let a=e.cases[n];for(let e=0;e<a.constants.length;e++){let n=a.constants[e];if(r.sameType(n.typeId,s.getType())||this.addError(t.typesMismatch,"The constant and the switch expression have different types",n),n.symbol.value===s.value){i=!0,this.evaluateSentence(a.operator);break}}if(i)break}i||null===e.elseSentence||this.evaluateSentence(e.elseSentence)}}}async addParametersToScope(e,s,i){if(s instanceof Oe)if(s.byReference)i.setParametersList(e);else{let t=await Promise.all(e.map((async e=>await this.evaluateExpression(e))));i.setParametersList(t)}else{let r=0;for(let n=0;n<s.length;n++){let a=s[n],l=a.identifiers,o=a.byReference;for(let s=0;s<l.length;s++){let n=l[s],h=a.type,c=e[r];if(o)c instanceof T||this.addError(t.identifierExpected,"Cannot use other expressions here",c),i.addVariableByReference(c,n);else{let e=await this.evaluateExpression(c);i.addVariable(n,h),i.setValue(n,h,e.value,n)}r++}}}}async evaluateExpression(e){if(e instanceof w){let t=e.identifier,s=await this.evaluateIdentifierBranch(t),i=s.getType();return new xe(s,i)}if(e instanceof Q){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),i=6,r=null;return r=5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()===s.getIndex():t.value===s.value,new be(r,i)}if(e instanceof ee){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),i=6,r=null;return r=2===t.typeId&&2===s.typeId?t.value.charCodeAt(0)>s.value.charCodeAt(0):5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()>s.getIndex():t.value>s.value,new be(r,i)}if(e instanceof Z){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),i=6,r=null;return r=2===t.typeId&&2===s.typeId?t.value.charCodeAt(0)<s.value.charCodeAt(0):5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()<s.getIndex():t.value<s.value,new be(r,i)}if(e instanceof te){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),i=6,r=null;return r=2===t.typeId&&2===s.typeId?t.value.charCodeAt(0)>=s.value.charCodeAt(0):5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()>=s.getIndex():t.value>=s.value,new be(r,i)}if(e instanceof se){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),i=6,r=null;return r=2===t.typeId&&2===s.typeId?t.value.charCodeAt(0)<=s.value.charCodeAt(0):5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()<=s.getIndex():t.value<=s.value,new be(r,i)}if(e instanceof Y){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),i=6,r=null;return r=5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()!==s.getIndex():t.value!==s.value,new be(r,i)}return e instanceof J?(await this.evaluateExpression(e.left),await this.evaluateExpression(e.right),new be(!1,6)):await this.evaluateSimpleExpression(e)}async evaluateSimpleExpression(e){if(e instanceof P||e instanceof O){let t=await this.evaluateSimpleExpression(e.left),s=await this.evaluateSimpleExpression(e.right),i=1===t.typeId||1===s.typeId?1:0,r=null;return e instanceof P?r=t.value+s.value:e instanceof O&&(r=t.value-s.value),new be(r,i)}if(e instanceof z){let t=await this.evaluateSimpleExpression(e.left),s=await this.evaluateSimpleExpression(e.right),i=6,r=t.value||s.value;return new be(r,i)}return await this.evaluateTerm(e)}async evaluateTerm(e){if(e instanceof G){let t=await this.evaluateTerm(e.value);return new be(!t.value,t.typeId)}if(e instanceof U){let t=await this.evaluateTerm(e.value);return new be(-t.value,t.typeId)}if(e instanceof I){let t=await this.evaluateMultiplier(e.left),s=await this.evaluateMultiplier(e.right),i=1===t.typeId||1===s.typeId?1:0,r=t.value*s.value;return new be(r,i)}if(e instanceof E){let t=await this.evaluateMultiplier(e.left),s=await this.evaluateMultiplier(e.right),i=1,r=t.value/s.value;return new be(r,i)}if(e instanceof j){let t=await this.evaluateMultiplier(e.left),s=await this.evaluateMultiplier(e.right),i=0,r=Math.trunc(t.value/s.value);return new be(r,i)}if(e instanceof q){let t=await this.evaluateMultiplier(e.left),s=await this.evaluateMultiplier(e.right),i=0,r=t.value%s.value;return new be(r,i)}if(e instanceof F){let t=await this.evaluateMultiplier(e.left),s=await this.evaluateMultiplier(e.right),i=6,r=t.value&&s.value;return new be(r,i)}return await this.evaluateMultiplier(e)}async evaluateMultiplier(e){return e instanceof L?new be(e.symbol.value,e.typeId):e instanceof V||e instanceof T||e instanceof g||e instanceof x||e instanceof C?await this.evaluateIdentifierBranch(e):await this.evaluateExpression(e)}addError(e,t=null,s=null){let r=this.errorsDescription.getErrorTextByCode(e)+(null===t?"":". "+t),n=null===s?null:s.symbol.textPosition;throw new i(e,r,n)}async setIdentifierBranchValue(e,t){let s=this.getCurrentScope();if(e instanceof C){let i=await this.evaluateIdentifierBranch(e.baseExpression),r=e.subField;s.setRecordVariableProperty(i,r,t)}else e instanceof g&&this.evaluateIndexRing(e.indexRing),s.setVariableValue(e,t,e)}}class De{engine;error;constructor(e){this.config=e}runString(e){try{var t=new r(e,this.config.listingOutput),s=new p(t),n=new me(s).analyze(),a=new Me(n,this.config);a.run()}catch(e){if(!(e instanceof i))throw e;this.error=e}return this.engine=a,a}getVar(e){return this.engine.getCurrentScope().items[e]}getVarValue(e){let t=this.getVar(e);return 3===t.typeId?this.getVar(e).items:5===t.typeId?this.getVar(e).value.symbol.stringValue:this.getVar(e).value}getError(){return this.error}}function Ae(e){return(e<10?1:Math.floor(Math.log10(e)))+1}let We=new class{constructor(){this.screen=document.querySelector(".screen"),this.letters=[],this.lettersCounter=0}getLine(e=!1){let t=document.querySelector(".screen"),s=t.querySelectorAll("div"),i=null;return e||0===s.length?(i=document.createElement("div"),t.appendChild(i)):i=s[s.length-1],i}addLine(e,t=!1){let s=this.getLine(t),i=document.createElement("span");i.textContent=e,s.appendChild(i)}write(e){let t=e.split("\n").map((function(e){return e.replace(/ /g," ")}));this.addLine(t[0]),console.log(t);for(let e=1;e<t.length;e++)this.addLine(t[e],!0)}async read(e=!1){let t=this.getLine(e),s=document.createElement("span");s.contentEditable="true",t.appendChild(s);let i=document.querySelector(".screen"),r=function(e){"Enter"===e.key&&(this.querySelector("span[contenteditable=true").contentEditable="false",e.preventDefault(),i.removeEventListener("click",r))},n=new Promise((function(e,t){setInterval((()=>{"false"===s.contentEditable&&e(s.textContent)}),300)}));return i.addEventListener("keydown",r),n}async getChar(){if(0===this.letters.length||this.lettersCounter>=this.letters.length){let e=await this.read()+"\n";console.log("word",e),this.letters=e.split(""),this.lettersCounter=0}let e=this.letters[this.lettersCounter];return this.lettersCounter++,e}};const $e={outputStream:We,listingOutput:new class extends class{constructor(){this.errorsCounter=0}listErrors(e){e.forEach((e=>this.listError(e)))}getLinePrefix(e){return"  "+(e<10?"0":"")+e+"    "}getErrorText(e,t){var s=Ae(e.textPosition.lineNumber),i=s-Ae(t),r=i<0?2+i:2,n=s+4;return"**"+(t<10?"0":"")+"0".repeat(i>0?i:0)+t+"*".repeat(r)+" ".repeat(e.textPosition.charNumber+1)+"^ Error Code "+e.errorCode+"\n"+"*".repeat(n)+"  "+e.errorText}listError(e){console.log(this.getErrorText(e,++this.errorsCounter))}}{constructor(){super(),this.outputLines=[]}listLine(e,t){var s=this.getLinePrefix(t+1)+e;this.outputLines.push(s.replace(/[\n\r]/g,""))}listError(e){this.outputLines.push(this.getErrorText(e,++this.errorsCounter))}},ouputNewLineSymbol:"\n",input:We};let je=document.querySelectorAll("div.delphi div.toolbar span a.command_help"),qe=document.querySelector("dialog");document.querySelector("#close").onclick=function(){qe.close()},je.forEach((e=>{e.addEventListener("click",(async function(e){qe.show();let t=this.parentNode.parentNode.parentNode.querySelector("table tbody tr td.code div.container").textContent;new De($e).runString(t),console.log($e.outputStream.value),$e.outputStream.value="",e.preventDefault()}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFTcEQsS0FBSzZsQixrQkRqQ2hEaG1CLGNBRUkrQixRQUNBNUIsS0FBS3VtQixZQUFjLEdBR3ZCampCLFNBQVNrakIsRUFBTTNDLEdBRVgsSUFBSTRDLEVBQVN6bUIsS0FBSytsQixjQUFjbEMsRUFBUyxHQUFLMkMsRUFDOUN4bUIsS0FBS3VtQixZQUFZeGpCLEtBQUswakIsRUFBT2xkLFFBQVEsVUFBVyxLQUdwRGhHLFVBQVVILEdBRU5wRCxLQUFLdW1CLFlBQVl4akIsS0FBSy9DLEtBQUtnbUIsYUFBYTVpQixJQUFTcEQsS0FBSzZsQixrQkZSMURoSSxtQkFBb0IsS0FDcEJJLE1BQU8rRixJQUlYLElBQUkwQyxHQUFjeEMsU0FBU00saUJBQWlCLDhDQUd4Q21DLEdBQVN6QyxTQUFTQyxjQUFjLFVBQ3BDRCxTQUFTQyxjQUFjLFVBQVV5QyxRQUFVLFdBQ3ZDRCxHQUFPRSxTQU1YSCxHQUFZblosU0FBU0MsSUFDakJBLEVBQUttWSxpQkFBa0IsU0FBVXBNLGVBQWU0TCxHQUM1Q3dCLEdBQU9HLE9BRVAsSUFFSXRrQixFQUZZeEMsS0FBSyttQixXQUFXQSxXQUFXQSxXQUNqQjVDLGNBQWMsd0NBQ1pXLFlBR2YsSUFBSTFCLEdBQWdCbEQsSUFDMUJtRCxVQUFVN2dCLEdBQ2pCdWlCLFFBQVFDLElBQUk5RSxHQUFPdEMsYUFBYTdVLE9BQ2hDbVgsR0FBT3RDLGFBQWE3VSxNQUFRLEdBRTVCb2MsRUFBTUUsd0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvSU8vVGV4dFBvc2l0aW9uLmpzIiwid2VicGFjazovL2Zrbl9wYWdlLy4vcGFzY2FsLmpzL3NyYy9FcnJvcnMvRXJyb3JzQ29kZXMuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL0Vycm9ycy9FcnJvcnNEZXNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvRXJyb3JzL1J1bnRpbWVFcnJvci5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvSU8vU3RyaW5nSU8uanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL0lPL0Jhc2VJTy5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvTGV4aWNhbEFuYWx5emVyL1N5bWJvbHNDb2Rlcy5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvTGV4aWNhbEFuYWx5emVyL0tleVdvcmRzLmpzIiwid2VicGFjazovL2Zrbl9wYWdlLy4vcGFzY2FsLmpzL3NyYy9MZXhpY2FsQW5hbHl6ZXIvU3ltYm9scy9TeW1ib2xCYXNlLmpzIiwid2VicGFjazovL2Zrbl9wYWdlLy4vcGFzY2FsLmpzL3NyYy9MZXhpY2FsQW5hbHl6ZXIvU3ltYm9scy9TeW1ib2wuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL0xleGljYWxBbmFseXplci9TeW1ib2xzL05tYkZsb2F0LmpzIiwid2VicGFjazovL2Zrbl9wYWdlLy4vcGFzY2FsLmpzL3NyYy9MZXhpY2FsQW5hbHl6ZXIvU3ltYm9scy9ObWJJbnQuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL0xleGljYWxBbmFseXplci9TeW1ib2xzL09uZVN5bWJvbC5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvTGV4aWNhbEFuYWx5emVyL1N5bWJvbHMvU3RyaW5nQ29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL0xleGljYWxBbmFseXplci9TeW1ib2xzL0Jvb2xDb25zdGFudC5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvTGV4aWNhbEFuYWx5emVyL0xleGljYWxBbmFseXplci5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvTGV4aWNhbEFuYWx5emVyL1N5bWJvbHNEZXNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU3ludGF4QW5hbHl6ZXIvVHJlZS9UcmVlTm9kZUJhc2UuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1N5bnRheEFuYWx5emVyL1RyZWUvQXNzaWduYXRpb24uanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1N5bnRheEFuYWx5emVyL1RyZWUvQXJyYXlzL0luZGV4ZWRJZGVudGlmaWVyLmpzIiwid2VicGFjazovL2Zrbl9wYWdlLy4vcGFzY2FsLmpzL3NyYy9TeW50YXhBbmFseXplci9UcmVlL0FycmF5cy9JbmRleFJpbmcuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1N5bnRheEFuYWx5emVyL1RyZWUvR2V0QnlQb2ludGVyLmpzIiwid2VicGFjazovL2Zrbl9wYWdlLy4vcGFzY2FsLmpzL3NyYy9TeW50YXhBbmFseXplci9UcmVlL0dldFBvaW50ZXIuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1N5bnRheEFuYWx5emVyL1RyZWUvVGFrZUZpZWxkLmpzIiwid2VicGFjazovL2Zrbl9wYWdlLy4vcGFzY2FsLmpzL3NyYy9TeW50YXhBbmFseXplci9UcmVlL0JpbmFyeU9wZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU3ludGF4QW5hbHl6ZXIvVHJlZS9NdWx0aXBsaWNhdGlvbi5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU3ludGF4QW5hbHl6ZXIvVHJlZS9EaXZpc2lvbi5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU3ludGF4QW5hbHl6ZXIvVHJlZS9BZGRpdGlvbi5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU3ludGF4QW5hbHl6ZXIvVHJlZS9TdWJ0cmFjdGlvbi5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU3ludGF4QW5hbHl6ZXIvVHJlZS9Db25zdGFudC5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU2VtYW50aWNzL1ZhcmlhYmxlcy9UeXBlc0lkcy5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU3ludGF4QW5hbHl6ZXIvVHJlZS9JZGVudGlmaWVyLmpzIiwid2VicGFjazovL2Zrbl9wYWdlLy4vcGFzY2FsLmpzL3NyYy9TeW50YXhBbmFseXplci9UcmVlL0Z1bmN0aW9uQ2FsbC5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU3ludGF4QW5hbHl6ZXIvVHJlZS9UeXBlcy9UeXBlQmFzZS5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU3ludGF4QW5hbHl6ZXIvVHJlZS9UeXBlcy9TY2FsYXJUeXBlLmpzIiwid2VicGFjazovL2Zrbl9wYWdlLy4vcGFzY2FsLmpzL3NyYy9TeW50YXhBbmFseXplci9UcmVlL1R5cGVzL1JlY29yZFR5cGUuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1N5bnRheEFuYWx5emVyL1RyZWUvVHlwZXMvQXBwbGllZE5hbWVkVHlwZS5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU3ludGF4QW5hbHl6ZXIvVHJlZS9WYXJpYWJsZXNEZWNsYXJhdGlvbi5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU3ludGF4QW5hbHl6ZXIvVHJlZS9Db25zdGFudERlY2xhcmF0aW9uLmpzIiwid2VicGFjazovL2Zrbl9wYWdlLy4vcGFzY2FsLmpzL3NyYy9TeW50YXhBbmFseXplci9UcmVlL1R5cGVEZWNsYXJhdGlvbi5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU3ludGF4QW5hbHl6ZXIvVHJlZS9Db21wb3VuZE9wZXJhdG9yLmpzIiwid2VicGFjazovL2Zrbl9wYWdlLy4vcGFzY2FsLmpzL3NyYy9TeW50YXhBbmFseXplci9UcmVlL0ltcGxpY2F0aW9uLmpzIiwid2VicGFjazovL2Zrbl9wYWdlLy4vcGFzY2FsLmpzL3NyYy9TeW50YXhBbmFseXplci9UcmVlL0ludGVnZXJEaXZpc2lvbi5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU3ludGF4QW5hbHl6ZXIvVHJlZS9Nb2R1bG8uanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1N5bnRheEFuYWx5emVyL1RyZWUvTG9naWNhbEFuZC5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU3ludGF4QW5hbHl6ZXIvVHJlZS9Mb2dpY2FsT3IuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1N5bnRheEFuYWx5emVyL1RyZWUvVW5hcnlNaW51cy5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU3ludGF4QW5hbHl6ZXIvVHJlZS9Ob3QuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1N5bnRheEFuYWx5emVyL1RyZWUvUHJvZ3JhbUJhc2UuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1N5bnRheEFuYWx5emVyL1RyZWUvUHJvZ3JhbS5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU3ludGF4QW5hbHl6ZXIvVHJlZS9Qcm9jZWR1cmUuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1N5bnRheEFuYWx5emVyL1RyZWUvRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1N5bnRheEFuYWx5emVyL1RyZWUvUmVsYXRpb25zL0luLmpzIiwid2VicGFjazovL2Zrbl9wYWdlLy4vcGFzY2FsLmpzL3NyYy9TeW50YXhBbmFseXplci9UcmVlL1JlbGF0aW9ucy9FcXVhbC5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU3ludGF4QW5hbHl6ZXIvVHJlZS9SZWxhdGlvbnMvTm90RXF1YWwuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1N5bnRheEFuYWx5emVyL1RyZWUvUmVsYXRpb25zL0xlc3MuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1N5bnRheEFuYWx5emVyL1RyZWUvUmVsYXRpb25zL0dyZWF0ZXIuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1N5bnRheEFuYWx5emVyL1RyZWUvUmVsYXRpb25zL0dyZWF0ZXJPckVxdWFsLmpzIiwid2VicGFjazovL2Zrbl9wYWdlLy4vcGFzY2FsLmpzL3NyYy9TeW50YXhBbmFseXplci9UcmVlL1JlbGF0aW9ucy9MZXNzT3JFcXVhbC5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU3ludGF4QW5hbHl6ZXIvVHJlZS9UeXBlcy9GdW5jdGlvblR5cGUuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1N5bnRheEFuYWx5emVyL1RyZWUvVHlwZXMvUHJvY2VkdXJlVHlwZS5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU3ludGF4QW5hbHl6ZXIvVHJlZS9QYXJhbWV0ZXJzTGlzdC9UeXBlQXBwbGllZC5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU3ludGF4QW5hbHl6ZXIvVHJlZS9UeXBlcy9FbnVtVHlwZS5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU3ludGF4QW5hbHl6ZXIvVHJlZS9UeXBlcy9BcnJheVR5cGUuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1N5bnRheEFuYWx5emVyL1RyZWUvVHlwZXMvUG9pbnRlclR5cGUuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1N5bnRheEFuYWx5emVyL1RyZWUvTG9vcHMvV2hpbGVDeWNsZS5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU3ludGF4QW5hbHl6ZXIvVHJlZS9Mb29wcy9SZXBlYXRDeWNsZS5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU3ludGF4QW5hbHl6ZXIvVHJlZS9DYXNlL1N3aXRjaC5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU3ludGF4QW5hbHl6ZXIvVHJlZS9DYXNlL0Nhc2UuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1N5bnRheEFuYWx5emVyL1RyZWUvTG9vcHMvRm9yQ3ljbGUuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1N5bnRheEFuYWx5emVyL1RyZWUvQnJlYWsuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1N5bnRheEFuYWx5emVyL1N5bnRheEFuYWx5emVyLmpzIiwid2VicGFjazovL2Zrbl9wYWdlLy4vcGFzY2FsLmpzL3NyYy9TZW1hbnRpY3MvVmFyaWFibGVzL0Jhc2VWYXJpYWJsZS5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU2VtYW50aWNzL1ZhcmlhYmxlcy9TY2FsYXJWYXJpYWJsZS5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU2VtYW50aWNzL1ZhcmlhYmxlcy9FbnVtVmFyaWFibGUuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1NlbWFudGljcy9WYXJpYWJsZXMvQXJyYXlWYXJpYWJsZS5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU2VtYW50aWNzL1ZhcmlhYmxlcy9Qb2ludGVyVmFyaWFibGUuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1NlbWFudGljcy9WYXJpYWJsZXMvUmVjb3JkVmFyaWFibGUuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1NlbWFudGljcy9WYXJpYWJsZXMvQ2FsbGFibGVWYXJpYWJsZS5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU2VtYW50aWNzL1Byb2NlZHVyZUl0ZW0uanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1NlbWFudGljcy9GdW5jdGlvbkl0ZW0uanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1NlbWFudGljcy9TY29wZS5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU3ludGF4QW5hbHl6ZXIvVHJlZS9Qcm9jZWR1cmVDYWxsLmpzIiwid2VicGFjazovL2Zrbl9wYWdlLy4vcGFzY2FsLmpzL3NyYy9TZW1hbnRpY3MvU2lnbmF0dXJlcy9VbmJvdW5kZWRQYXJhbWV0ZXJzTGlzdC5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU2VtYW50aWNzL1Byb2NlZHVyZXMvV3JpdGVMbi5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU2VtYW50aWNzL1Byb2NlZHVyZXMvV3JpdGUuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1NlbWFudGljcy9Qcm9jZWR1cmVzL1JlYWRMbi5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU2VtYW50aWNzL1Byb2NlZHVyZXNTdG9yZS5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvU2VtYW50aWNzL0Z1bmN0aW9ucy9PcmQuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1NlbWFudGljcy9GdW5jdGlvbnMvQ2hyLmpzIiwid2VicGFjazovL2Zrbl9wYWdlLy4vcGFzY2FsLmpzL3NyYy9TZW1hbnRpY3MvRnVuY3Rpb25zU3RvcmUuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1NlbWFudGljcy9FbmdpbmUuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL1Bhc2NhbEpzL0Jyb3dzZXJQYXNjYWxKcy5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3Bhc2NhbC5qcy9zcmMvSU8vaGVscGVycy5qcyIsIndlYnBhY2s6Ly9ma25fcGFnZS8uL3NyYy9hcHAuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9zcmMvVGVybWluYWwuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL0lPL091dHB1dC9TdHJpbmdPdXRwdXQuanMiLCJ3ZWJwYWNrOi8vZmtuX3BhZ2UvLi9wYXNjYWwuanMvc3JjL0lPL091dHB1dC9CYXNlT3V0cHV0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBUZXh0UG9zaXRpb25cbntcbiAgICBjb25zdHJ1Y3RvcihsaW5lTnVtYmVyID0gMCwgY2hhck51bWJlciA9IDApXG4gICAge1xuICAgICAgICB0aGlzLmxpbmVOdW1iZXIgPSBsaW5lTnVtYmVyO1xuICAgICAgICB0aGlzLmNoYXJOdW1iZXIgPSBjaGFyTnVtYmVyO1xuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgRXJyb3JzQ29kZXMgPSB7XG4gICAgaW5hZG1pc3NpYmxlU3ltYm9sOiAzLFxuICAgIGZvcmJpZGRlbkNoYXJhY3RlcjogNixcbiAgICBuYW1lTm90RGVzY3JpYmVkOiAxMDQsXG4gICAgYnJlYWtPdXRPZkxvb3A6IDEwNSxcbiAgICBpZGVudGlmaWVyQWxyZWFkeVVzZWQ6IDEwNixcbiAgICB2YXJpYWJsZU5vdERlY2xhcmVkOiAxMDcsXG4gICAgY29uc3RhbnRPclZhcmlhYmxlTm90RGVjbGFyZWQ6IDEwOCxcbiAgICB0eXBlc01pc21hdGNoOiAxMDksXG4gICAgdHlwZU5vdERlY2xhcmVkOiAxMTAsXG4gICAgaW5kZXhJc091dE9mUmFuZ2U6IDExMSxcbiAgICBpZGVudGlmaWVyRXhwZWN0ZWQ6IDExMixcbiAgICBlbGVtZW50SXNOb3RJbml0aWFsaXplZDogMTEzLFxuICAgIG5vdENhbGxhYmxlRWxlbWVudDogMTE0LFxuICAgIGFycmF5RXhwZWN0ZWQ6IDExNSxcbiAgICByZWNvcmRQcm9wZXJ0eUlzTm90RGVmaW5lZDogMTE2LFxufSIsImltcG9ydCB7IEVycm9yc0NvZGVzIH0gZnJvbSAnLi9FcnJvcnNDb2Rlcy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBFcnJvcnNEZXNjcmlwdGlvblxue1xuICAgIGNvbnN0cnVjdG9yKClcbiAgICB7XG4gICAgICAgIHRoaXMuZXJyb3JDb2RlTWFwcGVyID0gbmV3IE1hcChbXG4gICAgICAgICAgICBbMSwgJ0FuIGVycm9yIGluIHByaW1pdGl2ZSB0eXBlJ10sXG4gICAgICAgICAgICBbMiwgJ05hbWUgZXhwZWN0ZWQnXSxcbiAgICAgICAgICAgIFtFcnJvcnNDb2Rlcy5pbmFkbWlzc2libGVTeW1ib2wsICdJbmFkbWlzc2libGUgU3ltYm9sJ10sXG4gICAgICAgICAgICBbRXJyb3JzQ29kZXMuZm9yYmlkZGVuQ2hhcmFjdGVyLCAnRm9yYmlkZGVuIGNoYXJhY3RlciddLFxuICAgICAgICAgICAgW0Vycm9yc0NvZGVzLm5hbWVOb3REZXNjcmliZWQsICdOYW1lIGlzIG5vdCBkZXNjcmliZWQnXSxcbiAgICAgICAgICAgIFtFcnJvcnNDb2Rlcy5icmVha091dE9mTG9vcCwgJ1xcJ2JyZWFrXFwnIGlzIG91dCBvZiBsb29wJ10sXG4gICAgICAgICAgICBbRXJyb3JzQ29kZXMuaWRlbnRpZmllckFscmVhZHlVc2VkLCAnSWRlbnRpZmllciBhbHJlYWR5IHVzZWQnXSxcbiAgICAgICAgICAgIFtFcnJvcnNDb2Rlcy52YXJpYWJsZU5vdERlY2xhcmVkLCAnVmFyaWFibGUgbm90IGRlY2xhcmVkJ10sXG4gICAgICAgICAgICBbRXJyb3JzQ29kZXMuY29uc3RhbnRPclZhcmlhYmxlTm90RGVjbGFyZWQsICdDb25zdGFudCBvciB2YXJpYWJsZSBub3QgZGVjbGFyZWQnXSxcbiAgICAgICAgICAgIFtFcnJvcnNDb2Rlcy50eXBlc01pc21hdGNoLCAnVHlwZXMgbWlzbWF0Y2gnXSxcbiAgICAgICAgICAgIFtFcnJvcnNDb2Rlcy5pZGVudGlmaWVyRXhwZWN0ZWQsICdJZGVudGlmaWVyIGV4cGVjdGVkJ10sXG4gICAgICAgICAgICBbRXJyb3JzQ29kZXMuaW5kZXhJc091dE9mUmFuZ2UsICdJbmRleCBpcyBvdXQgb2YgcmFuZ2UnXSxcbiAgICAgICAgICAgIFtFcnJvcnNDb2Rlcy5lbGVtZW50SXNOb3RJbml0aWFsaXplZCwgJ0VsZW1lbnQgaXMgbm90IGluaXRpYWxpemVkJ10sXG4gICAgICAgIF0pO1xuICAgIH1cblxuICAgIGdldEVycm9yVGV4dEJ5Q29kZShlcnJvckNvZGUpXG4gICAge1xuICAgICAgICByZXR1cm4gIHRoaXMuZXJyb3JDb2RlTWFwcGVyLmhhcyhlcnJvckNvZGUpID9cbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yQ29kZU1hcHBlci5nZXQoZXJyb3JDb2RlKSA6XG4gICAgICAgICAgICAgICAgbnVsbDtcbiAgICB9XG59IiwiZXhwb3J0IGNsYXNzIFJ1bnRpbWVFcnJvciBleHRlbmRzIEVycm9yXG57XG4gICAgY29uc3RydWN0b3IoZXJyb3JDb2RlLCBlcnJvclRleHQsIHRleHRQb3NpdGlvbilcbiAgICB7XG4gICAgICAgIHN1cGVyKGVycm9yVGV4dCBcbiAgICAgICAgICAgICsgYCAvLyBsaW5lICR7dGV4dFBvc2l0aW9uLmxpbmVOdW1iZXJ9IGBcbiAgICAgICAgICAgICsgYCBjb2x1bW4gJHt0ZXh0UG9zaXRpb24uY2hhck51bWJlcn0gYCk7XG4gICAgICAgIHRoaXMuZXJyb3JDb2RlID0gZXJyb3JDb2RlO1xuICAgICAgICB0aGlzLmVycm9yVGV4dCA9IGVycm9yVGV4dDtcbiAgICAgICAgdGhpcy50ZXh0UG9zaXRpb24gPSB0ZXh0UG9zaXRpb247XG4gICAgfVxufSIsImltcG9ydCB7IEJhc2VJTyB9IGZyb20gJy4vQmFzZUlPLmpzJztcblxuZXhwb3J0IGNsYXNzIFN0cmluZ0lPIGV4dGVuZHMgQmFzZUlPXG57XG4gICAgY29uc3RydWN0b3IocHJvZ3JhbVRleHQsIHByaW50ZXIsIHJlYWRlciA9IG51bGwpXG4gICAge1xuICAgICAgICBzdXBlcihwcmludGVyLCByZWFkZXIpO1xuICAgICAgICB0aGlzLnNldExpbmVzKHByb2dyYW1UZXh0KTtcbiAgICB9XG59IiwiaW1wb3J0IHsgVGV4dFBvc2l0aW9uIH0gZnJvbSAnLi9UZXh0UG9zaXRpb24uanMnO1xuaW1wb3J0IHsgRXJyb3JzRGVzY3JpcHRpb24gfSBmcm9tICcuLi9FcnJvcnMvRXJyb3JzRGVzY3JpcHRpb24uanMnO1xuaW1wb3J0IHsgUnVudGltZUVycm9yIH0gZnJvbSAnLi4vRXJyb3JzL1J1bnRpbWVFcnJvci5qcyc7XG5cbmV4cG9ydCBjbGFzcyBCYXNlSU9cbntcbiAgICBjb25zdHJ1Y3RvcihwcmludGVyLCByZWFkZXIpXG4gICAge1xuICAgICAgICB0aGlzLmVycm9yc0Rlc2NyaXB0aW9uID0gbmV3IEVycm9yc0Rlc2NyaXB0aW9uKCk7XG5cbiAgICAgICAgdGhpcy5wb3NpdGlvbk5vdyA9IG5ldyBUZXh0UG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5wcmludGVyID0gcHJpbnRlcjtcbiAgICAgICAgdGhpcy5yZWFkZXIgPSByZWFkZXI7XG4gICAgICAgIHRoaXMuY3VycmVudExpbmU7XG4gICAgICAgIHRoaXMuY3VycmVudExpbmVFcnJvcnMgPSBbXTtcbiAgICAgICAgdGhpcy5saW5lcyA9IFtdO1xuICAgICAgICB0aGlzLmxpbmVQb2ludGVyID0gMDtcbiAgICAgICAgdGhpcy5jdXJyZW50TGluZTtcbiAgICAgICAgdGhpcy5lbmRPZkZpbGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBzZXRMaW5lcyhwcm9ncmFtVGV4dClcbiAgICB7XG4gICAgICAgIHRoaXMubGluZXMgPSBwcm9ncmFtVGV4dC5zcGxpdCgvXFxyP1xcbi8pO1xuICAgICAgICB0aGlzLnJlYWROZXh0TGluZSgpO1xuICAgIH1cblxuICAgIGdldEN1cnJlbnRQb3NpdGlvbigpXG4gICAge1xuICAgICAgICByZXR1cm4gbmV3IFRleHRQb3NpdGlvbihcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb25Ob3cubGluZU51bWJlcixcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb25Ob3cuY2hhck51bWJlclxuICAgICAgICApO1xuICAgIH1cblxuICAgIG5leHRDaCgpXG4gICAge1xuICAgICAgICBpZiAodGhpcy5lbmRPZkZpbGUgJiYgdGhpcy5wb3NpdGlvbk5vdy5jaGFyTnVtYmVyID49IHRoaXMuY3VycmVudExpbmUubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBvc2l0aW9uTm93LmNoYXJOdW1iZXIgPT09IHRoaXMuY3VycmVudExpbmUubGVuZ3RoKSB7XG4vLyAgICAgICAgICAgICAgICB0aGlzLnByaW50ZXIubGlzdExpbmUodGhpcy5jdXJyZW50TGluZS5qb2luKCcnKSwgdGhpcy5wb3NpdGlvbk5vdy5saW5lTnVtYmVyKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50TGluZUVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJpbnRlci5saXN0RXJyb3JzKHRoaXMuY3VycmVudExpbmVFcnJvcnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnJlYWROZXh0TGluZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudExpbmVFcnJvcnMgPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uTm93LmxpbmVOdW1iZXIrKztcbiAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uTm93LmNoYXJOdW1iZXIgPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50TGluZVt0aGlzLnBvc2l0aW9uTm93LmNoYXJOdW1iZXIrK107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZWFkTmV4dExpbmUoKVxuICAgIHtcbiAgICAgICB2YXIgY3VycmVudExpbmUgPSB0aGlzLmxpbmVzW3RoaXMubGluZVBvaW50ZXIrK107XG4gICAgICAgdGhpcy5jdXJyZW50TGluZSA9IGN1cnJlbnRMaW5lLnNwbGl0KCcnKTtcbiAgICAgICB0aGlzLmN1cnJlbnRMaW5lLnB1c2goJ1xcbicpO1xuICAgICAgIHRoaXMuZW5kT2ZGaWxlID0gdGhpcy5saW5lUG9pbnRlciA9PT0gdGhpcy5saW5lcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgYWRkRXJyb3IoZXJyb3JDb2RlLCBlcnJvclRleHQgPSBudWxsLCB0ZXh0UG9zaXRpb24gPSBudWxsKVxuICAgIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0aGlzLmVycm9yc0Rlc2NyaXB0aW9uLmdldEVycm9yVGV4dEJ5Q29kZShlcnJvckNvZGUpICtcbiAgICAgICAgICAgICAgICAoZXJyb3JUZXh0ID09PSBudWxsID8gJycgOiAoJy4gJyArIGVycm9yVGV4dCkpO1xuICAgICAgICBsZXQgY3VycmVudFBvc2l0aW9uID0gdGV4dFBvc2l0aW9uID09PSBudWxsID8gdGhpcy5nZXRDdXJyZW50UG9zaXRpb24oKSA6IHRleHRQb3NpdGlvbjtcbiAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcihlcnJvckNvZGUsIG1lc3NhZ2UsIGN1cnJlbnRQb3NpdGlvbik7XG4gICAgfVxuXG4gICAgcHJpbnRMaXN0aW5nKGVycm9yID0gbnVsbClcbiAgICB7XG4gICAgICAgIGxldCBsaW5lTnVtYmVyID0gZXJyb3IudGV4dFBvc2l0aW9uLmxpbmVOdW1iZXI7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbGluZU51bWJlcjsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLnByaW50ZXIubGlzdExpbmUodGhpcy5saW5lc1tpXSwgaSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnByaW50ZXIubGlzdEVycm9yKGVycm9yKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gbGluZU51bWJlciArIDE7IGkgPD0gdGhpcy5saW5lcy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMucHJpbnRlci5saXN0TGluZSh0aGlzLmxpbmVzW2ldLCBpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlYWRXb3JkcyhleHBlY3RlZE51bWJlck9mV29yZHMpXG4gICAge1xuICAgICAgICB0aGlzLnJlYWRlci5yZWFkV29yZHMoZXhwZWN0ZWROdW1iZXJPZldvcmRzKTtcbiAgICB9XG59IiwiZXhwb3J0IGNvbnN0IFN5bWJvbHNDb2RlcyA9IHtcbiAgICBzdGFyICAgICAgICAgICAgOjIxLCAgIC8qICogKi9cbiAgICBzbGFzaCAgICAgICAgICAgOjYwLCAgIC8qIC8gKi9cbiAgICBlcXVhbCAgICAgICAgICAgOjE2LCAgIC8qID0gKi9cbiAgICBjb21tYSAgICAgICAgICAgOjIwLCAgIC8qICwgKi9cbiAgICBzZW1pY29sb24gICAgICAgOjE0LCAgIC8qIDsgKi9cbiAgICBjb2xvbiAgICAgICAgICAgOjUsICAgIC8qIDogKi9cbiAgICBwb2ludCAgICAgICAgICAgOjYxLCAgIC8qIC4gKi9cbiAgICBhcnJvdyAgICAgICAgICAgOjYyLCAgIC8qIF4gKi9cbiAgICBsZWZ0UGFyICAgICAgICAgOjksICAgIC8qICggKi9cbiAgICByaWdodFBhciAgICAgICAgOjQsICAgIC8qICkgKi9cbiAgICBsQnJhY2tldCAgICAgICAgOjExLCAgIC8qIFsgKi9cbiAgICByQnJhY2tldCAgICAgICAgOjEyLCAgIC8qIF0gKi9cbiAgICBmbFBhciAgICAgICAgICAgOjYzLCAgIC8qIHsgKi9cbiAgICBmclBhciAgICAgICAgICAgOjY0LCAgIC8qIH0gKi9cbiAgICBsYXRlciAgICAgICAgICAgOjY1LCAgIC8qIDwgKi9cbiAgICBncmVhdGVyICAgICAgICAgOjY2LCAgIC8qID4gKi9cbiAgICBsYXRlckVxdWFsICAgICAgOjY3LCAgIC8qIDw9ICovXG4gICAgZ3JlYXRlckVxdWFsICAgIDo2OCwgICAvKiA+PSAqL1xuICAgIGxhdGVyR3JlYXRlciAgICA6NjksICAgLyogPD4gKi9cbiAgICBwbHVzICAgICAgICAgICAgOjcwLCAgIC8qICsgKi9cbiAgICBtaW51cyAgICAgICAgICAgOjcxLCAgIC8qIC0gKi9cbiAgICBsQ29tbWVudCAgICAgICAgOjcyLCAgIC8qICgqICovXG4gICAgckNvbW1lbnQgICAgICAgIDo3MywgICAvKiAqKSAqL1xuICAgIGFzc2lnbiAgICAgICAgICA6NTEsICAgLyogOj0gKi9cbiAgICB0d29Qb2ludHMgICAgICAgOjc0LCAgIC8qIC4uICovXG4gICAgYXQgICAgICAgICAgICAgIDo3NSwgICAvKiBAICovXG4gICAgaWRlbnQgICAgICAgICAgIDoyLCAgICAvKiBJZGVudGlmaWVyICovXG4gICAgZmxvYXRDICAgICAgICAgIDo4MiwgICAvKiBGbG9hdCBDb25zdGFudCAqL1xuICAgIGludEMgICAgICAgICAgICA6MTUsICAgLyogSW50ZWdlciBDb25zdGFudCAqL1xuICAgIGNoYXJDICAgICAgICAgICA6ODMsICAgLyogQ2hhcmFjdGVyIENvbnN0YW50ICovXG4gICAgc3RyaW5nQyAgICAgICAgIDo4NCwgICAvKiBTdHJpbmcgQ29uc3RhbnQgKi9cbiAgICBib29sZWFuQyAgICAgICAgOjg1LCAgIC8qIEJvb2xlYW4gQ29uc3RhbnQgKi9cbiAgICBjYXNlU3kgICAgICAgICAgOjMxLFxuICAgIGVsc2VTeSAgICAgICAgICA6MzIsXG4gICAgZmlsZVN5ICAgICAgICAgIDo1NyxcbiAgICBnb3RvU3kgICAgICAgICAgOjMzLFxuICAgIHRoZW5TeSAgICAgICAgICA6NTIsXG4gICAgdW50aWxTeSAgICAgICAgIDo1MyxcbiAgICBkb1N5ICAgICAgICAgICAgOjU0LFxuICAgIHdpdGhTeSAgICAgICAgICA6MzcsXG4gICAgaWZTeSAgICAgICAgICAgIDo1NixcbiAgICBvZlN5ICAgICAgICAgICAgOjEwMixcbiAgICBvclN5ICAgICAgICAgICAgOjEwMyxcbiAgICBpblN5ICAgICAgICAgICAgOjEwNCxcbiAgICB0b1N5ICAgICAgICAgICAgOjEwNSxcbiAgICBlbmRTeSAgICAgICAgICAgOjEwNixcbiAgICB2YXJTeSAgICAgICAgICAgOjEwNyxcbiAgICBkaXZTeSAgICAgICAgICAgOjEwOCxcbiAgICBhbmRTeSAgICAgICAgICAgOjEwOSxcbiAgICBub3RTeSAgICAgICAgICAgOjExMCxcbiAgICBmb3JTeSAgICAgICAgICAgOjExMSxcbiAgICBtb2RTeSAgICAgICAgICAgOjExMixcbiAgICBuaWxTeSAgICAgICAgICAgOjExMyxcbiAgICBzZXRTeSAgICAgICAgICAgOjExNCxcbiAgICB0eXBlU3kgICAgICAgICAgOjEyMCxcbiAgICByZWFsU3kgICAgICAgICAgOjEyMSxcbiAgICBjaGFyU3kgICAgICAgICAgOjEyMixcbiAgICBiZWdpblN5ICAgICAgICAgOjEyMyxcbiAgICB3aGlsZVN5ICAgICAgICAgOjEyNCxcbiAgICBhcnJheVN5ICAgICAgICAgOjEyNSxcbiAgICBjb25zdFN5ICAgICAgICAgOjEyNixcbiAgICBsYWJlbFN5ICAgICAgICAgOjEyNyxcbiAgICBkb3dudG9TeSAgICAgICAgOjEyOCxcbiAgICBzdHJpbmdTeSAgICAgICAgOjEyOSxcbiAgICBwYWNrZWRTeSAgICAgICAgOjEzMCxcbiAgICByZWNvcmRTeSAgICAgICAgOjEzMSxcbiAgICByZXBlYXRTeSAgICAgICAgOjEzMixcbiAgICBpbnRlZ2VyU3kgICAgICAgOjEzMyxcbiAgICBib29sZWFuU3kgICAgICAgOjEzNCxcbiAgICBwcm9ncmFtU3kgICAgICAgOjEzNSxcbiAgICBmdW5jdGlvblN5ICAgICAgOjEzNixcbiAgICBwcm9jZWR1cmVTeSAgICAgOjEzNyxcbiAgICBicmVha1N5ICAgICAgICAgOjEzOCxcbiAgICB0cnVlU3kgICAgICAgICAgOjEzOSxcbiAgICBmYWxzZVN5ICAgICAgICAgOjE0MFxufTsiLCJpbXBvcnQgeyBTeW1ib2xzQ29kZXMgfSBmcm9tICcuL1N5bWJvbHNDb2Rlcy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBLZXlXb3Jkc1xue1xuICAgIGNvbnN0cnVjdG9yKClcbiAgICB7XG4gICAgICAgIHRoaXMua2V5V29yZHNDb2RlcyA9IG5ldyBNYXAoW1xuICAgICAgICAgICAgWydpZicsIFN5bWJvbHNDb2Rlcy5pZlN5XSxcbiAgICAgICAgICAgIFsnZG8nLCBTeW1ib2xzQ29kZXMuZG9TeV0sXG4gICAgICAgICAgICBbJ29mJywgU3ltYm9sc0NvZGVzLm9mU3ldLFxuICAgICAgICAgICAgWydvcicsIFN5bWJvbHNDb2Rlcy5vclN5XSxcbiAgICAgICAgICAgIFsnaW4nLCBTeW1ib2xzQ29kZXMuaW5TeV0sXG4gICAgICAgICAgICBbJ3RvJywgU3ltYm9sc0NvZGVzLnRvU3ldLFxuICAgICAgICAgICAgWydlbmQnLCBTeW1ib2xzQ29kZXMuZW5kU3ldLFxuICAgICAgICAgICAgWyd2YXInLCBTeW1ib2xzQ29kZXMudmFyU3ldLFxuICAgICAgICAgICAgWydkaXYnLCBTeW1ib2xzQ29kZXMuZGl2U3ldLFxuICAgICAgICAgICAgWydhbmQnLCBTeW1ib2xzQ29kZXMuYW5kU3ldLFxuICAgICAgICAgICAgWydub3QnLCBTeW1ib2xzQ29kZXMubm90U3ldLFxuICAgICAgICAgICAgWydmb3InLCBTeW1ib2xzQ29kZXMuZm9yU3ldLFxuICAgICAgICAgICAgWydtb2QnLCBTeW1ib2xzQ29kZXMubW9kU3ldLFxuICAgICAgICAgICAgWyduaWwnLCBTeW1ib2xzQ29kZXMubmlsU3ldLFxuICAgICAgICAgICAgWydzZXQnLCBTeW1ib2xzQ29kZXMuc2V0U3ldLFxuICAgICAgICAgICAgWyd0aGVuJywgU3ltYm9sc0NvZGVzLnRoZW5TeV0sXG4gICAgICAgICAgICBbJ2Vsc2UnLCBTeW1ib2xzQ29kZXMuZWxzZVN5XSxcbiAgICAgICAgICAgIFsnY2FzZScsIFN5bWJvbHNDb2Rlcy5jYXNlU3ldLFxuICAgICAgICAgICAgWydmaWxlJywgU3ltYm9sc0NvZGVzLmZpbGVTeV0sXG4gICAgICAgICAgICBbJ2dvdG8nLCBTeW1ib2xzQ29kZXMuZ290b1N5XSxcbiAgICAgICAgICAgIFsndHlwZScsIFN5bWJvbHNDb2Rlcy50eXBlU3ldLFxuICAgICAgICAgICAgWyd3aXRoJywgU3ltYm9sc0NvZGVzLndpdGhTeV0sXG4gICAgICAgICAgICBbJ3JlYWwnLCBTeW1ib2xzQ29kZXMucmVhbFN5XSxcbiAgICAgICAgICAgIFsnY2hhcicsIFN5bWJvbHNDb2Rlcy5jaGFyU3ldLFxuICAgICAgICAgICAgWyd0cnVlJywgU3ltYm9sc0NvZGVzLnRydWVTeV0sXG4gICAgICAgICAgICBbJ2JlZ2luJywgU3ltYm9sc0NvZGVzLmJlZ2luU3ldLFxuICAgICAgICAgICAgWydicmVhaycsIFN5bWJvbHNDb2Rlcy5icmVha1N5XSxcbiAgICAgICAgICAgIFsnd2hpbGUnLCBTeW1ib2xzQ29kZXMud2hpbGVTeV0sXG4gICAgICAgICAgICBbJ2FycmF5JywgU3ltYm9sc0NvZGVzLmFycmF5U3ldLFxuICAgICAgICAgICAgWydjb25zdCcsIFN5bWJvbHNDb2Rlcy5jb25zdFN5XSxcbiAgICAgICAgICAgIFsnbGFiZWwnLCBTeW1ib2xzQ29kZXMubGFiZWxTeV0sXG4gICAgICAgICAgICBbJ3VudGlsJywgU3ltYm9sc0NvZGVzLnVudGlsU3ldLFxuICAgICAgICAgICAgWydmYWxzZScsIFN5bWJvbHNDb2Rlcy5mYWxzZVN5XSxcbiAgICAgICAgICAgIFsnZG93bnRvJywgU3ltYm9sc0NvZGVzLmRvd250b1N5XSxcbiAgICAgICAgICAgIFsnc3RyaW5nJywgU3ltYm9sc0NvZGVzLnN0cmluZ1N5XSxcbiAgICAgICAgICAgIFsncGFja2VkJywgU3ltYm9sc0NvZGVzLnBhY2tlZFN5XSxcbiAgICAgICAgICAgIFsncmVjb3JkJywgU3ltYm9sc0NvZGVzLnJlY29yZFN5XSxcbiAgICAgICAgICAgIFsncmVwZWF0JywgU3ltYm9sc0NvZGVzLnJlcGVhdFN5XSxcbiAgICAgICAgICAgIFsncHJvZ3JhbScsIFN5bWJvbHNDb2Rlcy5wcm9ncmFtU3ldLFxuICAgICAgICAgICAgWydpbnRlZ2VyJywgU3ltYm9sc0NvZGVzLmludGVnZXJTeV0sXG4gICAgICAgICAgICBbJ2Jvb2xlYW4nLCBTeW1ib2xzQ29kZXMuYm9vbGVhblN5XSxcbiAgICAgICAgICAgIFsnZnVuY3Rpb24nLCBTeW1ib2xzQ29kZXMuZnVuY3Rpb25TeV0sXG4gICAgICAgICAgICBbJ3Byb2NlZHVyZScsIFN5bWJvbHNDb2Rlcy5wcm9jZWR1cmVTeV0sXG4gICAgICAgIF0pO1xuICAgIH1cblxuICAgIGdldFN5bWJvbENvZGVCeUtleVdvcmQoa2V5V29yZClcbiAgICB7XG4gICAgICAgIGxldCBsb3dlckNhc2UgPSBrZXlXb3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHVybiAgdGhpcy5rZXlXb3Jkc0NvZGVzLmhhcyhsb3dlckNhc2UpID9cbiAgICAgICAgICAgICAgICB0aGlzLmtleVdvcmRzQ29kZXMuZ2V0KGxvd2VyQ2FzZSkgOlxuICAgICAgICAgICAgICAgIFN5bWJvbHNDb2Rlcy5pZGVudDtcbiAgICB9XG59IiwiZXhwb3J0IGNsYXNzIFN5bWJvbEJhc2VcbntcbiAgICBjb25zdHJ1Y3Rvcih0ZXh0UG9zaXRpb24sIHN5bWJvbENvZGUsIHN0cmluZ1ZhbHVlLCB2YWx1ZSlcbiAgICB7XG4gICAgICAgIHRoaXMudGV4dFBvc2l0aW9uID0gdGV4dFBvc2l0aW9uO1xuICAgICAgICB0aGlzLnN5bWJvbENvZGUgPSBzeW1ib2xDb2RlO1xuICAgICAgICB0aGlzLnN0cmluZ1ZhbHVlID0gc3RyaW5nVmFsdWU7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG59IiwiaW1wb3J0IHsgU3ltYm9sQmFzZSB9IGZyb20gJy4vU3ltYm9sQmFzZS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBTeW1ib2wgZXh0ZW5kcyBTeW1ib2xCYXNlXG57XG4gICAgY29uc3RydWN0b3IodGV4dFBvc2l0aW9uLCBzeW1ib2xDb2RlLCBzdHJpbmdWYWx1ZSlcbiAgICB7XG4gICAgICAgIHN1cGVyKHRleHRQb3NpdGlvbiwgc3ltYm9sQ29kZSwgc3RyaW5nVmFsdWUsIHN0cmluZ1ZhbHVlKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgU3ltYm9sQmFzZSB9IGZyb20gJy4vU3ltYm9sQmFzZS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBObWJGbG9hdCBleHRlbmRzIFN5bWJvbEJhc2VcbntcbiAgICBjb25zdHJ1Y3Rvcih0ZXh0UG9zaXRpb24sIHN5bWJvbENvZGUsIHN0cmluZ1ZhbHVlKVxuICAgIHtcbiAgICAgICAgc3VwZXIodGV4dFBvc2l0aW9uLCBzeW1ib2xDb2RlLCBzdHJpbmdWYWx1ZSwgcGFyc2VGbG9hdChzdHJpbmdWYWx1ZSkpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBTeW1ib2xCYXNlIH0gZnJvbSAnLi9TeW1ib2xCYXNlLmpzJztcblxuZXhwb3J0IGNsYXNzIE5tYkludCBleHRlbmRzIFN5bWJvbEJhc2VcbntcbiAgICBjb25zdHJ1Y3Rvcih0ZXh0UG9zaXRpb24sIHN5bWJvbENvZGUsIHN0cmluZ1ZhbHVlKVxuICAgIHtcbiAgICAgICAgc3VwZXIodGV4dFBvc2l0aW9uLCBzeW1ib2xDb2RlLCBzdHJpbmdWYWx1ZSwgTnVtYmVyLnBhcnNlSW50KHN0cmluZ1ZhbHVlKSk7XG4gICAgfVxufSIsImltcG9ydCB7IFN5bWJvbEJhc2UgfSBmcm9tICcuL1N5bWJvbEJhc2UuanMnO1xuXG5leHBvcnQgY2xhc3MgT25lU3ltYm9sIGV4dGVuZHMgU3ltYm9sQmFzZVxue1xuICAgIGNvbnN0cnVjdG9yKHRleHRQb3NpdGlvbiwgc3ltYm9sQ29kZSwgc3RyaW5nVmFsdWUpXG4gICAge1xuICAgICAgICBzdXBlcih0ZXh0UG9zaXRpb24sIHN5bWJvbENvZGUsIHN0cmluZ1ZhbHVlLCBzdHJpbmdWYWx1ZS5yZXBsYWNlKC8nL2csICcnKSk7XG4gICAgfVxufSIsImltcG9ydCB7IFN5bWJvbEJhc2UgfSBmcm9tICcuL1N5bWJvbEJhc2UuanMnO1xuXG5leHBvcnQgY2xhc3MgU3RyaW5nQ29uc3RhbnQgZXh0ZW5kcyBTeW1ib2xCYXNlXG57XG4gICAgY29uc3RydWN0b3IodGV4dFBvc2l0aW9uLCBzeW1ib2xDb2RlLCBzdHJpbmdWYWx1ZSlcbiAgICB7XG4gICAgICAgIHN1cGVyKHRleHRQb3NpdGlvbiwgc3ltYm9sQ29kZSwgc3RyaW5nVmFsdWUsIHN0cmluZ1ZhbHVlLnJlcGxhY2UoLycvZywgJycpKTtcbiAgICB9XG59OyIsImltcG9ydCB7IFN5bWJvbEJhc2UgfSBmcm9tICcuL1N5bWJvbEJhc2UuanMnO1xuXG5leHBvcnQgY2xhc3MgQm9vbENvbnN0YW50IGV4dGVuZHMgU3ltYm9sQmFzZVxue1xuICAgIGNvbnN0cnVjdG9yKHRleHRQb3NpdGlvbiwgc3ltYm9sQ29kZSwgc3RyaW5nVmFsdWUpXG4gICAge1xuICAgICAgICBzdXBlcih0ZXh0UG9zaXRpb24sIHN5bWJvbENvZGUsIHN0cmluZ1ZhbHVlLCBzdHJpbmdWYWx1ZS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScpO1xuICAgIH1cbn07IiwiaW1wb3J0IHsgU3ltYm9sc0NvZGVzIH0gZnJvbSAnLi9TeW1ib2xzQ29kZXMuanMnO1xuaW1wb3J0IHsgS2V5V29yZHMgfSBmcm9tICcuL0tleVdvcmRzLmpzJztcbmltcG9ydCB7IFN5bWJvbCB9IGZyb20gJy4vU3ltYm9scy9TeW1ib2wuanMnO1xuaW1wb3J0IHsgTm1iRmxvYXQgfSBmcm9tICcuL1N5bWJvbHMvTm1iRmxvYXQuanMnO1xuaW1wb3J0IHsgTm1iSW50IH0gZnJvbSAnLi9TeW1ib2xzL05tYkludC5qcyc7XG5pbXBvcnQgeyBPbmVTeW1ib2wgfSBmcm9tICcuL1N5bWJvbHMvT25lU3ltYm9sLmpzJztcbmltcG9ydCB7IFN0cmluZ0NvbnN0YW50IH0gZnJvbSAnLi9TeW1ib2xzL1N0cmluZ0NvbnN0YW50LmpzJztcbmltcG9ydCB7IEJvb2xDb25zdGFudCB9IGZyb20gJy4vU3ltYm9scy9Cb29sQ29uc3RhbnQuanMnO1xuaW1wb3J0IHsgRXJyb3JzQ29kZXMgfSBmcm9tICcuLi9FcnJvcnMvRXJyb3JzQ29kZXMuanMnO1xuXG5leHBvcnQgY2xhc3MgTGV4aWNhbEFuYWx5emVyXG57XG4gICAgY29uc3RydWN0b3IoZmlsZUlPKVxuICAgIHtcbiAgICAgICAgdGhpcy5maWxlSU8gPSBmaWxlSU87XG4gICAgICAgIHRoaXMuZXJyb3JzQ29kZXMgPSBFcnJvcnNDb2RlcztcblxuICAgICAgICB0aGlzLnRva2VuID0gbnVsbDtcbiAgICAgICAgdGhpcy5jdXJyZW50V29yZCA9IG51bGw7XG4gICAgICAgIHRoaXMuY2hhciA9ICcgJztcbiAgICAgICAgdGhpcy5zeW1ib2wgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuTUFYX0lERU5UID0gNjQ7XG4gICAgICAgIHRoaXMua2V5V29yZHMgPSBuZXcgS2V5V29yZHMoKTtcbiAgICAgICAgdGhpcy53b3JkQnVmZmVyID0gbnVsbDtcbiAgICB9XG5cbiAgICBuZXh0U3ltKClcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLmNoYXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5za2lwV2hpdGVTcGFjZXMoKTtcbiAgICAgICAgdGhpcy50b2tlbiA9IHRoaXMuZmlsZUlPLmdldEN1cnJlbnRQb3NpdGlvbigpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnNjYW5TeW1ib2woKTtcbiAgICB9XG5cbiAgICBzY2FuU3ltYm9sKClcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLmNoYXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMud29yZEJ1ZmZlciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50V29yZCA9ICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50V29yZCA9IHRoaXMud29yZEJ1ZmZlcjtcbiAgICAgICAgICAgIHRoaXMud29yZEJ1ZmZlciA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyA8bGV0dGVyPlxuICAgICAgICBpZiAoL1thLXpdL2kuZXhlYyh0aGlzLmNoYXIpICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIHdoaWxlICgvXFx3L2kuZXhlYyh0aGlzLmNoYXIpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50V29yZCArPSB0aGlzLmNoYXI7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFyID0gdGhpcy5maWxlSU8ubmV4dENoKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN5bWJvbCh0aGlzLmtleVdvcmRzLmdldFN5bWJvbENvZGVCeUtleVdvcmQodGhpcy5jdXJyZW50V29yZCkpO1xuXG4gICAgICAgIC8vIDxkaWdpdD5cbiAgICAgICAgfSBlbHNlIGlmICgvW1xcZC5dLy5leGVjKHRoaXMuY2hhcikgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgdGhpcy5jdXJyZW50V29yZCArPSB0aGlzLmNoYXI7XG4gICAgICAgICAgICB0aGlzLmNoYXIgPSB0aGlzLmZpbGVJTy5uZXh0Q2goKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudFdvcmQgPT09ICcuLicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN5bWJvbCA9IFN5bWJvbHNDb2Rlcy50d29Qb2ludHM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3ltYm9sKHRoaXMuc3ltYm9sKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5jdXJyZW50V29yZCA9PT0gJy4nICYmIHRoaXMuY2hhciA9PT0gJy4nKSB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRXb3JkICs9IHRoaXMuY2hhcjtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXIgPSB0aGlzLmZpbGVJTy5uZXh0Q2goKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTeW1ib2woU3ltYm9sc0NvZGVzLnR3b1BvaW50cyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5jdXJyZW50V29yZCA9PT0gJy4nICYmIC9cXGQvLmV4ZWModGhpcy5jaGFyKSA9PT0gbnVsbCkge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zeW1ib2wgPSBTeW1ib2xzQ29kZXMucG9pbnQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3ltYm9sKHRoaXMuc3ltYm9sKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IHBvaW50UHJlc2VuY2UgPSB0aGlzLmN1cnJlbnRXb3JkID09PSAnLic7XG4gICAgICAgICAgICAgICAgbGV0IHByZXZpb3VzQ2hhciA9IG51bGw7XG4gICAgICAgICAgICAgICAgd2hpbGUgKC9bXFxkLl0vLmV4ZWModGhpcy5jaGFyKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGFyID09PSAnLicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcG9pbnRQcmVzZW5jZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50UHJlc2VuY2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNDaGFyID09PSAnLicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53b3JkQnVmZmVyID0gJy4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE5tYkludCh0aGlzLnRva2VuLCBTeW1ib2xzQ29kZXMuaW50QywgdGhpcy5jdXJyZW50V29yZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzQ2hhciA9IHRoaXMuY2hhcjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50V29yZCArPSB0aGlzLmNoYXI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhciA9IHRoaXMuZmlsZUlPLm5leHRDaCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBwb2ludFByZXNlbmNlID9cbiAgICAgICAgICAgICAgICAgICAgbmV3IE5tYkZsb2F0KHRoaXMudG9rZW4sIFN5bWJvbHNDb2Rlcy5mbG9hdEMsIHRoaXMuY3VycmVudFdvcmQpIDpcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5tYkludCh0aGlzLnRva2VuLCBTeW1ib2xzQ29kZXMuaW50QywgdGhpcy5jdXJyZW50V29yZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFdvcmQgKz0gdGhpcy5jaGFyO1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmNoYXIpIHtcbiAgICAgICAgICAgICAgICBjYXNlICc6JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyID0gdGhpcy5maWxlSU8ubmV4dENoKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoYXIgPT09ICc9Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50V29yZCArPSB0aGlzLmNoYXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXIgPSB0aGlzLmZpbGVJTy5uZXh0Q2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN5bWJvbChTeW1ib2xzQ29kZXMuYXNzaWduKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN5bWJvbChTeW1ib2xzQ29kZXMuY29sb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhciA9IHRoaXMuZmlsZUlPLm5leHRDaCgpO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuY2hhcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnPSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50V29yZCArPSB0aGlzLmNoYXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyID0gdGhpcy5maWxlSU8ubmV4dENoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3ltYm9sKFN5bWJvbHNDb2Rlcy5sYXRlckVxdWFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJz4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFdvcmQgKz0gdGhpcy5jaGFyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhciA9IHRoaXMuZmlsZUlPLm5leHRDaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN5bWJvbChTeW1ib2xzQ29kZXMubGF0ZXJHcmVhdGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3ltYm9sKFN5bWJvbHNDb2Rlcy5sYXRlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICc+JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyID0gdGhpcy5maWxlSU8ubmV4dENoKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoYXIgPT09ICc9Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50V29yZCArPSB0aGlzLmNoYXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXIgPSB0aGlzLmZpbGVJTy5uZXh0Q2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN5bWJvbChTeW1ib2xzQ29kZXMuZ3JlYXRlckVxdWFsKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN5bWJvbChTeW1ib2xzQ29kZXMuZ3JlYXRlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNhc2UgJy0nOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXIgPSB0aGlzLmZpbGVJTy5uZXh0Q2goKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3ltYm9sKFN5bWJvbHNDb2Rlcy5taW51cyk7XG5cbiAgICAgICAgICAgICAgICBjYXNlICcrJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyID0gdGhpcy5maWxlSU8ubmV4dENoKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN5bWJvbChTeW1ib2xzQ29kZXMucGx1cyk7XG5cbiAgICAgICAgICAgICAgICBjYXNlICcqJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyID0gdGhpcy5maWxlSU8ubmV4dENoKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN5bWJvbChTeW1ib2xzQ29kZXMuc3Rhcik7XG5cbiAgICAgICAgICAgICAgICBjYXNlICcvJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyID0gdGhpcy5maWxlSU8ubmV4dENoKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN5bWJvbChTeW1ib2xzQ29kZXMuc2xhc2gpO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnPSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhciA9IHRoaXMuZmlsZUlPLm5leHRDaCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTeW1ib2woU3ltYm9sc0NvZGVzLmVxdWFsKTtcblxuICAgICAgICAgICAgICAgIGNhc2UgJywnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXIgPSB0aGlzLmZpbGVJTy5uZXh0Q2goKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3ltYm9sKFN5bWJvbHNDb2Rlcy5jb21tYSk7XG5cbiAgICAgICAgICAgICAgICBjYXNlICc7JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyID0gdGhpcy5maWxlSU8ubmV4dENoKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN5bWJvbChTeW1ib2xzQ29kZXMuc2VtaWNvbG9uKTtcblxuICAgICAgICAgICAgICAgIGNhc2UgJ14nOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXIgPSB0aGlzLmZpbGVJTy5uZXh0Q2goKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3ltYm9sKFN5bWJvbHNDb2Rlcy5hcnJvdyk7XG5cbiAgICAgICAgICAgICAgICBjYXNlICcoJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyID0gdGhpcy5maWxlSU8ubmV4dENoKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzQ2hhciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50Q2hhciA9IHRoaXMuY3VycmVudFdvcmQ7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNraXAgY29tbWVudHNcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hhciA9PT0gJyonKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNDaGFyID0gY3VycmVudENoYXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudENoYXIgPSB0aGlzLmZpbGVJTy5uZXh0Q2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICEocHJldmlvdXNDaGFyID09PSAnKicgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q2hhciA9PT0gJyknKVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXIgPSB0aGlzLmZpbGVJTy5uZXh0Q2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2tpcFdoaXRlU3BhY2VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zY2FuU3ltYm9sKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTeW1ib2woU3ltYm9sc0NvZGVzLmxlZnRQYXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjYXNlICcpJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyID0gdGhpcy5maWxlSU8ubmV4dENoKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN5bWJvbChTeW1ib2xzQ29kZXMucmlnaHRQYXIpO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnWyc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhciA9IHRoaXMuZmlsZUlPLm5leHRDaCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTeW1ib2woU3ltYm9sc0NvZGVzLmxCcmFja2V0KTtcblxuICAgICAgICAgICAgICAgIGNhc2UgJ10nOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXIgPSB0aGlzLmZpbGVJTy5uZXh0Q2goKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3ltYm9sKFN5bWJvbHNDb2Rlcy5yQnJhY2tldCk7XG5cbiAgICAgICAgICAgICAgICBjYXNlICd7JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyID0gdGhpcy5maWxlSU8ubmV4dENoKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN5bWJvbChTeW1ib2xzQ29kZXMuZmxQYXIpO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnfSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhciA9IHRoaXMuZmlsZUlPLm5leHRDaCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTeW1ib2woU3ltYm9sc0NvZGVzLmZyUGFyKTtcblxuICAgICAgICAgICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXIgPSB0aGlzLmZpbGVJTy5uZXh0Q2goKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3ltYm9sKFN5bWJvbHNDb2Rlcy5sYXRlcik7XG5cbiAgICAgICAgICAgICAgICBjYXNlICc+JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyID0gdGhpcy5maWxlSU8ubmV4dENoKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN5bWJvbChTeW1ib2xzQ29kZXMuZ3JlYXRlcik7XG4gICAgICAgICAgICAgICAgY2FzZSAnQCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhciA9IHRoaXMuZmlsZUlPLm5leHRDaCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTeW1ib2woU3ltYm9sc0NvZGVzLmF0KTtcbiAgICAgICAgICAgICAgICBjYXNlIFwiJ1wiOlxuICAgICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXIgPSB0aGlzLmZpbGVJTy5uZXh0Q2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFdvcmQgKz0gdGhpcy5jaGFyO1xuICAgICAgICAgICAgICAgICAgICB9IHdoaWxlICh0aGlzLmNoYXIgIT09IFwiJ1wiKVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhciA9IHRoaXMuZmlsZUlPLm5leHRDaCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRXb3JkLmxlbmd0aCA9PT0gMyA/XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgT25lU3ltYm9sKHRoaXMudG9rZW4sIFN5bWJvbHNDb2Rlcy5jaGFyQywgdGhpcy5jdXJyZW50V29yZCkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFN0cmluZ0NvbnN0YW50KHRoaXMudG9rZW4sIFN5bWJvbHNDb2Rlcy5zdHJpbmdDLCB0aGlzLmN1cnJlbnRXb3JkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYWRkRm9yYmlkZGVuQ2hhcmFjdGVyRXJyb3IodGhpcy5jaGFyKTtcbiAgICAgICAgdGhpcy5jaGFyID0gdGhpcy5maWxlSU8ubmV4dENoKCk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGdldFN5bWJvbChzeW1ib2xDb2RlKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy50cnVlU3kgfHwgc3ltYm9sQ29kZSA9PT0gU3ltYm9sc0NvZGVzLmZhbHNlU3kgP1xuICAgICAgICAgICAgbmV3IEJvb2xDb25zdGFudCh0aGlzLnRva2VuLCBTeW1ib2xzQ29kZXMuYm9vbGVhbkMsIHRoaXMuY3VycmVudFdvcmQpIDpcbiAgICAgICAgICAgIG5ldyBTeW1ib2wodGhpcy50b2tlbiwgc3ltYm9sQ29kZSwgdGhpcy5jdXJyZW50V29yZCk7XG4gICAgfVxuXG4gICAgc2tpcFdoaXRlU3BhY2VzKClcbiAgICB7XG4gICAgICAgIHZhciB3cyA9IC9cXHMvO1xuXG4gICAgICAgIHdoaWxlICh3cy5leGVjKHRoaXMuY2hhcikgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhciA9IHRoaXMuZmlsZUlPLm5leHRDaCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkRm9yYmlkZGVuQ2hhcmFjdGVyRXJyb3IoY2hhcmFjdGVyKVxuICAgIHtcbiAgICAgICAgdGhpcy5maWxlSU8uYWRkRXJyb3IodGhpcy5lcnJvcnNDb2Rlcy5mb3JiaWRkZW5DaGFyYWN0ZXIsIGAgJyR7Y2hhcmFjdGVyfSdgLCB0aGlzLnRva2VuKVxuICAgIH1cbn07IiwiaW1wb3J0IHsgU3ltYm9sc0NvZGVzIH0gZnJvbSAnLi9TeW1ib2xzQ29kZXMuanMnO1xuXG5leHBvcnQgY2xhc3MgU3ltYm9sc0Rlc2NyaXB0aW9uXG57XG4gICAgY29uc3RydWN0b3IoKVxuICAgIHtcbiAgICAgICAgdGhpcy5zeW1ib2xDb2RlTWFwcGVyID0gbmV3IE1hcChbXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLnN0YXIsICcqJ10sXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLnNsYXNoLCAnLyddLFxuICAgICAgICAgICAgW1N5bWJvbHNDb2Rlcy5lcXVhbCwgJz0nXSxcbiAgICAgICAgICAgIFtTeW1ib2xzQ29kZXMuY29tbWEsICcsJ10sXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLnNlbWljb2xvbiwgJzsnXSxcbiAgICAgICAgICAgIFtTeW1ib2xzQ29kZXMuY29sb24sICc6J10sXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLnBvaW50LCAnLiddLFxuICAgICAgICAgICAgW1N5bWJvbHNDb2Rlcy5hcnJvdywgJ14nXSxcbiAgICAgICAgICAgIFtTeW1ib2xzQ29kZXMubGVmdFBhciwgJygnXSxcbiAgICAgICAgICAgIFtTeW1ib2xzQ29kZXMucmlnaHRQYXIsICcpJ10sXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLmxCcmFja2V0LCAnWyddLFxuICAgICAgICAgICAgW1N5bWJvbHNDb2Rlcy5yQnJhY2tldCwgJ10nXSxcbiAgICAgICAgICAgIFtTeW1ib2xzQ29kZXMuZmxQYXIsICd7J10sXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLmZyUGFyLCAnfSddLFxuICAgICAgICAgICAgW1N5bWJvbHNDb2Rlcy5sYXRlciwgJzwnXSxcbiAgICAgICAgICAgIFtTeW1ib2xzQ29kZXMuZ3JlYXRlciwgJz4nXSxcbiAgICAgICAgICAgIFtTeW1ib2xzQ29kZXMubGF0ZXJFcXVhbCwgJzw9J10sXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLmdyZWF0ZXJFcXVhbCwgJz49J10sXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLmxhdGVyR3JlYXRlciwgJzw+J10sXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLnBsdXMsICcrICddLFxuICAgICAgICAgICAgW1N5bWJvbHNDb2Rlcy5taW51cywgJy0gJ10sXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLmxDb21tZW50LCAnKConXSxcbiAgICAgICAgICAgIFtTeW1ib2xzQ29kZXMuckNvbW1lbnQsICcqKSddLFxuICAgICAgICAgICAgW1N5bWJvbHNDb2Rlcy5hc3NpZ24sICc6PSddLFxuICAgICAgICAgICAgW1N5bWJvbHNDb2Rlcy50d29Qb2ludHMsICcuLiddLFxuICAgICAgICAgICAgW1N5bWJvbHNDb2Rlcy5pZGVudCwgJ0lkZW50aWZpZXInXSxcbiAgICAgICAgICAgIFtTeW1ib2xzQ29kZXMuZmxvYXRDLCAnRmxvYXQgQ29uc3RhbnQnXSxcbiAgICAgICAgICAgIFtTeW1ib2xzQ29kZXMuaW50QywgJ0ludGVnZXIgQ29uc3RhbnQnXSxcbiAgICAgICAgICAgIFtTeW1ib2xzQ29kZXMuY2hhckMsICdDaGFyYWN0ZXIgQ29uc3RhbnQnXSxcbiAgICAgICAgICAgIFtTeW1ib2xzQ29kZXMuY2FzZVN5LCAnY2FzZSddLFxuICAgICAgICAgICAgW1N5bWJvbHNDb2Rlcy5lbHNlU3ksICdlbHNlJ10sXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLmZpbGVTeSwgJ2ZpbGUnXSxcbiAgICAgICAgICAgIFtTeW1ib2xzQ29kZXMuZ290b1N5LCAnZ290byddLFxuICAgICAgICAgICAgW1N5bWJvbHNDb2Rlcy50aGVuU3ksICd0aGVuJ10sXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLnVudGlsU3ksICd1bnRpbCddLFxuICAgICAgICAgICAgW1N5bWJvbHNDb2Rlcy5kb1N5LCAnZG8nXSxcbiAgICAgICAgICAgIFtTeW1ib2xzQ29kZXMud2l0aFN5LCAnd2l0aCddLFxuICAgICAgICAgICAgW1N5bWJvbHNDb2Rlcy5pZlN5LCAnaWYnXSxcbiAgICAgICAgICAgIFtTeW1ib2xzQ29kZXMub2ZTeSwgJ29mJ10sXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLm9yU3ksICdvciddLFxuICAgICAgICAgICAgW1N5bWJvbHNDb2Rlcy5pblN5LCAnaW4nXSxcbiAgICAgICAgICAgIFtTeW1ib2xzQ29kZXMudG9TeSwgJ3RvJ10sXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLmVuZFN5LCAnZW5kJ10sXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLnZhclN5LCAndmFyJ10sXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLmRpdlN5LCAnZGl2J10sXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLmFuZFN5LCAnYW5kJ10sXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLm5vdFN5LCAnbm90J10sXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLmZvclN5LCAnZm9yJ10sXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLm1vZFN5LCAnbW9kJ10sXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLm5pbFN5LCAnbmlsJ10sXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLnNldFN5LCAnc2V0J10sXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLnR5cGVTeSwgJ3R5cGUnXSxcbiAgICAgICAgICAgIFtTeW1ib2xzQ29kZXMucmVhbFN5LCAncmVhbCddLFxuICAgICAgICAgICAgW1N5bWJvbHNDb2Rlcy5jaGFyU3ksICdjaGFyJ10sXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLmJlZ2luU3ksICdiZWdpbiddLFxuICAgICAgICAgICAgW1N5bWJvbHNDb2Rlcy53aGlsZVN5LCAnd2hpbGUnXSxcbiAgICAgICAgICAgIFtTeW1ib2xzQ29kZXMuYXJyYXlTeSwgJ2FycmF5J10sXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLmNvbnN0U3ksICdjb25zdCddLFxuICAgICAgICAgICAgW1N5bWJvbHNDb2Rlcy5sYWJlbFN5LCAnbGFiZWwnXSxcbiAgICAgICAgICAgIFtTeW1ib2xzQ29kZXMuZG93bnRvU3ksICdkb3dudG8nXSxcbiAgICAgICAgICAgIFtTeW1ib2xzQ29kZXMuc3RyaW5nU3ksICdzdHJpbmcnXSxcbiAgICAgICAgICAgIFtTeW1ib2xzQ29kZXMucGFja2VkU3ksICdwYWNrZWQnXSxcbiAgICAgICAgICAgIFtTeW1ib2xzQ29kZXMucmVjb3JkU3ksICdyZWNvcmQnXSxcbiAgICAgICAgICAgIFtTeW1ib2xzQ29kZXMucmVwZWF0U3ksICdyZXBlYXQnXSxcbiAgICAgICAgICAgIFtTeW1ib2xzQ29kZXMuaW50ZWdlclN5LCAnaW50ZWdlciddLFxuICAgICAgICAgICAgW1N5bWJvbHNDb2Rlcy5wcm9ncmFtU3ksICdwcm9ncmFtJ10sXG4gICAgICAgICAgICBbU3ltYm9sc0NvZGVzLmZ1bmN0aW9uU3ksICdmdW5jdGlvbiddLFxuICAgICAgICAgICAgW1N5bWJvbHNDb2Rlcy5wcm9jZWR1cmVTeSwgJ3Byb2NlZHVyZSddLFxuICAgICAgICBdKTtcbiAgICB9XG5cbiAgICBnZXRTeW1ib2xUZXh0QnlDb2RlKHN5bWJvbENvZGUpXG4gICAge1xuICAgICAgICByZXR1cm4gIHRoaXMuc3ltYm9sQ29kZU1hcHBlci5oYXMoc3ltYm9sQ29kZSkgP1xuICAgICAgICAgICAgICAgIHRoaXMuc3ltYm9sQ29kZU1hcHBlci5nZXQoc3ltYm9sQ29kZSkgOlxuICAgICAgICAgICAgICAgIG51bGw7XG4gICAgfVxufSIsImV4cG9ydCBjbGFzcyBUcmVlTm9kZUJhc2VcbntcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2wpXG4gICAge1xuICAgICAgICB0aGlzLnN5bWJvbCA9IHN5bWJvbDtcbiAgICB9XG59IiwiaW1wb3J0IHsgVHJlZU5vZGVCYXNlIH0gZnJvbSAnLi9UcmVlTm9kZUJhc2UuanMnO1xuXG5leHBvcnQgY2xhc3MgQXNzaWduYXRpb24gZXh0ZW5kcyBUcmVlTm9kZUJhc2VcbntcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2wsIGRlc3RpbmF0aW9uLCBzb3VyY2VFeHByZXNzaW9uKVxuICAgIHtcbiAgICAgICAgc3VwZXIoc3ltYm9sKTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICB0aGlzLnNvdXJjZUV4cHJlc3Npb24gPSBzb3VyY2VFeHByZXNzaW9uO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBUcmVlTm9kZUJhc2UgfSBmcm9tICcuLi9UcmVlTm9kZUJhc2UuanMnO1xuXG5leHBvcnQgY2xhc3MgSW5kZXhlZElkZW50aWZpZXIgZXh0ZW5kcyBUcmVlTm9kZUJhc2VcbntcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2wsIGlkZW50aWZpZXIsIGluZGV4UmluZylcbiAgICB7XG4gICAgICAgIHN1cGVyKHN5bWJvbCk7XG4gICAgICAgIHRoaXMuaWRlbnRpZmllciA9IGlkZW50aWZpZXI7XG4gICAgICAgIHRoaXMuaW5kZXhSaW5nID0gaW5kZXhSaW5nO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBUcmVlTm9kZUJhc2UgfSBmcm9tICcuLi9UcmVlTm9kZUJhc2UuanMnO1xuXG5leHBvcnQgY2xhc3MgSW5kZXhSaW5nIGV4dGVuZHMgVHJlZU5vZGVCYXNlXG57XG4gICAgY29uc3RydWN0b3Ioc3ltYm9sLCBpbmRleEV4cHJlc3Npb24sIGluZGV4UmluZyA9IG51bGwpXG4gICAge1xuICAgICAgICBzdXBlcihzeW1ib2wpO1xuICAgICAgICB0aGlzLmluZGV4RXhwcmVzc2lvbiA9IGluZGV4RXhwcmVzc2lvbjtcbiAgICAgICAgdGhpcy5pbmRleFJpbmcgPSBpbmRleFJpbmc7XG4gICAgICAgIHRoaXMuZXZhbHVhdGVkSW5kZXhFeHByZXNzaW9uID0gbnVsbDtcbiAgICB9XG5cbiAgICBhcHBlbmRJbmRleFJpbmcoaW5kZXhSaW5nKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMuaW5kZXhSaW5nID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmluZGV4UmluZyA9IGluZGV4UmluZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaW5kZXhSaW5nLmFwcGVuZEluZGV4UmluZyhpbmRleFJpbmcpO1xuICAgICAgICB9XG4gICAgfVxufSIsImltcG9ydCB7IFRyZWVOb2RlQmFzZSB9IGZyb20gJy4vVHJlZU5vZGVCYXNlLmpzJztcblxuZXhwb3J0IGNsYXNzIEdldEJ5UG9pbnRlciBleHRlbmRzIFRyZWVOb2RlQmFzZVxue1xuICAgIGNvbnN0cnVjdG9yKHN5bWJvbCwgcG9pbnRlcilcbiAgICB7XG4gICAgICAgIHN1cGVyKHN5bWJvbCk7XG4gICAgICAgIHRoaXMucG9pbnRlciA9IHBvaW50ZXI7XG4gICAgfVxufVxuXG4iLCJpbXBvcnQgeyBUcmVlTm9kZUJhc2UgfSBmcm9tICcuL1RyZWVOb2RlQmFzZS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBHZXRQb2ludGVyIGV4dGVuZHMgVHJlZU5vZGVCYXNlXG57XG4gICAgY29uc3RydWN0b3Ioc3ltYm9sLCBpZGVudGlmaWVyKVxuICAgIHtcbiAgICAgICAgc3VwZXIoc3ltYm9sKTtcbiAgICAgICAgdGhpcy5pZGVudGlmaWVyID0gaWRlbnRpZmllcjtcbiAgICB9XG59IiwiaW1wb3J0IHsgVHJlZU5vZGVCYXNlIH0gZnJvbSAnLi9UcmVlTm9kZUJhc2UuanMnO1xuXG5leHBvcnQgY2xhc3MgVGFrZUZpZWxkIGV4dGVuZHMgVHJlZU5vZGVCYXNlXG57XG4gICAgY29uc3RydWN0b3Ioc3ltYm9sLCBiYXNlRXhwcmVzc2lvbiwgc3ViRmllbGQpXG4gICAge1xuICAgICAgICBzdXBlcihzeW1ib2wpO1xuICAgICAgICB0aGlzLmJhc2VFeHByZXNzaW9uID0gYmFzZUV4cHJlc3Npb247XG4gICAgICAgIHRoaXMuc3ViRmllbGQgPSBzdWJGaWVsZDtcbiAgICB9XG59IiwiaW1wb3J0IHsgVHJlZU5vZGVCYXNlIH0gZnJvbSAnLi9UcmVlTm9kZUJhc2UuanMnO1xuXG5leHBvcnQgY2xhc3MgQmluYXJ5T3BlcmF0aW9uIGV4dGVuZHMgVHJlZU5vZGVCYXNlXG57XG4gICAgY29uc3RydWN0b3Ioc3ltYm9sLCBsZWZ0LCByaWdodClcbiAgICB7XG4gICAgICAgIHN1cGVyKHN5bWJvbCk7XG4gICAgICAgIHRoaXMubGVmdCA9IGxlZnQ7XG4gICAgICAgIHRoaXMucmlnaHQgPSByaWdodDtcbiAgICB9XG59IiwiaW1wb3J0IHsgQmluYXJ5T3BlcmF0aW9uIH0gZnJvbSAnLi9CaW5hcnlPcGVyYXRpb24uanMnO1xuXG5leHBvcnQgY2xhc3MgTXVsdGlwbGljYXRpb24gZXh0ZW5kcyBCaW5hcnlPcGVyYXRpb25cbntcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2wsIGxlZnQsIHJpZ2h0KVxuICAgIHtcbiAgICAgICAgc3VwZXIoc3ltYm9sLCBsZWZ0LCByaWdodClcbiAgICB9XG59IiwiaW1wb3J0IHsgQmluYXJ5T3BlcmF0aW9uIH0gZnJvbSAnLi9CaW5hcnlPcGVyYXRpb24uanMnO1xuXG5leHBvcnQgY2xhc3MgRGl2aXNpb24gZXh0ZW5kcyBCaW5hcnlPcGVyYXRpb25cbntcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2wsIGxlZnQsIHJpZ2h0KVxuICAgIHtcbiAgICAgICAgc3VwZXIoc3ltYm9sLCBsZWZ0LCByaWdodClcbiAgICB9XG59IiwiaW1wb3J0IHsgQmluYXJ5T3BlcmF0aW9uIH0gZnJvbSAnLi9CaW5hcnlPcGVyYXRpb24uanMnO1xuXG5leHBvcnQgY2xhc3MgQWRkaXRpb24gZXh0ZW5kcyBCaW5hcnlPcGVyYXRpb25cbntcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2wsIGxlZnQsIHJpZ2h0KVxuICAgIHtcbiAgICAgICAgc3VwZXIoc3ltYm9sLCBsZWZ0LCByaWdodClcbiAgICB9XG59IiwiaW1wb3J0IHsgQmluYXJ5T3BlcmF0aW9uIH0gZnJvbSAnLi9CaW5hcnlPcGVyYXRpb24uanMnO1xuXG5leHBvcnQgY2xhc3MgU3VidHJhY3Rpb24gZXh0ZW5kcyBCaW5hcnlPcGVyYXRpb25cbntcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2wsIGxlZnQsIHJpZ2h0KVxuICAgIHtcbiAgICAgICAgc3VwZXIoc3ltYm9sLCBsZWZ0LCByaWdodClcbiAgICB9XG59IiwiaW1wb3J0IHsgVHJlZU5vZGVCYXNlIH0gZnJvbSAnLi9UcmVlTm9kZUJhc2UuanMnO1xuaW1wb3J0IHsgU3ltYm9sc0NvZGVzIH0gZnJvbSAnLi4vLi4vTGV4aWNhbEFuYWx5emVyL1N5bWJvbHNDb2Rlcy5qcyc7XG5pbXBvcnQgeyBUeXBlc0lkcyB9IGZyb20gJy4uLy4uL1NlbWFudGljcy9WYXJpYWJsZXMvVHlwZXNJZHMuanMnO1xuXG5leHBvcnQgY2xhc3MgQ29uc3RhbnQgZXh0ZW5kcyBUcmVlTm9kZUJhc2VcbntcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2wpXG4gICAge1xuICAgICAgICBzdXBlcihzeW1ib2wpO1xuXG4gICAgICAgIGxldCB0eXBlSWQgPSBudWxsO1xuXG4gICAgICAgIHN3aXRjaChzeW1ib2wuc3ltYm9sQ29kZSkge1xuICAgICAgICAgICAgY2FzZSBTeW1ib2xzQ29kZXMuaW50QzpcbiAgICAgICAgICAgICAgICB0eXBlSWQgPSBUeXBlc0lkcy5JTlRFR0VSO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTeW1ib2xzQ29kZXMuZmxvYXRDOlxuICAgICAgICAgICAgICAgIHR5cGVJZCA9IFR5cGVzSWRzLlJFQUw7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN5bWJvbHNDb2Rlcy5jaGFyQzpcbiAgICAgICAgICAgICAgICB0eXBlSWQgPSBUeXBlc0lkcy5DSEFSO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTeW1ib2xzQ29kZXMuc3RyaW5nQzpcbiAgICAgICAgICAgICAgICB0eXBlSWQgPSBUeXBlc0lkcy5TVFJJTkc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN5bWJvbHNDb2Rlcy5ib29sZWFuQzpcbiAgICAgICAgICAgICAgICB0eXBlSWQgPSBUeXBlc0lkcy5CT09MRUFOO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTeW1ib2xzQ29kZXMuaWRlbnQ6XG4gICAgICAgICAgICAgICAgdHlwZUlkID0gVHlwZXNJZHMuRU5VTTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHlwZUlkID0gdHlwZUlkO1xuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgVHlwZXNJZHMgPSB7XG4gICAgSU5URUdFUjogMCxcbiAgICBSRUFMOiAxLFxuICAgIENIQVI6IDIsXG4gICAgQVJSQVk6IDMsXG4gICAgUkVDT1JEOiA0LFxuICAgIEVOVU06IDUsXG4gICAgQk9PTEVBTjogNixcbiAgICBTVFJJTkc6IDcsXG4gICAgUE9JTlRFUjogOCxcbiAgICBBUFBMSUVEX05BTUVEOiA5LFxuICAgIFBST0NFRFVSRTogMTAsXG4gICAgRlVOQ1RJT046IDExXG59OyIsImltcG9ydCB7IFRyZWVOb2RlQmFzZSB9IGZyb20gJy4vVHJlZU5vZGVCYXNlLmpzJztcblxuZXhwb3J0IGNsYXNzIElkZW50aWZpZXIgZXh0ZW5kcyBUcmVlTm9kZUJhc2VcbntcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2wpXG4gICAge1xuICAgICAgICBzdXBlcihzeW1ib2wpO1xuICAgIH1cbn1cblxuIiwiaW1wb3J0IHsgVHJlZU5vZGVCYXNlIH0gZnJvbSAnLi9UcmVlTm9kZUJhc2UuanMnO1xuXG5leHBvcnQgY2xhc3MgRnVuY3Rpb25DYWxsIGV4dGVuZHMgVHJlZU5vZGVCYXNlXG57XG4gICAgY29uc3RydWN0b3Ioc3ltYm9sLCBpZGVudGlmaWVyQnJhbmNoLCBwYXJhbWV0ZXJzID0gW10pXG4gICAge1xuICAgICAgICBzdXBlcihzeW1ib2wpO1xuICAgICAgICB0aGlzLmlkZW50aWZpZXJCcmFuY2ggPSBpZGVudGlmaWVyQnJhbmNoO1xuICAgICAgICB0aGlzLnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBUcmVlTm9kZUJhc2UgfSBmcm9tICcuLi9UcmVlTm9kZUJhc2UuanMnO1xuXG5leHBvcnQgY2xhc3MgVHlwZUJhc2UgZXh0ZW5kcyBUcmVlTm9kZUJhc2VcbntcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2wsIHR5cGVJZClcbiAgICB7XG4gICAgICAgIHN1cGVyKHN5bWJvbCk7XG4gICAgICAgIHRoaXMudHlwZUlkID0gdHlwZUlkO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFR5cGVCYXNlIH0gZnJvbSAnLi9UeXBlQmFzZS5qcyc7XG5pbXBvcnQgeyBUeXBlc0lkcyB9IGZyb20gJy4uLy4uLy4uL1NlbWFudGljcy9WYXJpYWJsZXMvVHlwZXNJZHMuanMnO1xuXG5leHBvcnQgY2xhc3MgU2NhbGFyVHlwZSBleHRlbmRzIFR5cGVCYXNlXG57XG4gICAgY29uc3RydWN0b3Ioc3ltYm9sLCB0eXBlSWQpXG4gICAge1xuICAgICAgICBzdXBlcihzeW1ib2wsIHR5cGVJZCk7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKVxuICAgIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGVJZCkge1xuICAgICAgICAgICAgY2FzZSBUeXBlc0lkcy5CT09MRUFOOlxuICAgICAgICAgICAgICAgIHJldHVybiAnYm9vbGVhbic7XG4gICAgICAgICAgICBjYXNlIFR5cGVzSWRzLkNIQVI6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdjaGFyJztcbiAgICAgICAgICAgIGNhc2UgVHlwZXNJZHMuSU5URUdFUjpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2ludGVnZXInO1xuICAgICAgICAgICAgY2FzZSBUeXBlc0lkcy5SRUFMOlxuICAgICAgICAgICAgICAgIHJldHVybiAncmVhbCc7XG4gICAgICAgICAgICBjYXNlIFR5cGVzSWRzLlNUUklORzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3N0cmluZyc7XG4gICAgICAgIH1cbiAgICB9XG59IiwiaW1wb3J0IHsgVHlwZUJhc2UgfSBmcm9tICcuL1R5cGVCYXNlLmpzJztcbmltcG9ydCB7IFR5cGVzSWRzIH0gZnJvbSAnLi4vLi4vLi4vU2VtYW50aWNzL1ZhcmlhYmxlcy9UeXBlc0lkcy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBSZWNvcmRUeXBlIGV4dGVuZHMgVHlwZUJhc2VcbntcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2wsIHR5cGVzQXJyYXkpXG4gICAge1xuICAgICAgICBzdXBlcihzeW1ib2wsIFR5cGVzSWRzLlJFQ09SRCk7XG5cbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLnR5cGVzTGlzdCA9IHt9O1xuXG4gICAgICAgIHR5cGVzQXJyYXkuZm9yRWFjaChlbGVtID0+IHtcbiAgICAgICAgICAgIGxldCB0eXBlID0gZWxlbS50eXBlO1xuICAgICAgICAgICAgZWxlbS5pZGVudGlmaWVycy5mb3JFYWNoKGlkZW50aWZpZXIgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBwcm9wZXJ0eU5hbWUgPSBpZGVudGlmaWVyLnN5bWJvbC52YWx1ZTtcbiAgICAgICAgICAgICAgICBzZWxmLnR5cGVzTGlzdFtwcm9wZXJ0eU5hbWVdID0gdHlwZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIHRvU3RyaW5nKClcbiAgICB7XG4gICAgICAgIGxldCBwcm9wZXJ0aWVzID0gW107XG4gICAgICAgIGxldCBwcm9wZXJ0eU5hbWUgPSBudWxsO1xuXG4gICAgICAgIGZvciAocHJvcGVydHlOYW1lIGluIHRoaXMudHlwZXNMaXN0KSB7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzLnB1c2goYCR7cHJvcGVydHlOYW1lfTogYCArIHRoaXMudHlwZXNMaXN0W3Byb3BlcnR5TmFtZV0udG9TdHJpbmcoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdHlwZXMgPSBwcm9wZXJ0aWVzLmpvaW4oJywgJyk7XG4gICAgICAgIHJldHVybiBgcmVjb3JkKCR7dHlwZXN9KWA7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgVHlwZUJhc2UgfSBmcm9tICcuL1R5cGVCYXNlLmpzJztcbmltcG9ydCB7IFR5cGVzSWRzIH0gZnJvbSAnLi4vLi4vLi4vU2VtYW50aWNzL1ZhcmlhYmxlcy9UeXBlc0lkcy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBBcHBsaWVkTmFtZWRUeXBlIGV4dGVuZHMgVHlwZUJhc2VcbntcbiAgICAvKipcbiAgICAgKiBTeW1ib2wgbXVzdCBiZSBhbiBpZGVudGlmaWVyXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc3ltYm9sKVxuICAgIHtcbiAgICAgICAgc3VwZXIoc3ltYm9sLCBUeXBlc0lkcy5BUFBMSUVEX05BTUVEKTtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5zeW1ib2wuc3RyaW5nVmFsdWU7XG4gICAgfVxufSIsImltcG9ydCB7IFRyZWVOb2RlQmFzZSB9IGZyb20gJy4vVHJlZU5vZGVCYXNlLmpzJztcblxuZXhwb3J0IGNsYXNzIFZhcmlhYmxlc0RlY2xhcmF0aW9uIGV4dGVuZHMgVHJlZU5vZGVCYXNlXG57XG4gICAgY29uc3RydWN0b3Ioc3ltYm9sLCBpZGVudGlmaWVycywgdmFyaWFibGVzVHlwZSwgaW5pdGlhbFZhbHVlKVxuICAgIHtcbiAgICAgICAgc3VwZXIoc3ltYm9sKTtcbiAgICAgICAgdGhpcy5pZGVudGlmaWVycyA9IGlkZW50aWZpZXJzO1xuICAgICAgICB0aGlzLnZhcmlhYmxlc1R5cGUgPSB2YXJpYWJsZXNUeXBlO1xuICAgICAgICB0aGlzLmluaXRpYWxWYWx1ZSA9IGluaXRpYWxWYWx1ZTtcbiAgICB9XG59XG5cbiIsImltcG9ydCB7IFRyZWVOb2RlQmFzZSB9IGZyb20gJy4vVHJlZU5vZGVCYXNlLmpzJztcblxuZXhwb3J0IGNsYXNzIENvbnN0YW50RGVjbGFyYXRpb24gZXh0ZW5kcyBUcmVlTm9kZUJhc2VcbntcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2wsIGlkZW50aWZpZXIsIHZhbHVlLCB0eXBlID0gbnVsbClcbiAgICB7XG4gICAgICAgIHN1cGVyKHN5bWJvbCk7XG4gICAgICAgIHRoaXMuaWRlbnRpZmllciA9IGlkZW50aWZpZXI7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB9XG59IiwiaW1wb3J0IHsgVHJlZU5vZGVCYXNlIH0gZnJvbSAnLi9UcmVlTm9kZUJhc2UuanMnO1xuXG5leHBvcnQgY2xhc3MgVHlwZURlY2xhcmF0aW9uIGV4dGVuZHMgVHJlZU5vZGVCYXNlXG57XG4gICAgY29uc3RydWN0b3Ioc3ltYm9sLCBpZGVudGlmaWVyLCB0eXBlKVxuICAgIHtcbiAgICAgICAgc3VwZXIoc3ltYm9sKTtcbiAgICAgICAgdGhpcy5pZGVudGlmaWVyID0gaWRlbnRpZmllcjtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB9XG59XG5cbiIsImltcG9ydCB7IFRyZWVOb2RlQmFzZSB9IGZyb20gJy4vVHJlZU5vZGVCYXNlLmpzJztcblxuZXhwb3J0IGNsYXNzIENvbXBvdW5kT3BlcmF0b3IgZXh0ZW5kcyBUcmVlTm9kZUJhc2VcbntcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2wpXG4gICAge1xuICAgICAgICBzdXBlcihzeW1ib2wpO1xuICAgICAgICB0aGlzLnNlbnRlbmNlcyA9IFtdO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBUcmVlTm9kZUJhc2UgfSBmcm9tICcuL1RyZWVOb2RlQmFzZS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBJbXBsaWNhdGlvbiBleHRlbmRzIFRyZWVOb2RlQmFzZVxue1xuICAgIGNvbnN0cnVjdG9yKHN5bWJvbCwgY29uZGl0aW9uLCBsZWZ0LCByaWdodClcbiAgICB7XG4gICAgICAgIHN1cGVyKHN5bWJvbCk7XG4gICAgICAgIHRoaXMuY29uZGl0aW9uID0gY29uZGl0aW9uO1xuICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xuICAgICAgICB0aGlzLnJpZ2h0ID0gcmlnaHQ7XG4gICAgfVxufSIsImltcG9ydCB7IEJpbmFyeU9wZXJhdGlvbiB9IGZyb20gJy4vQmluYXJ5T3BlcmF0aW9uLmpzJztcblxuZXhwb3J0IGNsYXNzIEludGVnZXJEaXZpc2lvbiBleHRlbmRzIEJpbmFyeU9wZXJhdGlvblxue1xuICAgIGNvbnN0cnVjdG9yKHN5bWJvbCwgbGVmdCwgcmlnaHQpXG4gICAge1xuICAgICAgICBzdXBlcihzeW1ib2wsIGxlZnQsIHJpZ2h0KVxuICAgIH1cbn0iLCJpbXBvcnQgeyBCaW5hcnlPcGVyYXRpb24gfSBmcm9tICcuL0JpbmFyeU9wZXJhdGlvbi5qcyc7XG5cbmV4cG9ydCBjbGFzcyBNb2R1bG8gZXh0ZW5kcyBCaW5hcnlPcGVyYXRpb25cbntcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2wsIGxlZnQsIHJpZ2h0KVxuICAgIHtcbiAgICAgICAgc3VwZXIoc3ltYm9sLCBsZWZ0LCByaWdodClcbiAgICB9XG59IiwiaW1wb3J0IHsgQmluYXJ5T3BlcmF0aW9uIH0gZnJvbSAnLi9CaW5hcnlPcGVyYXRpb24uanMnO1xuXG5leHBvcnQgY2xhc3MgTG9naWNhbEFuZCBleHRlbmRzIEJpbmFyeU9wZXJhdGlvblxue1xuICAgIGNvbnN0cnVjdG9yKHN5bWJvbCwgbGVmdCwgcmlnaHQpXG4gICAge1xuICAgICAgICBzdXBlcihzeW1ib2wsIGxlZnQsIHJpZ2h0KVxuICAgIH1cbn0iLCJpbXBvcnQgeyBCaW5hcnlPcGVyYXRpb24gfSBmcm9tICcuL0JpbmFyeU9wZXJhdGlvbi5qcyc7XG5cbmV4cG9ydCBjbGFzcyBMb2dpY2FsT3IgZXh0ZW5kcyBCaW5hcnlPcGVyYXRpb25cbntcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2wsIGxlZnQsIHJpZ2h0KVxuICAgIHtcbiAgICAgICAgc3VwZXIoc3ltYm9sLCBsZWZ0LCByaWdodClcbiAgICB9XG59IiwiaW1wb3J0IHsgVHJlZU5vZGVCYXNlIH0gZnJvbSAnLi9UcmVlTm9kZUJhc2UuanMnO1xuXG5leHBvcnQgY2xhc3MgVW5hcnlNaW51cyBleHRlbmRzIFRyZWVOb2RlQmFzZVxue1xuICAgIGNvbnN0cnVjdG9yKHN5bWJvbCwgdmFsdWUpXG4gICAge1xuICAgICAgICBzdXBlcihzeW1ib2wpO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxufSIsImltcG9ydCB7IFRyZWVOb2RlQmFzZSB9IGZyb20gJy4vVHJlZU5vZGVCYXNlLmpzJztcblxuZXhwb3J0IGNsYXNzIE5vdCBleHRlbmRzIFRyZWVOb2RlQmFzZVxue1xuICAgIGNvbnN0cnVjdG9yKHN5bWJvbCwgdmFsdWUpXG4gICAge1xuICAgICAgICBzdXBlcihzeW1ib2wpO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxufSIsImltcG9ydCB7IFRyZWVOb2RlQmFzZSB9IGZyb20gJy4vVHJlZU5vZGVCYXNlLmpzJztcblxuZXhwb3J0IGNsYXNzIFByb2dyYW1CYXNlIGV4dGVuZHMgVHJlZU5vZGVCYXNlXG57XG4gICAgY29uc3RydWN0b3Ioc3ltYm9sKVxuICAgIHtcbiAgICAgICAgc3VwZXIoc3ltYm9sKTtcbiAgICAgICAgdGhpcy5uYW1lID0gbnVsbDtcbiAgICAgICAgdGhpcy52YXJzID0gW107XG4gICAgICAgIHRoaXMucHJvY2VkdXJlcyA9IHt9O1xuICAgICAgICB0aGlzLmZ1bmN0aW9ucyA9IHt9O1xuICAgICAgICB0aGlzLnNlbnRlbmNlcyA9IFtdO1xuICAgICAgICB0aGlzLnR5cGVzID0gW107XG4gICAgfVxuXG4gICAgZ2V0VHlwZSgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlO1xuICAgIH1cbn07IiwiaW1wb3J0IHsgUHJvZ3JhbUJhc2UgfSBmcm9tICcuL1Byb2dyYW1CYXNlLmpzJztcblxuZXhwb3J0IGNsYXNzIFByb2dyYW0gZXh0ZW5kcyBQcm9ncmFtQmFzZVxue1xuICAgIGNvbnN0cnVjdG9yKHN5bWJvbClcbiAgICB7XG4gICAgICAgIHN1cGVyKHN5bWJvbCk7XG4gICAgfVxufSIsImltcG9ydCB7IFByb2dyYW1CYXNlIH0gZnJvbSAnLi9Qcm9ncmFtQmFzZS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBQcm9jZWR1cmUgZXh0ZW5kcyBQcm9ncmFtQmFzZVxue1xuICAgIGNvbnN0cnVjdG9yKHN5bWJvbCwgdHlwZSA9IG51bGwpXG4gICAge1xuICAgICAgICBzdXBlcihzeW1ib2wpO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIH1cbn07IiwiaW1wb3J0IHsgUHJvZ3JhbUJhc2UgfSBmcm9tICcuL1Byb2dyYW1CYXNlLmpzJztcblxuZXhwb3J0IGNsYXNzIEZ1bmN0aW9uIGV4dGVuZHMgUHJvZ3JhbUJhc2VcbntcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2wsIHR5cGUgPSBudWxsKVxuICAgIHtcbiAgICAgICAgc3VwZXIoc3ltYm9sKTtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB9XG59IiwiaW1wb3J0IHsgQmluYXJ5T3BlcmF0aW9uIH0gZnJvbSAnLi4vQmluYXJ5T3BlcmF0aW9uLmpzJztcblxuZXhwb3J0IGNsYXNzIEluIGV4dGVuZHMgQmluYXJ5T3BlcmF0aW9uXG57XG4gICAgY29uc3RydWN0b3Ioc3ltYm9sLCBsZWZ0LCByaWdodClcbiAgICB7XG4gICAgICAgIHN1cGVyKHN5bWJvbCwgbGVmdCwgcmlnaHQpXG4gICAgfVxufSIsImltcG9ydCB7IEJpbmFyeU9wZXJhdGlvbiB9IGZyb20gJy4uL0JpbmFyeU9wZXJhdGlvbi5qcyc7XG5cbmV4cG9ydCBjbGFzcyBFcXVhbCBleHRlbmRzIEJpbmFyeU9wZXJhdGlvblxue1xuICAgIGNvbnN0cnVjdG9yKHN5bWJvbCwgbGVmdCwgcmlnaHQpXG4gICAge1xuICAgICAgICBzdXBlcihzeW1ib2wsIGxlZnQsIHJpZ2h0KVxuICAgIH1cbn0iLCJpbXBvcnQgeyBCaW5hcnlPcGVyYXRpb24gfSBmcm9tICcuLi9CaW5hcnlPcGVyYXRpb24uanMnO1xuXG5leHBvcnQgY2xhc3MgTm90RXF1YWwgZXh0ZW5kcyBCaW5hcnlPcGVyYXRpb25cbntcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2wsIGxlZnQsIHJpZ2h0KVxuICAgIHtcbiAgICAgICAgc3VwZXIoc3ltYm9sLCBsZWZ0LCByaWdodClcbiAgICB9XG59IiwiaW1wb3J0IHsgQmluYXJ5T3BlcmF0aW9uIH0gZnJvbSAnLi4vQmluYXJ5T3BlcmF0aW9uLmpzJztcblxuZXhwb3J0IGNsYXNzIExlc3MgZXh0ZW5kcyBCaW5hcnlPcGVyYXRpb25cbntcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2wsIGxlZnQsIHJpZ2h0KVxuICAgIHtcbiAgICAgICAgc3VwZXIoc3ltYm9sLCBsZWZ0LCByaWdodClcbiAgICB9XG59IiwiaW1wb3J0IHsgQmluYXJ5T3BlcmF0aW9uIH0gZnJvbSAnLi4vQmluYXJ5T3BlcmF0aW9uLmpzJztcblxuZXhwb3J0IGNsYXNzIEdyZWF0ZXIgZXh0ZW5kcyBCaW5hcnlPcGVyYXRpb25cbntcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2wsIGxlZnQsIHJpZ2h0KVxuICAgIHtcbiAgICAgICAgc3VwZXIoc3ltYm9sLCBsZWZ0LCByaWdodClcbiAgICB9XG59IiwiaW1wb3J0IHsgQmluYXJ5T3BlcmF0aW9uIH0gZnJvbSAnLi4vQmluYXJ5T3BlcmF0aW9uLmpzJztcblxuZXhwb3J0IGNsYXNzIEdyZWF0ZXJPckVxdWFsIGV4dGVuZHMgQmluYXJ5T3BlcmF0aW9uXG57XG4gICAgY29uc3RydWN0b3Ioc3ltYm9sLCBsZWZ0LCByaWdodClcbiAgICB7XG4gICAgICAgIHN1cGVyKHN5bWJvbCwgbGVmdCwgcmlnaHQpXG4gICAgfVxufSIsImltcG9ydCB7IEJpbmFyeU9wZXJhdGlvbiB9IGZyb20gJy4uL0JpbmFyeU9wZXJhdGlvbi5qcyc7XG5cbmV4cG9ydCBjbGFzcyBMZXNzT3JFcXVhbCBleHRlbmRzIEJpbmFyeU9wZXJhdGlvblxue1xuICAgIGNvbnN0cnVjdG9yKHN5bWJvbCwgbGVmdCwgcmlnaHQpXG4gICAge1xuICAgICAgICBzdXBlcihzeW1ib2wsIGxlZnQsIHJpZ2h0KVxuICAgIH1cbn0iLCJpbXBvcnQgeyBUeXBlQmFzZSB9IGZyb20gJy4vVHlwZUJhc2UuanMnO1xuaW1wb3J0IHsgVHlwZXNJZHMgfSBmcm9tICcuLi8uLi8uLi9TZW1hbnRpY3MvVmFyaWFibGVzL1R5cGVzSWRzLmpzJztcbmltcG9ydCB7IENhbGxhYmxlVmFyaWFibGUgfSBmcm9tICcuLi8uLi8uLi9TZW1hbnRpY3MvVmFyaWFibGVzL0NhbGxhYmxlVmFyaWFibGUuanMnO1xuXG5leHBvcnQgY2xhc3MgRnVuY3Rpb25UeXBlIGV4dGVuZHMgVHlwZUJhc2VcbntcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2wsIHNpZ25hdHVyZSA9IG51bGwsIHJldHVyblR5cGUgPSBudWxsKVxuICAgIHtcbiAgICAgICAgc3VwZXIoc3ltYm9sLCBUeXBlc0lkcy5GVU5DVElPTik7XG4gICAgICAgIHRoaXMucmV0dXJuVHlwZSA9IHJldHVyblR5cGU7XG4gICAgICAgIHRoaXMuc2lnbmF0dXJlID0gc2lnbmF0dXJlO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKClcbiAgICB7XG4gICAgICAgIGxldCBzaWduYXR1cmVUZXh0cyA9IFtdO1xuXG4gICAgICAgIGlmICh0aGlzLnNpZ25hdHVyZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnNpZ25hdHVyZS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIGxldCBpZGVudHMgPSBlbGVtLmlkZW50aWZpZXJzLm1hcCgoaWRlbnRpZmllcikgPT4gaWRlbnRpZmllci5zeW1ib2wuc3RyaW5nVmFsdWUpLmpvaW4oJywgJyk7XG4gICAgICAgICAgICAgICAgc2lnbmF0dXJlVGV4dHNbaW5kZXhdID0gaWRlbnRzICsgJzogJyArIGVsZW0udHlwZS50b1N0cmluZygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc2lnbmF0dXJlVGV4dCA9IHNpZ25hdHVyZVRleHRzLmpvaW4oJzsgJyk7XG5cbiAgICAgICAgcmV0dXJuIGBmdW5jdGlvbigke3NpZ25hdHVyZVRleHR9KTogJHt0aGlzLnJldHVyblR5cGUudG9TdHJpbmcoKX1gO1xuICAgIH1cbn07IiwiaW1wb3J0IHsgVHlwZUJhc2UgfSBmcm9tICcuL1R5cGVCYXNlLmpzJztcbmltcG9ydCB7IFR5cGVzSWRzIH0gZnJvbSAnLi4vLi4vLi4vU2VtYW50aWNzL1ZhcmlhYmxlcy9UeXBlc0lkcy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBQcm9jZWR1cmVUeXBlIGV4dGVuZHMgVHlwZUJhc2VcbntcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2wsIHNpZ25hdHVyZSwgaWRlbnRpZmllcnMpXG4gICAge1xuICAgICAgICBzdXBlcihzeW1ib2wsIFR5cGVzSWRzLlBST0NFRFVSRSk7XG4gICAgICAgIHRoaXMuaWRlbnRpZmllcnMgPSBpZGVudGlmaWVycztcbiAgICAgICAgdGhpcy5zaWduYXR1cmUgPSBzaWduYXR1cmU7XG4gICAgfVxuXG5cbiAgICB0b1N0cmluZygpXG4gICAge1xuICAgICAgICBsZXQgc2lnbmF0dXJlVGV4dHMgPSBbXTtcblxuICAgICAgICBpZiAodGhpcy5zaWduYXR1cmUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5zaWduYXR1cmUuZm9yRWFjaChmdW5jdGlvbiAoZWxlbSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBsZXQgaWRlbnRzID0gZWxlbS5pZGVudGlmaWVycy5tYXAoKGlkZW50aWZpZXIpID0+IGlkZW50aWZpZXIuc3ltYm9sLnN0cmluZ1ZhbHVlKS5qb2luKCcsICcpO1xuICAgICAgICAgICAgICAgIHNpZ25hdHVyZVRleHRzW2luZGV4XSA9IGlkZW50cyArICc6ICcgKyBlbGVtLnR5cGUudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHNpZ25hdHVyZVRleHQgPSBzaWduYXR1cmVUZXh0cy5qb2luKCc7ICcpO1xuXG4gICAgICAgIHJldHVybiBgcHJvY2VkdXJlKCR7c2lnbmF0dXJlVGV4dH0pYDtcbiAgICB9XG59OyIsImltcG9ydCB7IFRyZWVOb2RlQmFzZSB9IGZyb20gJy4uL1RyZWVOb2RlQmFzZS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBUeXBlQXBwbGllZCBleHRlbmRzIFRyZWVOb2RlQmFzZVxue1xuICAgIGNvbnN0cnVjdG9yKHN5bWJvbCwgYnlSZWZlcmVuY2UgPSBmYWxzZSwgdHlwZSA9IG51bGwsIGlkZW50aWZpZXJzID0gW10pXG4gICAge1xuICAgICAgICBzdXBlcihzeW1ib2wpO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmlkZW50aWZpZXJzID0gaWRlbnRpZmllcnM7XG4gICAgICAgIHRoaXMuYnlSZWZlcmVuY2UgPSBieVJlZmVyZW5jZTtcbiAgICB9XG59OyIsImltcG9ydCB7IFR5cGVCYXNlIH0gZnJvbSAnLi9UeXBlQmFzZS5qcyc7XG5pbXBvcnQgeyBUeXBlc0lkcyB9IGZyb20gJy4uLy4uLy4uL1NlbWFudGljcy9WYXJpYWJsZXMvVHlwZXNJZHMuanMnO1xuXG5leHBvcnQgY2xhc3MgRW51bVR5cGUgZXh0ZW5kcyBUeXBlQmFzZVxue1xuICAgIGNvbnN0cnVjdG9yKHN5bWJvbClcbiAgICB7XG4gICAgICAgIHN1cGVyKHN5bWJvbCwgVHlwZXNJZHMuRU5VTSk7XG4gICAgICAgIHRoaXMuaXRlbXMgPSBbXTtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpXG4gICAge1xuICAgICAgICBsZXQgaXRlbXMgPSB0aGlzLml0ZW1zLm1hcChlbGVtID0+IGVsZW0uc3ltYm9sLnN0cmluZ1ZhbHVlKS5qb2luKCcsICcpO1xuICAgICAgICByZXR1cm4gYGVudW0oJHtpdGVtc30pYDtcbiAgICB9XG59IiwiaW1wb3J0IHsgVHlwZUJhc2UgfSBmcm9tICcuL1R5cGVCYXNlLmpzJztcbmltcG9ydCB7IFR5cGVzSWRzIH0gZnJvbSAnLi4vLi4vLi4vU2VtYW50aWNzL1ZhcmlhYmxlcy9UeXBlc0lkcy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBBcnJheVR5cGUgZXh0ZW5kcyBUeXBlQmFzZVxue1xuICAgIGNvbnN0cnVjdG9yKHN5bWJvbCwgbGVmdEluZGV4ID0gbnVsbCwgcmlnaHRJbmRleCA9IG51bGwsIHR5cGVPZkVsZW1lbnRzID0gbnVsbClcbiAgICB7XG4gICAgICAgIHN1cGVyKHN5bWJvbCwgVHlwZXNJZHMuQVJSQVkpO1xuICAgICAgICB0aGlzLnR5cGVPZkVsZW1lbnRzID0gdHlwZU9mRWxlbWVudHM7XG4gICAgICAgIHRoaXMubGVmdEluZGV4ID0gbGVmdEluZGV4O1xuICAgICAgICB0aGlzLnJpZ2h0SW5kZXggPSByaWdodEluZGV4O1xuICAgIH1cblxuICAgIHRvU3RyaW5nKClcbiAgICB7XG4gICAgICAgIHJldHVybiBgYXJyYXkgWyR7dGhpcy5sZWZ0SW5kZXguc3ltYm9sLnZhbHVlfS4uJHt0aGlzLnJpZ2h0SW5kZXguc3ltYm9sLnZhbHVlfV0gb2YgJHt0aGlzLnR5cGVPZkVsZW1lbnRzfWA7XG4gICAgfVxufSIsImltcG9ydCB7IFR5cGVCYXNlIH0gZnJvbSAnLi9UeXBlQmFzZS5qcyc7XG5pbXBvcnQgeyBUeXBlc0lkcyB9IGZyb20gJy4uLy4uLy4uL1NlbWFudGljcy9WYXJpYWJsZXMvVHlwZXNJZHMuanMnO1xuXG5leHBvcnQgY2xhc3MgUG9pbnRlclR5cGUgZXh0ZW5kcyBUeXBlQmFzZVxue1xuICAgIGNvbnN0cnVjdG9yKHN5bWJvbCwgdHlwZSlcbiAgICB7XG4gICAgICAgIHN1cGVyKHN5bWJvbCwgVHlwZXNJZHMuUE9JTlRFUik7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIGBeJHt0aGlzLnR5cGV9YDtcbiAgICB9XG59IiwiaW1wb3J0IHsgVHJlZU5vZGVCYXNlIH0gZnJvbSAnLi4vVHJlZU5vZGVCYXNlLmpzJztcblxuZXhwb3J0IGNsYXNzIFdoaWxlQ3ljbGUgZXh0ZW5kcyBUcmVlTm9kZUJhc2VcbntcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2wsIGNvbmRpdGlvbiwgYm9keSlcbiAgICB7XG4gICAgICAgIHN1cGVyKHN5bWJvbCk7XG4gICAgICAgIHRoaXMuY29uZGl0aW9uID0gY29uZGl0aW9uO1xuICAgICAgICB0aGlzLmJvZHkgPSBib2R5O1xuICAgIH1cbn0iLCJpbXBvcnQgeyBUcmVlTm9kZUJhc2UgfSBmcm9tICcuLi9UcmVlTm9kZUJhc2UuanMnO1xuXG5leHBvcnQgY2xhc3MgUmVwZWF0Q3ljbGUgZXh0ZW5kcyBUcmVlTm9kZUJhc2VcbntcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2wsIGNvbmRpdGlvbiwgYm9keSlcbiAgICB7XG4gICAgICAgIHN1cGVyKHN5bWJvbCk7XG4gICAgICAgIHRoaXMuY29uZGl0aW9uID0gY29uZGl0aW9uO1xuICAgICAgICB0aGlzLmJvZHkgPSBib2R5O1xuICAgIH1cbn0iLCJpbXBvcnQgeyBUcmVlTm9kZUJhc2UgfSBmcm9tICcuLi9UcmVlTm9kZUJhc2UuanMnO1xuXG5leHBvcnQgY2xhc3MgU3dpdGNoIGV4dGVuZHMgVHJlZU5vZGVCYXNlXG57XG4gICAgY29uc3RydWN0b3Ioc3ltYm9sLCBzd2l0Y2hFeHByZXNzaW9uID0gbnVsbCwgY2FzZXMgPSBbXSwgZWxzZVNlbnRlbmNlID0gbnVsbClcbiAgICB7XG4gICAgICAgIHN1cGVyKHN5bWJvbCk7XG4gICAgICAgIHRoaXMuc3dpdGNoRXhwcmVzc2lvbiA9IHN3aXRjaEV4cHJlc3Npb247XG4gICAgICAgIHRoaXMuY2FzZXMgPSBjYXNlcztcbiAgICAgICAgdGhpcy5lbHNlU2VudGVuY2UgPSBlbHNlU2VudGVuY2U7XG4gICAgfVxufSIsImltcG9ydCB7IFRyZWVOb2RlQmFzZSB9IGZyb20gJy4uL1RyZWVOb2RlQmFzZS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBDYXNlIGV4dGVuZHMgVHJlZU5vZGVCYXNlXG57XG4gICAgY29uc3RydWN0b3Ioc3ltYm9sLCBjb25zdGFudHMgPSBbXSwgb3BlcmF0b3IgPSBudWxsKVxuICAgIHtcbiAgICAgICAgc3VwZXIoc3ltYm9sKTtcbiAgICAgICAgdGhpcy5jb25zdGFudHMgPSBjb25zdGFudHM7XG4gICAgICAgIHRoaXMub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICB9XG59IiwiaW1wb3J0IHsgVHJlZU5vZGVCYXNlIH0gZnJvbSAnLi4vVHJlZU5vZGVCYXNlLmpzJztcblxuZXhwb3J0IGNsYXNzIEZvckN5Y2xlIGV4dGVuZHMgVHJlZU5vZGVCYXNlXG57XG4gICAgY29uc3RydWN0b3Ioc3ltYm9sLCB2YXJpYWJsZUlkZW50aWZpZXIsIGluaXRFeHByZXNzaW9uLCBsYXN0RXhwcmVzc2lvbiwgY291bnREb3duLCBib2R5KVxuICAgIHtcbiAgICAgICAgc3VwZXIoc3ltYm9sKTtcblxuICAgICAgICB0aGlzLnZhcmlhYmxlSWRlbnRpZmllciA9IHZhcmlhYmxlSWRlbnRpZmllcjtcbiAgICAgICAgdGhpcy5pbml0RXhwcmVzc2lvbiA9IGluaXRFeHByZXNzaW9uO1xuICAgICAgICB0aGlzLmxhc3RFeHByZXNzaW9uID0gbGFzdEV4cHJlc3Npb247XG4gICAgICAgIHRoaXMuY291bnREb3duID0gY291bnREb3duO1xuICAgICAgICB0aGlzLmJvZHkgPSBib2R5O1xuICAgIH1cbn0iLCJpbXBvcnQgeyBUcmVlTm9kZUJhc2UgfSBmcm9tICcuL1RyZWVOb2RlQmFzZS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBCcmVhayBleHRlbmRzIFRyZWVOb2RlQmFzZVxue1xuICAgIGNvbnN0cnVjdG9yKHN5bWJvbClcbiAgICB7XG4gICAgICAgIHN1cGVyKHN5bWJvbCk7XG4gICAgfVxufSIsImltcG9ydCB7IEVycm9yc0NvZGVzIH0gZnJvbSAnLi4vRXJyb3JzL0Vycm9yc0NvZGVzLmpzJztcbmltcG9ydCB7IFN5bWJvbHNDb2RlcyB9IGZyb20gJy4uL0xleGljYWxBbmFseXplci9TeW1ib2xzQ29kZXMuanMnO1xuaW1wb3J0IHsgU3ltYm9sc0Rlc2NyaXB0aW9uIH0gZnJvbSAnLi4vTGV4aWNhbEFuYWx5emVyL1N5bWJvbHNEZXNjcmlwdGlvbi5qcyc7XG5pbXBvcnQgeyBBc3NpZ25hdGlvbiB9IGZyb20gJy4vVHJlZS9Bc3NpZ25hdGlvbi5qcyc7XG5pbXBvcnQgeyBUYWtlRWxlbUJ5S2V5cyB9IGZyb20gJy4vVHJlZS9UYWtlRWxlbUJ5S2V5cy5qcyc7XG5pbXBvcnQgeyBJbmRleGVkSWRlbnRpZmllciB9IGZyb20gJy4vVHJlZS9BcnJheXMvSW5kZXhlZElkZW50aWZpZXIuanMnO1xuaW1wb3J0IHsgSW5kZXhSaW5nIH0gZnJvbSAnLi9UcmVlL0FycmF5cy9JbmRleFJpbmcuanMnO1xuaW1wb3J0IHsgR2V0QnlQb2ludGVyIH0gZnJvbSAnLi9UcmVlL0dldEJ5UG9pbnRlci5qcyc7XG5pbXBvcnQgeyBHZXRQb2ludGVyIH0gZnJvbSAnLi9UcmVlL0dldFBvaW50ZXIuanMnO1xuaW1wb3J0IHsgVGFrZUZpZWxkIH0gZnJvbSAnLi9UcmVlL1Rha2VGaWVsZC5qcyc7XG5pbXBvcnQgeyBNdWx0aXBsaWNhdGlvbiB9IGZyb20gJy4vVHJlZS9NdWx0aXBsaWNhdGlvbi5qcyc7XG5pbXBvcnQgeyBEaXZpc2lvbiB9IGZyb20gJy4vVHJlZS9EaXZpc2lvbi5qcyc7XG5pbXBvcnQgeyBBZGRpdGlvbiB9IGZyb20gJy4vVHJlZS9BZGRpdGlvbi5qcyc7XG5pbXBvcnQgeyBTdWJ0cmFjdGlvbiB9IGZyb20gJy4vVHJlZS9TdWJ0cmFjdGlvbi5qcyc7XG5pbXBvcnQgeyBDb25zdGFudCB9IGZyb20gJy4vVHJlZS9Db25zdGFudC5qcyc7XG5pbXBvcnQgeyBJZGVudGlmaWVyIH0gZnJvbSAnLi9UcmVlL0lkZW50aWZpZXIuanMnO1xuaW1wb3J0IHsgRnVuY3Rpb25DYWxsIH0gZnJvbSAnLi9UcmVlL0Z1bmN0aW9uQ2FsbC5qcyc7XG5pbXBvcnQgeyBQcm9jZWR1cmVDYWxsIH0gZnJvbSAnLi9UcmVlL1Byb2NlZHVyZUNhbGwuanMnO1xuaW1wb3J0IHsgU2NhbGFyVHlwZSB9IGZyb20gJy4vVHJlZS9UeXBlcy9TY2FsYXJUeXBlLmpzJztcbmltcG9ydCB7IFJlY29yZFR5cGUgfSBmcm9tICcuL1RyZWUvVHlwZXMvUmVjb3JkVHlwZS5qcyc7XG5pbXBvcnQgeyBBcHBsaWVkTmFtZWRUeXBlIH0gZnJvbSAnLi9UcmVlL1R5cGVzL0FwcGxpZWROYW1lZFR5cGUuanMnO1xuaW1wb3J0IHsgVmFyaWFibGVzRGVjbGFyYXRpb24gfSBmcm9tICcuL1RyZWUvVmFyaWFibGVzRGVjbGFyYXRpb24uanMnO1xuaW1wb3J0IHsgQ29uc3RhbnREZWNsYXJhdGlvbiB9IGZyb20gJy4vVHJlZS9Db25zdGFudERlY2xhcmF0aW9uLmpzJztcbmltcG9ydCB7IFR5cGVEZWNsYXJhdGlvbiB9IGZyb20gJy4vVHJlZS9UeXBlRGVjbGFyYXRpb24uanMnO1xuaW1wb3J0IHsgQ29tcG91bmRPcGVyYXRvciB9IGZyb20gJy4vVHJlZS9Db21wb3VuZE9wZXJhdG9yLmpzJztcbmltcG9ydCB7IEltcGxpY2F0aW9uIH0gZnJvbSAnLi9UcmVlL0ltcGxpY2F0aW9uLmpzJztcbmltcG9ydCB7IEludGVnZXJEaXZpc2lvbiB9IGZyb20gJy4vVHJlZS9JbnRlZ2VyRGl2aXNpb24uanMnO1xuaW1wb3J0IHsgTW9kdWxvIH0gZnJvbSAnLi9UcmVlL01vZHVsby5qcyc7XG5pbXBvcnQgeyBMb2dpY2FsQW5kIH0gZnJvbSAnLi9UcmVlL0xvZ2ljYWxBbmQuanMnO1xuaW1wb3J0IHsgTG9naWNhbE9yIH0gZnJvbSAnLi9UcmVlL0xvZ2ljYWxPci5qcyc7XG5pbXBvcnQgeyBVbmFyeU1pbnVzIH0gZnJvbSAnLi9UcmVlL1VuYXJ5TWludXMuanMnO1xuaW1wb3J0IHsgTm90IH0gZnJvbSAnLi9UcmVlL05vdC5qcyc7XG5pbXBvcnQgeyBQcm9ncmFtIH0gZnJvbSAnLi9UcmVlL1Byb2dyYW0uanMnO1xuaW1wb3J0IHsgUHJvY2VkdXJlIH0gZnJvbSAnLi9UcmVlL1Byb2NlZHVyZS5qcyc7XG5pbXBvcnQgeyBGdW5jdGlvbiB9IGZyb20gJy4vVHJlZS9GdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBJbiB9IGZyb20gJy4vVHJlZS9SZWxhdGlvbnMvSW4uanMnO1xuaW1wb3J0IHsgRXF1YWwgfSBmcm9tICcuL1RyZWUvUmVsYXRpb25zL0VxdWFsLmpzJztcbmltcG9ydCB7IE5vdEVxdWFsIH0gZnJvbSAnLi9UcmVlL1JlbGF0aW9ucy9Ob3RFcXVhbC5qcyc7XG5pbXBvcnQgeyBMZXNzIH0gZnJvbSAnLi9UcmVlL1JlbGF0aW9ucy9MZXNzLmpzJztcbmltcG9ydCB7IEdyZWF0ZXIgfSBmcm9tICcuL1RyZWUvUmVsYXRpb25zL0dyZWF0ZXIuanMnO1xuaW1wb3J0IHsgR3JlYXRlck9yRXF1YWwgfSBmcm9tICcuL1RyZWUvUmVsYXRpb25zL0dyZWF0ZXJPckVxdWFsLmpzJztcbmltcG9ydCB7IExlc3NPckVxdWFsIH0gZnJvbSAnLi9UcmVlL1JlbGF0aW9ucy9MZXNzT3JFcXVhbC5qcyc7XG5pbXBvcnQgeyBGdW5jdGlvblR5cGUgfSBmcm9tICcuL1RyZWUvVHlwZXMvRnVuY3Rpb25UeXBlLmpzJztcbmltcG9ydCB7IFByb2NlZHVyZVR5cGUgfSBmcm9tICcuL1RyZWUvVHlwZXMvUHJvY2VkdXJlVHlwZS5qcyc7XG5pbXBvcnQgeyBUeXBlQXBwbGllZCB9IGZyb20gJy4vVHJlZS9QYXJhbWV0ZXJzTGlzdC9UeXBlQXBwbGllZC5qcyc7XG5pbXBvcnQgeyBUeXBlc0lkcyB9IGZyb20gJy4uL1NlbWFudGljcy9WYXJpYWJsZXMvVHlwZXNJZHMuanMnO1xuaW1wb3J0IHsgRW51bVR5cGUgfSBmcm9tICcuL1RyZWUvVHlwZXMvRW51bVR5cGUuanMnO1xuaW1wb3J0IHsgQXJyYXlUeXBlIH0gZnJvbSAnLi9UcmVlL1R5cGVzL0FycmF5VHlwZS5qcyc7XG5pbXBvcnQgeyBQb2ludGVyVHlwZSB9IGZyb20gJy4vVHJlZS9UeXBlcy9Qb2ludGVyVHlwZS5qcyc7XG5pbXBvcnQgeyBXaGlsZUN5Y2xlIH0gZnJvbSAnLi9UcmVlL0xvb3BzL1doaWxlQ3ljbGUuanMnO1xuaW1wb3J0IHsgUmVwZWF0Q3ljbGUgfSBmcm9tICcuL1RyZWUvTG9vcHMvUmVwZWF0Q3ljbGUuanMnO1xuaW1wb3J0IHsgU3dpdGNoIH0gZnJvbSAnLi9UcmVlL0Nhc2UvU3dpdGNoLmpzJztcbmltcG9ydCB7IENhc2UgfSBmcm9tICcuL1RyZWUvQ2FzZS9DYXNlLmpzJztcbmltcG9ydCB7IEZvckN5Y2xlIH0gZnJvbSAnLi9UcmVlL0xvb3BzL0ZvckN5Y2xlLmpzJztcbmltcG9ydCB7IE5tYkludCB9IGZyb20gJy4vLi4vTGV4aWNhbEFuYWx5emVyL1N5bWJvbHMvTm1iSW50LmpzJztcbmltcG9ydCB7IFN5bWJvbCB9IGZyb20gJy4vLi4vTGV4aWNhbEFuYWx5emVyL1N5bWJvbHMvU3ltYm9sLmpzJztcbmltcG9ydCB7IEJyZWFrIH0gZnJvbSAnLi9UcmVlL0JyZWFrLmpzJztcblxuXG5leHBvcnQgY2xhc3MgU3ludGF4QW5hbHl6ZXJcbntcbiAgICBjb25zdHJ1Y3RvcihsZXhpY2FsQW5hbHl6ZXIpXG4gICAge1xuICAgICAgICB0aGlzLmxleGljYWxBbmFseXplciA9IGxleGljYWxBbmFseXplcjtcbiAgICAgICAgdGhpcy5zeW1ib2xzRGVzY3JpcHRpb24gPSBuZXcgU3ltYm9sc0Rlc2NyaXB0aW9uKCk7XG4gICAgICAgIHRoaXMuc3ltYm9sID0gbnVsbDtcbiAgICAgICAgdGhpcy50cmVlID0gbnVsbDtcbiAgICAgICAgdGhpcy50cmVlcyA9IFtdO1xuICAgICAgICB0aGlzLnRyZWVzQ291bnRlciA9IDA7XG4gICAgICAgIHRoaXMuZXJyb3JEZXRlY3RlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIG5leHRTeW0oKVxuICAgIHtcbiAgICAgICAgdGhpcy5zeW1ib2wgPSB0aGlzLmxleGljYWxBbmFseXplci5uZXh0U3ltKCk7XG4gICAgfVxuXG4gICAgYW5vdGhlclN5bWJvbEV4cGVjdGVkKGV4cGVjdGVkU3ltYm9sKVxuICAgIHtcbiAgICAgICAgbGV0IGRlc2NyaXB0aW9uID0gdGhpcy5zeW1ib2xzRGVzY3JpcHRpb24uZ2V0U3ltYm9sVGV4dEJ5Q29kZShleHBlY3RlZFN5bWJvbCk7XG4gICAgICAgIGxldCBlcnJvclRleHQgPSBgJyR7ZGVzY3JpcHRpb259JyBleHBlY3RlZCBidXQgJyR7dGhpcy5zeW1ib2wuc3RyaW5nVmFsdWV9JyBmb3VuZC5gO1xuICAgICAgICB0aGlzLmxleGljYWxBbmFseXplci5maWxlSU8uYWRkRXJyb3IoRXJyb3JzQ29kZXMuaW5hZG1pc3NpYmxlU3ltYm9sLCBlcnJvclRleHQsIHRoaXMuc3ltYm9sLnRleHRQb3NpdGlvbik7XG4gICAgfVxuXG4gICAgYWNjZXB0KGV4cGVjdGVkU3ltYm9sQ29kZSlcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLnN5bWJvbCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zeW1ib2wuc3ltYm9sQ29kZSA9PT0gZXhwZWN0ZWRTeW1ib2xDb2RlKSB7XG4gICAgICAgICAgICB0aGlzLm5leHRTeW0oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JEZXRlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmFub3RoZXJTeW1ib2xFeHBlY3RlZChleHBlY3RlZFN5bWJvbENvZGUpO1xuICAgICAgICAgICAgdGhpcy5nb1RvRW5kKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhbmFseXplKClcbiAgICB7XG4gICAgICAgIHRoaXMudHJlZSA9IG5ldyBQcm9ncmFtKHRoaXMuc3ltYm9sKTtcbiAgICAgICAgdGhpcy50cmVlc1t0aGlzLnRyZWVzQ291bnRlcl0gPSB0aGlzLnRyZWU7XG5cbiAgICAgICAgdGhpcy5uZXh0U3ltKCk7XG4gICAgICAgIHRoaXMuc2NhblByb2dyYW1tZSgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnRyZWU7XG4gICAgfVxuXG4gICAgc2NhblByb2dyYW1tZSgpXG4gICAge1xuICAgICAgICBpZiAodGhpcy5zeW1ib2wuc3ltYm9sQ29kZSA9PT0gU3ltYm9sc0NvZGVzLnByb2dyYW1TeSkge1xuICAgICAgICAgICAgdGhpcy5uZXh0U3ltKCk7XG4gICAgICAgICAgICB0aGlzLnRyZWUubmFtZSA9IHRoaXMuc3ltYm9sLnN0cmluZ1ZhbHVlO1xuICAgICAgICAgICAgdGhpcy5hY2NlcHQoU3ltYm9sc0NvZGVzLmlkZW50KTtcbiAgICAgICAgICAgIHRoaXMuYWNjZXB0KFN5bWJvbHNDb2Rlcy5zZW1pY29sb24pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2NhbkJsb2NrKCk7XG4gICAgICAgIHRoaXMuYWNjZXB0KFN5bWJvbHNDb2Rlcy5wb2ludCk7XG4gICAgfVxuXG4gICAgc2NhbkJsb2NrKClcbiAgICB7XG4gICAgICAgIHRoaXMubGFiZWxQYXJ0KCk7XG4gICAgICAgIHRoaXMuY29uc3RQYXJ0KCk7XG4gICAgICAgIHRoaXMudHlwZVBhcnQoKTtcbiAgICAgICAgdGhpcy52YXJQYXJ0KCk7XG4gICAgICAgIHRoaXMucHJvY0Z1bmNQYXJ0KCk7XG4gICAgICAgIHRoaXMuc3RhdGVtZW50UGFydCgpO1xuICAgIH1cblxuICAgIGxhYmVsUGFydCgpXG4gICAge1xuXG4gICAgfVxuXG4gICAgY29uc3RQYXJ0KClcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLnN5bWJvbC5zeW1ib2xDb2RlID09PSBTeW1ib2xzQ29kZXMuY29uc3RTeSkge1xuICAgICAgICAgICAgdGhpcy50cmVlLmNvbnN0YW50cyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5uZXh0U3ltKCk7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgbGV0IGlkZW50U3ltYm9sID0gdGhpcy5zeW1ib2w7XG4gICAgICAgICAgICAgICAgdGhpcy5hY2NlcHQoU3ltYm9sc0NvZGVzLmlkZW50KTtcbiAgICAgICAgICAgICAgICBsZXQgdHlwZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5jb2xvbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRTeW0oKTtcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9IHRoaXMuc2NhblR5cGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGVxdWFsU3ltYm9sID0gdGhpcy5zeW1ib2w7XG4gICAgICAgICAgICAgICAgdGhpcy5hY2NlcHQoU3ltYm9sc0NvZGVzLmVxdWFsKTtcblxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuc2NhbkNvbnN0YW50KCk7XG4gICAgICAgICAgICAgICAgbGV0IGNvbnN0YW50RGVjbGFyYXRpb24gPSBuZXcgQ29uc3RhbnREZWNsYXJhdGlvbihlcXVhbFN5bWJvbCwgbmV3IElkZW50aWZpZXIoaWRlbnRTeW1ib2wpLCB2YWx1ZSwgdHlwZSk7XG4gICAgICAgICAgICAgICAgdGhpcy50cmVlLmNvbnN0YW50cy5wdXNoKGNvbnN0YW50RGVjbGFyYXRpb24pO1xuICAgICAgICAgICAgICAgIHRoaXMuYWNjZXB0KFN5bWJvbHNDb2Rlcy5zZW1pY29sb24pO1xuICAgICAgICAgICAgfSB3aGlsZSAodGhpcy5zeW1ib2wuc3ltYm9sQ29kZSA9PT0gU3ltYm9sc0NvZGVzLmlkZW50KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdHlwZVBhcnQoKVxuICAgIHtcbiAgICAgICAgdGhpcy50cmVlLnR5cGVzID0gW107XG4gICAgICAgIGlmICh0aGlzLnN5bWJvbC5zeW1ib2xDb2RlID09PSBTeW1ib2xzQ29kZXMudHlwZVN5KSB7XG4gICAgICAgICAgICB0aGlzLm5leHRTeW0oKTtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBsZXQgaWRlbnRTeW1ib2wgPSB0aGlzLnN5bWJvbDtcbiAgICAgICAgICAgICAgICB0aGlzLmFjY2VwdChTeW1ib2xzQ29kZXMuaWRlbnQpO1xuICAgICAgICAgICAgICAgIGxldCBlcXVhbFN5bWJvbCA9IHRoaXMuc3ltYm9sO1xuICAgICAgICAgICAgICAgIHRoaXMuYWNjZXB0KFN5bWJvbHNDb2Rlcy5lcXVhbCk7XG4gICAgICAgICAgICAgICAgbGV0IHR5cGUgPSB0aGlzLnNjYW5UeXBlKCk7XG4gICAgICAgICAgICAgICAgbGV0IHR5cGVEZWNsYXJhdGlvbiA9IG5ldyBUeXBlRGVjbGFyYXRpb24oZXF1YWxTeW1ib2wsIG5ldyBJZGVudGlmaWVyKGlkZW50U3ltYm9sKSwgdHlwZSk7XG4gICAgICAgICAgICAgICAgdGhpcy50cmVlLnR5cGVzLnB1c2godHlwZURlY2xhcmF0aW9uKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFjY2VwdChTeW1ib2xzQ29kZXMuc2VtaWNvbG9uKTtcbiAgICAgICAgICAgIH0gd2hpbGUgKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5pZGVudClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhclBhcnQoKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy52YXJTeSkge1xuICAgICAgICAgICAgdGhpcy5uZXh0U3ltKCk7XG5cbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyZWUudmFycy5wdXNoKHRoaXMuc2NhblZhckRlY2xhcmF0aW9uKCkpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWNjZXB0KFN5bWJvbHNDb2Rlcy5zZW1pY29sb24pO1xuICAgICAgICAgICAgfSB3aGlsZSAoIXRoaXMuZXJyb3JEZXRlY3RlZCAmJlxuICAgICAgICAgICAgICAgIHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5pZGVudClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNjYW5WYXJEZWNsYXJhdGlvbigpXG4gICAge1xuICAgICAgICBsZXQgaWRlbnRpZmllcnMgPSBbXTtcbiAgICAgICAgbGV0IGlkZW50ID0gbnVsbDtcbiAgICAgICAgbGV0IGNvbmRpdGlvbiA9IGZhbHNlO1xuXG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlkZW50ID0gbmV3IElkZW50aWZpZXIodGhpcy5zeW1ib2wpO1xuICAgICAgICAgICAgdGhpcy5hY2NlcHQoU3ltYm9sc0NvZGVzLmlkZW50KTtcbiAgICAgICAgICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnQpO1xuXG4gICAgICAgICAgICBjb25kaXRpb24gPSAodGhpcy5zeW1ib2wuc3ltYm9sQ29kZSA9PT0gU3ltYm9sc0NvZGVzLmNvbW1hKTtcbiAgICAgICAgICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5leHRTeW0oKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IHdoaWxlICghdGhpcy5lcnJvckRldGVjdGVkICYmXG4gICAgICAgICAgICAgICAgY29uZGl0aW9uKVxuXG4gICAgICAgIGxldCBjb2xvbiA9IHRoaXMuc3ltYm9sO1xuICAgICAgICB0aGlzLmFjY2VwdChTeW1ib2xzQ29kZXMuY29sb24pO1xuICAgICAgICBsZXQgdHlwZSA9IHRoaXMuc2NhblR5cGUoKTtcblxuICAgICAgICBsZXQgaW5pdGlhbFZhbHVlID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5lcXVhbCkge1xuICAgICAgICAgICAgdGhpcy5uZXh0U3ltKCk7XG4gICAgICAgICAgICBpbml0aWFsVmFsdWUgPSB0aGlzLnNjYW5Db25zdGFudCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBWYXJpYWJsZXNEZWNsYXJhdGlvbihjb2xvbiwgaWRlbnRpZmllcnMsIHR5cGUsIGluaXRpYWxWYWx1ZSk7XG4gICAgfVxuXG4gICAgc2Nhbkxpc3RBcnJheVR5cGUodHlwZVN5bWJvbClcbiAgICB7XG4gICAgICAgIGxldCBlbGVtc1R5cGUgPSBudWxsO1xuXG4gICAgICAgIGxldCBsZWZ0SW5kZXggPSB0aGlzLnNjYW5Db25zdGFudCgpO1xuICAgICAgICB0aGlzLmFjY2VwdChTeW1ib2xzQ29kZXMudHdvUG9pbnRzKTtcbiAgICAgICAgbGV0IHJpZ2h0SW5kZXggPSB0aGlzLnNjYW5Db25zdGFudCgpO1xuXG4gICAgICAgIGlmICh0aGlzLnN5bWJvbC5zeW1ib2xDb2RlID09PSBTeW1ib2xzQ29kZXMuY29tbWEpIHtcbiAgICAgICAgICAgIHR5cGVTeW1ib2wgPSB0aGlzLnN5bWJvbDtcbiAgICAgICAgICAgIHRoaXMubmV4dFN5bSgpO1xuICAgICAgICAgICAgZWxlbXNUeXBlID0gdGhpcy5zY2FuTGlzdEFycmF5VHlwZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hY2NlcHQoU3ltYm9sc0NvZGVzLnJCcmFja2V0KTtcbiAgICAgICAgICAgIHRoaXMuYWNjZXB0KFN5bWJvbHNDb2Rlcy5vZlN5KTtcbiAgICAgICAgICAgIGVsZW1zVHlwZSA9IHRoaXMuc2NhblR5cGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgQXJyYXlUeXBlKHR5cGVTeW1ib2wsIGxlZnRJbmRleCwgcmlnaHRJbmRleCwgZWxlbXNUeXBlKTtcbiAgICB9XG5cbiAgICBzY2FuVHlwZSgpXG4gICAge1xuICAgICAgICBsZXQgdHlwZVN5bWJvbCA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLnN5bWJvbC5zeW1ib2xDb2RlID09PSBTeW1ib2xzQ29kZXMuYXJyb3cpIHtcbiAgICAgICAgICAgIHR5cGVTeW1ib2wgPSB0aGlzLnN5bWJvbDtcbiAgICAgICAgICAgIHRoaXMubmV4dFN5bSgpO1xuICAgICAgICAgICAgbGV0IHRhcmdldFR5cGUgPSB0aGlzLnNjYW5UeXBlKCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFBvaW50ZXJUeXBlKHR5cGVTeW1ib2wsIHRhcmdldFR5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5pbnRlZ2VyU3kgfHxcbiAgICAgICAgICAgIHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5ib29sZWFuU3kgfHxcbiAgICAgICAgICAgIHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5yZWFsU3kgfHxcbiAgICAgICAgICAgIHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5zdHJpbmdTeSB8fFxuICAgICAgICAgICAgdGhpcy5zeW1ib2wuc3ltYm9sQ29kZSA9PT0gU3ltYm9sc0NvZGVzLmNoYXJTeSkge1xuXG4gICAgICAgICAgICB0eXBlU3ltYm9sID0gdGhpcy5zeW1ib2w7XG4gICAgICAgICAgICB0aGlzLm5leHRTeW0oKTtcbiAgICAgICAgICAgIGxldCB0eXBlSWQgPSBudWxsO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGVTeW1ib2wuc3ltYm9sQ29kZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgU3ltYm9sc0NvZGVzLmNoYXJTeTpcbiAgICAgICAgICAgICAgICAgICAgdHlwZUlkID0gVHlwZXNJZHMuQ0hBUjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBTeW1ib2xzQ29kZXMuaW50ZWdlclN5OlxuICAgICAgICAgICAgICAgICAgICB0eXBlSWQgPSBUeXBlc0lkcy5JTlRFR0VSO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFN5bWJvbHNDb2Rlcy5zdHJpbmdTeTpcbiAgICAgICAgICAgICAgICAgICAgdHlwZUlkID0gVHlwZXNJZHMuU1RSSU5HO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFN5bWJvbHNDb2Rlcy5yZWFsU3k6XG4gICAgICAgICAgICAgICAgICAgIHR5cGVJZCA9IFR5cGVzSWRzLlJFQUw7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgU3ltYm9sc0NvZGVzLmJvb2xlYW5TeTpcbiAgICAgICAgICAgICAgICAgICAgdHlwZUlkID0gVHlwZXNJZHMuQk9PTEVBTjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgU2NhbGFyVHlwZSh0eXBlU3ltYm9sLCB0eXBlSWQpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5pZGVudCkge1xuICAgICAgICAgICAgdHlwZVN5bWJvbCA9IHRoaXMuc3ltYm9sO1xuICAgICAgICAgICAgdGhpcy5uZXh0U3ltKCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEFwcGxpZWROYW1lZFR5cGUodHlwZVN5bWJvbCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zeW1ib2wuc3ltYm9sQ29kZSA9PT0gU3ltYm9sc0NvZGVzLmFycmF5U3kpIHtcbiAgICAgICAgICAgIHR5cGVTeW1ib2wgPSB0aGlzLnN5bWJvbDtcbiAgICAgICAgICAgIHRoaXMubmV4dFN5bSgpO1xuICAgICAgICAgICAgdGhpcy5hY2NlcHQoU3ltYm9sc0NvZGVzLmxCcmFja2V0KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNjYW5MaXN0QXJyYXlUeXBlKHR5cGVTeW1ib2wpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5sZWZ0UGFyKSB7XG4gICAgICAgICAgICBsZXQgZW51bVR5cGUgPSBuZXcgRW51bVR5cGUodGhpcy5zeW1ib2wpO1xuICAgICAgICAgICAgbGV0IGlkZW50ID0gbnVsbDtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5leHRTeW0oKTtcbiAgICAgICAgICAgICAgICBpZGVudCA9IG5ldyBJZGVudGlmaWVyKHRoaXMuc3ltYm9sKTtcbiAgICAgICAgICAgICAgICBlbnVtVHlwZS5pdGVtcy5wdXNoKGlkZW50KTtcbiAgICAgICAgICAgICAgICB0aGlzLmFjY2VwdChTeW1ib2xzQ29kZXMuaWRlbnQpO1xuICAgICAgICAgICAgfSB3aGlsZSAodGhpcy5zeW1ib2wuc3ltYm9sQ29kZSA9PT0gU3ltYm9sc0NvZGVzLmNvbW1hIClcbiAgICAgICAgICAgIHRoaXMuYWNjZXB0KFN5bWJvbHNDb2Rlcy5yaWdodFBhcik7XG4gICAgICAgICAgICByZXR1cm4gZW51bVR5cGU7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zeW1ib2wuc3ltYm9sQ29kZSA9PT0gU3ltYm9sc0NvZGVzLmZ1bmN0aW9uU3kpIHtcbiAgICAgICAgICAgIGxldCBmdW5jdGlvblR5cGUgPSBuZXcgRnVuY3Rpb25UeXBlKHRoaXMuc3ltYm9sKTtcbiAgICAgICAgICAgIHRoaXMubmV4dFN5bSgpO1xuICAgICAgICAgICAgZnVuY3Rpb25UeXBlLnNpZ25hdHVyZSA9IHRoaXMuc2NhblBhcmFtZXRlcnNMaXN0KCk7XG4gICAgICAgICAgICB0aGlzLmFjY2VwdChTeW1ib2xzQ29kZXMuY29sb24pO1xuICAgICAgICAgICAgZnVuY3Rpb25UeXBlLnJldHVyblR5cGUgPSB0aGlzLnNjYW5UeXBlKCk7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb25UeXBlO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5wcm9jZWR1cmVTeSkge1xuICAgICAgICAgICAgbGV0IHByb2NlZHVyZVR5cGUgPSBuZXcgUHJvY2VkdXJlVHlwZSh0aGlzLnN5bWJvbCk7XG4gICAgICAgICAgICB0aGlzLm5leHRTeW0oKTtcbiAgICAgICAgICAgIHByb2NlZHVyZVR5cGUuc2lnbmF0dXJlID0gdGhpcy5zY2FuUGFyYW1ldGVyc0xpc3QoKTtcbiAgICAgICAgICAgIHJldHVybiBwcm9jZWR1cmVUeXBlO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5yZWNvcmRTeSkge1xuICAgICAgICAgICAgbGV0IHJlY29yZFN5bWJvbCA9IHRoaXMuc3ltYm9sO1xuICAgICAgICAgICAgdGhpcy5uZXh0U3ltKCk7XG5cbiAgICAgICAgICAgIGxldCByZWNvcmRFbGVtcyA9IFtdO1xuXG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgaWYgKHJlY29yZEVsZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5zZW1pY29sb24gKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRTeW0oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zeW1ib2wuc3ltYm9sQ29kZSA9PT0gU3ltYm9sc0NvZGVzLmVuZFN5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBwYXJhbWV0ZXJzID0gbmV3IFR5cGVBcHBsaWVkKHRoaXMuc3ltYm9sKTtcblxuICAgICAgICAgICAgICAgIGxldCBpZGVudGlmaWVycyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaWRlbnRpZmllcnMubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zeW1ib2wuc3ltYm9sQ29kZSA9PT0gU3ltYm9sc0NvZGVzLmNvbW1hKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRTeW0oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlkZW50aWZpZXJzLnB1c2gobmV3IElkZW50aWZpZXIodGhpcy5zeW1ib2wpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY2NlcHQoU3ltYm9sc0NvZGVzLmlkZW50KTtcblxuICAgICAgICAgICAgICAgIH0gd2hpbGUgKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5jb21tYSlcblxuICAgICAgICAgICAgICAgIHRoaXMuYWNjZXB0KFN5bWJvbHNDb2Rlcy5jb2xvbik7XG4gICAgICAgICAgICAgICAgcGFyYW1ldGVycy5pZGVudGlmaWVycyA9IGlkZW50aWZpZXJzO1xuICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMudHlwZSA9IHRoaXMuc2NhblR5cGUoKTtcblxuICAgICAgICAgICAgICAgIHJlY29yZEVsZW1zLnB1c2gocGFyYW1ldGVycyk7XG5cbiAgICAgICAgICAgIH0gd2hpbGUgKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5zZW1pY29sb24pXG5cbiAgICAgICAgICAgIHRoaXMuYWNjZXB0KFN5bWJvbHNDb2Rlcy5lbmRTeSk7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVjb3JkVHlwZShyZWNvcmRTeW1ib2wsIHJlY29yZEVsZW1zKTtcblxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvY0Z1bmNQYXJ0KClcbiAgICB7XG4gICAgICAgIHdoaWxlICh0aGlzLnN5bWJvbC5zeW1ib2xDb2RlID09PSBTeW1ib2xzQ29kZXMucHJvY2VkdXJlU3kgfHxcbiAgICAgICAgICAgICAgICB0aGlzLnN5bWJvbC5zeW1ib2xDb2RlID09PSBTeW1ib2xzQ29kZXMuZnVuY3Rpb25TeSkge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLnN5bWJvbC5zeW1ib2xDb2RlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBTeW1ib2xzQ29kZXMucHJvY2VkdXJlU3k6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NhblByb2NlZHVyZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFN5bWJvbHNDb2Rlcy5mdW5jdGlvblN5OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjYW5GdW5jdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2NhblByb2NlZHVyZSgpXG4gICAge1xuICAgICAgICBsZXQgcHJvY2VkdXJlU3ltYm9sID0gdGhpcy5zeW1ib2w7XG4gICAgICAgIHRoaXMuYWNjZXB0KFN5bWJvbHNDb2Rlcy5wcm9jZWR1cmVTeSk7XG4gICAgICAgIGxldCBpZGVudGlmaWVyID0gbmV3IElkZW50aWZpZXIodGhpcy5zeW1ib2wpO1xuICAgICAgICB0aGlzLmFjY2VwdChTeW1ib2xzQ29kZXMuaWRlbnQpO1xuICAgICAgICBsZXQgcHJvY2VkdXJlVHlwZSA9IG5ldyBQcm9jZWR1cmVUeXBlKHByb2NlZHVyZVN5bWJvbCk7XG4gICAgICAgIHByb2NlZHVyZVR5cGUuc2lnbmF0dXJlID0gdGhpcy5zY2FuUGFyYW1ldGVyc0xpc3QoKTtcblxuICAgICAgICB0aGlzLnRyZWVzQ291bnRlcisrO1xuICAgICAgICB0aGlzLnRyZWUgPSBuZXcgUHJvY2VkdXJlKHByb2NlZHVyZVN5bWJvbCwgcHJvY2VkdXJlVHlwZSk7XG4gICAgICAgIHRoaXMudHJlZXNbdGhpcy50cmVlc0NvdW50ZXJdID0gdGhpcy50cmVlO1xuICAgICAgICB0aGlzLnRyZWUubmFtZSA9IGlkZW50aWZpZXI7XG4gICAgICAgIGxldCBwcm9jZWR1cmVOYW1lID0gdGhpcy50cmVlLm5hbWUuc3ltYm9sLnZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHRoaXMudHJlZS5zaWduYXR1cmUgPSB0aGlzLnNjYW5QYXJhbWV0ZXJzTGlzdCgpO1xuICAgICAgICB0aGlzLmFjY2VwdChTeW1ib2xzQ29kZXMuc2VtaWNvbG9uKTtcblxuXG4gICAgICAgIHRoaXMuc2NhbkJsb2NrKCk7XG4gICAgICAgIHRoaXMuYWNjZXB0KFN5bWJvbHNDb2Rlcy5zZW1pY29sb24pO1xuXG4gICAgICAgIHRoaXMudHJlZXNbdGhpcy50cmVlc0NvdW50ZXIgLSAxXS5wcm9jZWR1cmVzW3Byb2NlZHVyZU5hbWVdID0gdGhpcy50cmVlO1xuICAgICAgICB0aGlzLnRyZWVzQ291bnRlci0tO1xuICAgICAgICB0aGlzLnRyZWUgPSB0aGlzLnRyZWVzW3RoaXMudHJlZXNDb3VudGVyXTtcbiAgICB9XG5cbiAgICBzY2FuRnVuY3Rpb24oKVxuICAgIHtcbiAgICAgICAgbGV0IGZ1bmN0aW9uU3ltYm9sID0gdGhpcy5zeW1ib2w7XG4gICAgICAgIHRoaXMuYWNjZXB0KFN5bWJvbHNDb2Rlcy5mdW5jdGlvblN5KTtcbiAgICAgICAgbGV0IGlkZW50aWZpZXIgPSBuZXcgSWRlbnRpZmllcih0aGlzLnN5bWJvbCk7XG4gICAgICAgIHRoaXMuYWNjZXB0KFN5bWJvbHNDb2Rlcy5pZGVudCk7XG4gICAgICAgIGxldCBmdW5jdGlvblR5cGUgPSBuZXcgRnVuY3Rpb25UeXBlKGZ1bmN0aW9uU3ltYm9sKTtcbiAgICAgICAgZnVuY3Rpb25UeXBlLnNpZ25hdHVyZSA9IHRoaXMuc2NhblBhcmFtZXRlcnNMaXN0KCk7XG4gICAgICAgIHRoaXMuYWNjZXB0KFN5bWJvbHNDb2Rlcy5jb2xvbik7XG4gICAgICAgIGZ1bmN0aW9uVHlwZS5yZXR1cm5UeXBlID0gdGhpcy5zY2FuVHlwZSgpO1xuXG4gICAgICAgIHRoaXMudHJlZXNDb3VudGVyKys7XG4gICAgICAgIHRoaXMudHJlZSA9IG5ldyBGdW5jdGlvbihmdW5jdGlvblN5bWJvbCwgZnVuY3Rpb25UeXBlKTtcbiAgICAgICAgdGhpcy50cmVlc1t0aGlzLnRyZWVzQ291bnRlcl0gPSB0aGlzLnRyZWU7XG4gICAgICAgIHRoaXMudHJlZS5uYW1lID0gaWRlbnRpZmllcjtcbiAgICAgICAgbGV0IGZ1bmN0aW9uTmFtZSA9IHRoaXMudHJlZS5uYW1lLnN5bWJvbC52YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB0aGlzLmFjY2VwdChTeW1ib2xzQ29kZXMuc2VtaWNvbG9uKTtcbiAgICAgICAgdGhpcy5zY2FuQmxvY2soKTtcbiAgICAgICAgdGhpcy5hY2NlcHQoU3ltYm9sc0NvZGVzLnNlbWljb2xvbik7XG5cbiAgICAgICAgdGhpcy50cmVlc1t0aGlzLnRyZWVzQ291bnRlciAtIDFdLmZ1bmN0aW9uc1tmdW5jdGlvbk5hbWVdID0gdGhpcy50cmVlO1xuICAgICAgICB0aGlzLnRyZWVzQ291bnRlci0tO1xuICAgICAgICB0aGlzLnRyZWUgPSB0aGlzLnRyZWVzW3RoaXMudHJlZXNDb3VudGVyXTtcblxuICAgIH1cblxuICAgIC8qKiDQodC40L3RgtCw0LrRgdC40YfQtdGB0LrQsNGPINC00LjQsNCz0YDQsNC80LzQsCBcItGB0L/QuNGB0L7QuiDQv9Cw0YDQsNC80LXRgtGA0L7QslwiICovXG4gICAgc2NhblBhcmFtZXRlcnNMaXN0KClcbiAgICB7XG4gICAgICAgIGxldCBwYXJhbWV0ZXJzTGlzdCA9IFtdO1xuXG4gICAgICAgIGlmICh0aGlzLnN5bWJvbC5zeW1ib2xDb2RlID09PSBTeW1ib2xzQ29kZXMubGVmdFBhcikge1xuICAgICAgICAgICAgdGhpcy5uZXh0U3ltKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5zeW1ib2wuc3ltYm9sQ29kZSAhPT0gU3ltYm9sc0NvZGVzLnJpZ2h0UGFyKSB7XG5cbiAgICAgICAgICAgICAgICBkbyB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnNMaXN0Lmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5zZW1pY29sb24gKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dFN5bSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IGJ5UmVmZXJlbmNlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN5bWJvbC5zeW1ib2xDb2RlID09PSBTeW1ib2xzQ29kZXMudmFyU3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ5UmVmZXJlbmNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dFN5bSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhcmFtZXRlcnMgPSBuZXcgVHlwZUFwcGxpZWQodGhpcy5zeW1ib2wsIGJ5UmVmZXJlbmNlKTtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgaWRlbnRpZmllcnMgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWRlbnRpZmllcnMubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5jb21tYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dFN5bSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZGVudGlmaWVycy5wdXNoKG5ldyBJZGVudGlmaWVyKHRoaXMuc3ltYm9sKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjY2VwdChTeW1ib2xzQ29kZXMuaWRlbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5jb21tYSlcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFjY2VwdChTeW1ib2xzQ29kZXMuY29sb24pO1xuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLmlkZW50aWZpZXJzID0gaWRlbnRpZmllcnM7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMudHlwZSA9IHRoaXMuc2NhblR5cGUoKTtcblxuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzTGlzdC5wdXNoKHBhcmFtZXRlcnMpO1xuXG4gICAgICAgICAgICAgICAgfSB3aGlsZSAodGhpcy5zeW1ib2wuc3ltYm9sQ29kZSA9PT0gU3ltYm9sc0NvZGVzLnNlbWljb2xvbilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYWNjZXB0KFN5bWJvbHNDb2Rlcy5yaWdodFBhcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFyYW1ldGVyc0xpc3Q7XG4gICAgfVxuXG4gICAgc3RhdGVtZW50UGFydCgpXG4gICAge1xuICAgICAgICB0aGlzLmFjY2VwdChTeW1ib2xzQ29kZXMuYmVnaW5TeSk7XG5cbiAgICAgICAgd2hpbGUgKCB0aGlzLnN5bWJvbCAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgIT09IFN5bWJvbHNDb2Rlcy5lbmRTeSkge1xuXG4gICAgICAgICAgICBsZXQgc2VudGVuY2UgPSB0aGlzLnNjYW5TZW50ZW5jZSgpO1xuICAgICAgICAgICAgdGhpcy50cmVlLnNlbnRlbmNlcy5wdXNoKHNlbnRlbmNlKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgIT09ICBTeW1ib2xzQ29kZXMuZW5kU3kpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFjY2VwdChTeW1ib2xzQ29kZXMuc2VtaWNvbG9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYWNjZXB0KFN5bWJvbHNDb2Rlcy5lbmRTeSk7XG4gICAgfVxuXG4gICAgZ29Ub0VuZCgpXG4gICAge1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICB0aGlzLm5leHRTeW0oKTtcbiAgICAgICAgfSB3aGlsZSAodGhpcy5zeW1ib2wgIT09IG51bGwpXG4gICAgfVxuXG4gICAgLyoqINCh0LjQvdGC0LDQutGB0LjRh9C10YHQutCw0Y8g0LTQuNCw0LPRgNCw0LzQvNCwIFwi0L7Qv9C10YDQsNGC0L7RgFwiICovXG4gICAgc2NhblNlbnRlbmNlKClcbiAgICB7XG4gICAgICAgIC8vINCY0LzRjyDQv9C10YDQtdC80LXQvdC90L7QuSwg0YTRg9C90LrRhtC40Lgg0LjQu9C4INC/0YDQvtGG0LXQtNGD0YDRi1xuICAgICAgICBpZiAodGhpcy5zeW1ib2wuc3ltYm9sQ29kZSA9PT0gU3ltYm9sc0NvZGVzLmlkZW50KSB7XG4gICAgICAgICAgICBsZXQgaWRlbnRpZmllckJyYW5jaCA9IHRoaXMuc2NhbklkZW50aWZpZXJCcmFuY2goKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5hc3NpZ24pIHtcbiAgICAgICAgICAgICAgICBsZXQgYXNzaWduU3ltYm9sID0gdGhpcy5zeW1ib2w7XG4gICAgICAgICAgICAgICAgdGhpcy5uZXh0U3ltKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBc3NpZ25hdGlvbihhc3NpZ25TeW1ib2wsIGlkZW50aWZpZXJCcmFuY2gsIHRoaXMuc2NhbkV4cHJlc3Npb24oKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpZGVudGlmaWVyQnJhbmNoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5iZWdpblN5KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zY2FuQ29tcG91bmRPcGVyYXRvcigpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5pZlN5KSB7XG4gICAgICAgICAgICBsZXQgaWZTeW1ib2wgPSB0aGlzLnN5bWJvbDtcbiAgICAgICAgICAgIHRoaXMubmV4dFN5bSgpO1xuICAgICAgICAgICAgbGV0IGNvbmRpdGlvbiA9IHRoaXMuc2NhbkV4cHJlc3Npb24oKTtcblxuICAgICAgICAgICAgdGhpcy5hY2NlcHQoU3ltYm9sc0NvZGVzLnRoZW5TeSk7XG4gICAgICAgICAgICBsZXQgbGVmdCA9IHRoaXMuc2NhblNlbnRlbmNlKCk7XG4gICAgICAgICAgICBsZXQgcmlnaHQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5lbHNlU3kpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5leHRTeW0oKTtcbiAgICAgICAgICAgICAgICByaWdodCA9IHRoaXMuc2NhblNlbnRlbmNlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgSW1wbGljYXRpb24oaWZTeW1ib2wsIGNvbmRpdGlvbiwgbGVmdCwgcmlnaHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy53aGlsZVN5KSB7XG4gICAgICAgICAgICBsZXQgd2hpbGVTeW1ib2wgPSB0aGlzLnN5bWJvbDtcbiAgICAgICAgICAgIHRoaXMubmV4dFN5bSgpO1xuICAgICAgICAgICAgbGV0IGNvbmRpdGlvbiA9IHRoaXMuc2NhbkV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgIHRoaXMuYWNjZXB0KFN5bWJvbHNDb2Rlcy5kb1N5KTtcbiAgICAgICAgICAgIGxldCBib2R5ID0gdGhpcy5zY2FuU2VudGVuY2UoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBXaGlsZUN5Y2xlKHdoaWxlU3ltYm9sLCBjb25kaXRpb24sIGJvZHkpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5yZXBlYXRTeSkge1xuICAgICAgICAgICAgbGV0IHJlcGVhdFN5bWJvbCA9IHRoaXMuc3ltYm9sO1xuICAgICAgICAgICAgbGV0IGNvbXBvdW5kT3BlcmF0b3IgPSBuZXcgQ29tcG91bmRPcGVyYXRvcihyZXBlYXRTeW1ib2wpO1xuICAgICAgICAgICAgdGhpcy5uZXh0U3ltKCk7XG5cbiAgICAgICAgICAgIHdoaWxlICggdGhpcy5zeW1ib2wgIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zeW1ib2wuc3ltYm9sQ29kZSAhPT0gU3ltYm9sc0NvZGVzLnVudGlsU3kpIHtcblxuICAgICAgICAgICAgICAgIGxldCBzZW50ZW5jZSA9IHRoaXMuc2NhblNlbnRlbmNlKCk7XG4gICAgICAgICAgICAgICAgY29tcG91bmRPcGVyYXRvci5zZW50ZW5jZXMucHVzaChzZW50ZW5jZSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmFjY2VwdChTeW1ib2xzQ29kZXMuc2VtaWNvbG9uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5hY2NlcHQoU3ltYm9sc0NvZGVzLnVudGlsU3kpO1xuXG4gICAgICAgICAgICBsZXQgYm9keSA9IGNvbXBvdW5kT3BlcmF0b3I7XG4gICAgICAgICAgICBsZXQgY29uZGl0aW9uID0gdGhpcy5zY2FuRXhwcmVzc2lvbigpO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlcGVhdEN5Y2xlKHJlcGVhdFN5bWJvbCwgY29uZGl0aW9uLCBib2R5KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN5bWJvbC5zeW1ib2xDb2RlID09PSBTeW1ib2xzQ29kZXMuZm9yU3kpIHtcbiAgICAgICAgICAgIGxldCBmb3JTeW1ib2wgPSB0aGlzLnN5bWJvbDtcbiAgICAgICAgICAgIHRoaXMubmV4dFN5bSgpO1xuICAgICAgICAgICAgbGV0IGlkZW50U3ltYm9sID0gdGhpcy5zeW1ib2w7XG4gICAgICAgICAgICB0aGlzLmFjY2VwdChTeW1ib2xzQ29kZXMuaWRlbnQpO1xuICAgICAgICAgICAgbGV0IHZhcmlhYmxlID0gbmV3IElkZW50aWZpZXIoaWRlbnRTeW1ib2wpO1xuICAgICAgICAgICAgbGV0IGFzc2lnblN5bWJvbCA9IHRoaXMuc3ltYm9sO1xuICAgICAgICAgICAgdGhpcy5hY2NlcHQoU3ltYm9sc0NvZGVzLmFzc2lnbik7XG4gICAgICAgICAgICBsZXQgaW5pdEV4cHJlc3Npb24gPSB0aGlzLnNjYW5TaW1wbGVFeHByZXNzaW9uKCk7XG5cbiAgICAgICAgICAgIGxldCBjb3VudERvd24gPSBmYWxzZTtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5zeW1ib2wuc3ltYm9sQ29kZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgU3ltYm9sc0NvZGVzLmRvd250b1N5OlxuICAgICAgICAgICAgICAgICAgICBjb3VudERvd24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFN5bWJvbHNDb2Rlcy50b1N5OlxuICAgICAgICAgICAgICAgICAgICBjb3VudERvd24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVycm9yVGV4dCA9IGBTeW1ib2xzICd0bycgb3IgJ2Rvd250bycgZXhwZWN0ZWQgYnV0ICcke3RoaXMuc3ltYm9sLnN0cmluZ1ZhbHVlfScgZm91bmQuYDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRFcnJvcihFcnJvcnNDb2Rlcy5pbmFkbWlzc2libGVTeW1ib2wsIGVycm9yVGV4dCwgdGhpcy5zeW1ib2wpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLm5leHRTeW0oKTtcbiAgICAgICAgICAgIGxldCBsYXN0RXhwcmVzc2lvbiA9IHRoaXMuc2NhblNpbXBsZUV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgIHRoaXMuYWNjZXB0KFN5bWJvbHNDb2Rlcy5kb1N5KTtcbiAgICAgICAgICAgIGxldCBib2R5ID0gdGhpcy5zY2FuU2VudGVuY2UoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBGb3JDeWNsZShmb3JTeW1ib2wsIHZhcmlhYmxlLCBpbml0RXhwcmVzc2lvbiwgbGFzdEV4cHJlc3Npb24sIGNvdW50RG93biwgYm9keSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zeW1ib2wuc3ltYm9sQ29kZSA9PT0gU3ltYm9sc0NvZGVzLmJyZWFrU3kpIHtcbiAgICAgICAgICAgIGxldCBicmVha1N5bWJvbCA9IHRoaXMuc3ltYm9sO1xuICAgICAgICAgICAgdGhpcy5uZXh0U3ltKCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEJyZWFrKGJyZWFrU3ltYm9sKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN5bWJvbC5zeW1ib2xDb2RlID09PSBTeW1ib2xzQ29kZXMuY2FzZVN5KSB7XG4gICAgICAgICAgICBsZXQgY2FzZVN5bWJvbCA9IHRoaXMuc3ltYm9sO1xuICAgICAgICAgICAgdGhpcy5uZXh0U3ltKCk7XG4gICAgICAgICAgICBsZXQgc3dpdGNoRXhwcmVzc2lvbiA9IHRoaXMuc2NhbkV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgIHRoaXMuYWNjZXB0KFN5bWJvbHNDb2Rlcy5vZlN5KTtcblxuICAgICAgICAgICAgbGV0IHN3aXRjaEl0ZW0gPSBuZXcgU3dpdGNoKGNhc2VTeW1ib2wsIHN3aXRjaEV4cHJlc3Npb24pO1xuXG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgbGV0IGNhc2VJdGVtID0gbmV3IENhc2UodGhpcy5zeW1ib2wpO1xuICAgICAgICAgICAgICAgIGxldCBjb21tYUZvbGxvd3MgPSBudWxsO1xuICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZUl0ZW0uY29uc3RhbnRzLnB1c2godGhpcy5zY2FuQ29uc3RhbnQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hRm9sbG93cyA9IHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5jb21tYTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1hRm9sbG93cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0U3ltKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IHdoaWxlIChjb21tYUZvbGxvd3MpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWNjZXB0KFN5bWJvbHNDb2Rlcy5jb2xvbik7XG4gICAgICAgICAgICAgICAgY2FzZUl0ZW0ub3BlcmF0b3IgPSB0aGlzLnNjYW5TZW50ZW5jZSgpO1xuICAgICAgICAgICAgICAgIHN3aXRjaEl0ZW0uY2FzZXMucHVzaChjYXNlSXRlbSk7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5zeW1ib2wuc3ltYm9sQ29kZSAhPT0gU3ltYm9sc0NvZGVzLmVuZFN5ICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgIT09IFN5bWJvbHNDb2Rlcy5lbHNlU3kpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY2NlcHQoU3ltYm9sc0NvZGVzLnNlbWljb2xvbik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5zZW1pY29sb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0U3ltKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSB3aGlsZSAodGhpcy5zeW1ib2wuc3ltYm9sQ29kZSAhPT0gU3ltYm9sc0NvZGVzLmVuZFN5ICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgIT09IFN5bWJvbHNDb2Rlcy5lbHNlU3kpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5zeW1ib2wuc3ltYm9sQ29kZSA9PT0gU3ltYm9sc0NvZGVzLmVsc2VTeSkge1xuICAgICAgICAgICAgICAgIHRoaXMubmV4dFN5bSgpO1xuICAgICAgICAgICAgICAgIHN3aXRjaEl0ZW0uZWxzZVNlbnRlbmNlID0gdGhpcy5zY2FuU2VudGVuY2UoKTtcbiAgICAgICAgICAgICAgICBpZih0aGlzLnN5bWJvbC5zeW1ib2xDb2RlID09PSBTeW1ib2xzQ29kZXMuc2VtaWNvbG9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWNjZXB0KFN5bWJvbHNDb2Rlcy5zZW1pY29sb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5hY2NlcHQoU3ltYm9sc0NvZGVzLmVuZFN5KTtcbiAgICAgICAgICAgIHJldHVybiBzd2l0Y2hJdGVtO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2NhbkNvbXBvdW5kT3BlcmF0b3IoKVxuICAgIHtcbiAgICAgICAgbGV0IGNvbXBvdW5kT3BlcmF0b3IgPSBuZXcgQ29tcG91bmRPcGVyYXRvcih0aGlzLnN5bWJvbCk7XG4gICAgICAgIHRoaXMuYWNjZXB0KFN5bWJvbHNDb2Rlcy5iZWdpblN5KTtcblxuICAgICAgICB3aGlsZSAoIHRoaXMuc3ltYm9sICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgdGhpcy5zeW1ib2wuc3ltYm9sQ29kZSAhPT0gU3ltYm9sc0NvZGVzLmVuZFN5KSB7XG5cbiAgICAgICAgICAgIGxldCBzZW50ZW5jZSA9IHRoaXMuc2NhblNlbnRlbmNlKCk7XG4gICAgICAgICAgICBjb21wb3VuZE9wZXJhdG9yLnNlbnRlbmNlcy5wdXNoKHNlbnRlbmNlKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgIT09IFN5bWJvbHNDb2Rlcy5lbmRTeSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWNjZXB0KFN5bWJvbHNDb2Rlcy5zZW1pY29sb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hY2NlcHQoU3ltYm9sc0NvZGVzLmVuZFN5KTtcblxuICAgICAgICByZXR1cm4gY29tcG91bmRPcGVyYXRvcjtcbiAgICB9XG5cbiAgICBzY2FuSW5kaWNlc0JyYWNrZXRzKGluZGV4U3ltYm9sKVxuICAgIHtcbiAgICAgICAgdGhpcy5hY2NlcHQoU3ltYm9sc0NvZGVzLmxCcmFja2V0KTtcbiAgICAgICAgbGV0IHJvb3RJbmRleFJpbmcgPSBuZXcgSW5kZXhSaW5nKGluZGV4U3ltYm9sLCB0aGlzLnNjYW5FeHByZXNzaW9uKCkpO1xuXG4gICAgICAgIHdoaWxlICh0aGlzLnN5bWJvbC5zeW1ib2xDb2RlID09PSBTeW1ib2xzQ29kZXMuY29tbWEpIHtcbiAgICAgICAgICAgIGxldCBjb21tYVN5bWJvbCA9IHRoaXMuc3ltYm9sO1xuICAgICAgICAgICAgdGhpcy5uZXh0U3ltKCk7XG4gICAgICAgICAgICBsZXQgY3VycmVudEluZGV4UmluZyA9ICBuZXcgSW5kZXhSaW5nKGNvbW1hU3ltYm9sLCB0aGlzLnNjYW5FeHByZXNzaW9uKCkpO1xuICAgICAgICAgICAgcm9vdEluZGV4UmluZy5hcHBlbmRJbmRleFJpbmcoY3VycmVudEluZGV4UmluZyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFjY2VwdChTeW1ib2xzQ29kZXMuckJyYWNrZXQpO1xuXG4gICAgICAgIHJldHVybiByb290SW5kZXhSaW5nO1xuICAgIH1cblxuICAgIHNjYW5JbmRpY2VzKGluZGV4U3ltYm9sKVxuICAgIHtcbiAgICAgICAgbGV0IGxCcmFja2V0ID0gdGhpcy5zeW1ib2w7XG4gICAgICAgIGxldCByb290SW5kZXhSaW5nID0gdGhpcy5zY2FuSW5kaWNlc0JyYWNrZXRzKHRoaXMuc3ltYm9sKTtcblxuICAgICAgICB3aGlsZSAodGhpcy5zeW1ib2wuc3ltYm9sQ29kZSA9PT0gU3ltYm9sc0NvZGVzLmxCcmFja2V0KSB7XG4gICAgICAgICAgICBsZXQgbEJyYWNrZXRTeW1ib2wgPSB0aGlzLnN5bWJvbDtcbiAgICAgICAgICAgIGxldCBjdXJyZW50SW5kZXhSaW5nID0gdGhpcy5zY2FuSW5kaWNlc0JyYWNrZXRzKGxCcmFja2V0U3ltYm9sKTtcbiAgICAgICAgICAgIHJvb3RJbmRleFJpbmcuYXBwZW5kSW5kZXhSaW5nKGN1cnJlbnRJbmRleFJpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJvb3RJbmRleFJpbmc7XG4gICAgfVxuXG4gICAgLyoqINCh0LjQvdGC0LDQutGB0LjRh9C10YHQutCw0Y8g0LTQuNCw0LPRgNCw0LzQvNCwIFwi0L/QtdGA0LXQvNC10L3QvdCw0Y9cIiAqL1xuICAgIHNjYW5JZGVudGlmaWVyQnJhbmNoKGlucHV0RXhwcmVzc2lvbiA9IG51bGwpXG4gICAge1xuICAgICAgICBsZXQgYmFzZUV4cHJlc3Npb24gPSBudWxsO1xuICAgICAgICBpZiAoaW5wdXRFeHByZXNzaW9uID09PSBudWxsKSB7XG4gICAgICAgICAgICBsZXQgaWRlbnQgPSB0aGlzLnN5bWJvbDtcbiAgICAgICAgICAgIHRoaXMubmV4dFN5bSgpO1xuICAgICAgICAgICAgYmFzZUV4cHJlc3Npb24gPSBuZXcgSWRlbnRpZmllcihpZGVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBiYXNlRXhwcmVzc2lvbiA9IGlucHV0RXhwcmVzc2lvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCh0aGlzLnN5bWJvbC5zeW1ib2xDb2RlKSB7XG4gICAgICAgICAgICBjYXNlIFN5bWJvbHNDb2Rlcy5sZWZ0UGFyOlxuICAgICAgICAgICAgICAgICAgICBsZXQgbGVmdFBhclN5bWJvbCA9IHRoaXMuc3ltYm9sO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRTeW0oKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhcmFtZXRlcnMgPSB0aGlzLnNjYW5QYXJhbWV0ZXJzKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNjYW5JZGVudGlmaWVyQnJhbmNoKG5ldyBGdW5jdGlvbkNhbGwobGVmdFBhclN5bWJvbCwgYmFzZUV4cHJlc3Npb24sIHBhcmFtZXRlcnMpKTtcbiAgICAgICAgICAgIGNhc2UgU3ltYm9sc0NvZGVzLmxCcmFja2V0OlxuICAgICAgICAgICAgICAgIGxldCBsQnJhY2tldCA9IHRoaXMuc3ltYm9sO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNjYW5JZGVudGlmaWVyQnJhbmNoKG5ldyBJbmRleGVkSWRlbnRpZmllcihsQnJhY2tldCwgYmFzZUV4cHJlc3Npb24sIHRoaXMuc2NhbkluZGljZXMoKSkpO1xuICAgICAgICAgICAgY2FzZSBTeW1ib2xzQ29kZXMucG9pbnQ6XG4gICAgICAgICAgICAgICAgbGV0IHBvaW50ID0gdGhpcy5zeW1ib2w7XG4gICAgICAgICAgICAgICAgdGhpcy5uZXh0U3ltKCk7XG4gICAgICAgICAgICAgICAgbGV0IHN1YkZpZWxkID0gbmV3IElkZW50aWZpZXIodGhpcy5zeW1ib2wpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWNjZXB0KFN5bWJvbHNDb2Rlcy5pZGVudCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zY2FuSWRlbnRpZmllckJyYW5jaChuZXcgVGFrZUZpZWxkKHBvaW50LCBiYXNlRXhwcmVzc2lvbiwgc3ViRmllbGQpKTtcblxuICAgICAgICAgICAgY2FzZSBTeW1ib2xzQ29kZXMuYXJyb3c6XG4gICAgICAgICAgICAgICAgbGV0IGFycm93ID0gdGhpcy5zeW1ib2w7XG4gICAgICAgICAgICAgICAgdGhpcy5uZXh0U3ltKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2NhbklkZW50aWZpZXJCcmFuY2gobmV3IEdldEJ5UG9pbnRlcihhcnJvdywgYmFzZUV4cHJlc3Npb24pKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJhc2VFeHByZXNzaW9uO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqINCh0LjQvdGC0LDQutGB0LjRh9C10YHQutCw0Y8g0LTQuNCw0LPRgNCw0LzQvNCwIFwi0LLRi9GA0LDQttC10L3QuNC1XCIgKi9cbiAgICBzY2FuRXhwcmVzc2lvbigpXG4gICAge1xuICAgICAgICBpZiAodGhpcy5zeW1ib2wuc3ltYm9sQ29kZSA9PT0gU3ltYm9sc0NvZGVzLmF0KSB7XG4gICAgICAgICAgICBsZXQgYXRTeW1ib2wgPSB0aGlzLnN5bWJvbDtcbiAgICAgICAgICAgIHRoaXMubmV4dFN5bSgpO1xuICAgICAgICAgICAgbGV0IGlkZW50U3ltYm9sID0gdGhpcy5zeW1ib2w7XG4gICAgICAgICAgICB0aGlzLmFjY2VwdChTeW1ib2xzQ29kZXMuaWRlbnQpO1xuICAgICAgICAgICAgbGV0IGlkZW50aWZpZXIgPSBuZXcgSWRlbnRpZmllcihpZGVudFN5bWJvbCk7XG4gICAgICAgICAgICBsZXQgaWRlbnRpZmllckJyYW5jaCA9IHRoaXMuc2NhbklkZW50aWZpZXJCcmFuY2goaWRlbnRpZmllcik7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgR2V0UG9pbnRlcihhdFN5bWJvbCwgaWRlbnRpZmllckJyYW5jaCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc2ltcGxlRXhwcmVzc2lvbiA9IHRoaXMuc2NhblNpbXBsZUV4cHJlc3Npb24oKTtcblxuICAgICAgICBzd2l0Y2ggKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUpIHtcbiAgICAgICAgICAgIGNhc2UgU3ltYm9sc0NvZGVzLmVxdWFsOlxuICAgICAgICAgICAgICAgIHRoaXMubmV4dFN5bSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRXF1YWwodGhpcy5zeW1ib2wsIHNpbXBsZUV4cHJlc3Npb24sIHRoaXMuc2NhblNpbXBsZUV4cHJlc3Npb24oKSk7XG4gICAgICAgICAgICBjYXNlIFN5bWJvbHNDb2Rlcy5sYXRlcjpcbiAgICAgICAgICAgICAgICB0aGlzLm5leHRTeW0oKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IExlc3ModGhpcy5zeW1ib2wsIHNpbXBsZUV4cHJlc3Npb24sIHRoaXMuc2NhblNpbXBsZUV4cHJlc3Npb24oKSk7XG4gICAgICAgICAgICBjYXNlIFN5bWJvbHNDb2Rlcy5ncmVhdGVyOlxuICAgICAgICAgICAgICAgIHRoaXMubmV4dFN5bSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgR3JlYXRlcih0aGlzLnN5bWJvbCwgc2ltcGxlRXhwcmVzc2lvbiwgdGhpcy5zY2FuU2ltcGxlRXhwcmVzc2lvbigpKTtcbiAgICAgICAgICAgIGNhc2UgU3ltYm9sc0NvZGVzLmxhdGVyR3JlYXRlcjpcbiAgICAgICAgICAgICAgICB0aGlzLm5leHRTeW0oKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE5vdEVxdWFsKHRoaXMuc3ltYm9sLCBzaW1wbGVFeHByZXNzaW9uLCB0aGlzLnNjYW5TaW1wbGVFeHByZXNzaW9uKCkpO1xuICAgICAgICAgICAgY2FzZSBTeW1ib2xzQ29kZXMubGF0ZXJFcXVhbDpcbiAgICAgICAgICAgICAgICB0aGlzLm5leHRTeW0oKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IExlc3NPckVxdWFsKHRoaXMuc3ltYm9sLCBzaW1wbGVFeHByZXNzaW9uLCB0aGlzLnNjYW5TaW1wbGVFeHByZXNzaW9uKCkpO1xuICAgICAgICAgICAgY2FzZSBTeW1ib2xzQ29kZXMuZ3JlYXRlckVxdWFsOlxuICAgICAgICAgICAgICAgIHRoaXMubmV4dFN5bSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgR3JlYXRlck9yRXF1YWwodGhpcy5zeW1ib2wsIHNpbXBsZUV4cHJlc3Npb24sIHRoaXMuc2NhblNpbXBsZUV4cHJlc3Npb24oKSk7XG4gICAgICAgICAgICBjYXNlIFN5bWJvbHNDb2Rlcy5pblN5OlxuICAgICAgICAgICAgICAgIHRoaXMubmV4dFN5bSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSW4odGhpcy5zeW1ib2wsIHNpbXBsZUV4cHJlc3Npb24sIHRoaXMuc2NhblNpbXBsZUV4cHJlc3Npb24oKSk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBzaW1wbGVFeHByZXNzaW9uO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqINCh0LjQvdGC0LDQutGB0LjRh9C10YHQutCw0Y8g0LTQuNCw0LPRgNCw0LzQvNCwIFwi0L/RgNC+0YHRgtC+0LUg0LLRi9GA0LDQttC10L3QuNC1XCIgKi9cbiAgICBzY2FuU2ltcGxlRXhwcmVzc2lvbigpXG4gICAge1xuICAgICAgICBsZXQgdW5hcnlNaW51cyA9IGZhbHNlO1xuICAgICAgICBsZXQgbm90ID0gZmFsc2U7XG4gICAgICAgIGxldCB0ZXJtID0gbnVsbDtcbiAgICAgICAgbGV0IHVuYXJ5T3BlcmF0aW9uU3ltYm9sID0gbnVsbDtcblxuICAgICAgICBzd2l0Y2ggKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUpIHtcbiAgICAgICAgICAgIGNhc2UgU3ltYm9sc0NvZGVzLm1pbnVzOlxuICAgICAgICAgICAgICAgIHVuYXJ5TWludXMgPSB0cnVlO1xuICAgICAgICAgICAgY2FzZSBTeW1ib2xzQ29kZXMucGx1czpcbiAgICAgICAgICAgICAgICB1bmFyeU9wZXJhdGlvblN5bWJvbCA9IHRoaXMuc3ltYm9sO1xuICAgICAgICAgICAgICAgIHRoaXMubmV4dFN5bSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTeW1ib2xzQ29kZXMubm90U3k6XG4gICAgICAgICAgICAgICAgbm90ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB1bmFyeU9wZXJhdGlvblN5bWJvbCA9IHRoaXMuc3ltYm9sO1xuICAgICAgICAgICAgICAgIHRoaXMubmV4dFN5bSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGVybSA9IHRoaXMuc2NhblRlcm0oKTtcbiAgICAgICAgaWYgKHVuYXJ5TWludXMpIHtcbiAgICAgICAgICAgIHRlcm0gPSBuZXcgVW5hcnlNaW51cyh1bmFyeU9wZXJhdGlvblN5bWJvbCwgdGVybSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vdCkge1xuICAgICAgICAgICAgdGVybSA9IG5ldyBOb3QodW5hcnlPcGVyYXRpb25TeW1ib2wsIHRlcm0pO1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKCB0aGlzLnN5bWJvbCAhPT0gbnVsbCAmJiAoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5wbHVzIHx8XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5taW51cyB8fFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN5bWJvbC5zeW1ib2xDb2RlID09PSBTeW1ib2xzQ29kZXMub3JTeVxuICAgICAgICAgICAgICAgICkpIHtcblxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLnN5bWJvbC5zeW1ib2xDb2RlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBTeW1ib2xzQ29kZXMucGx1czpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0U3ltKCk7XG4gICAgICAgICAgICAgICAgICAgIHRlcm0gPSBuZXcgQWRkaXRpb24odGhpcy5zeW1ib2wsIHRlcm0sIHRoaXMuc2NhblRlcm0oKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgU3ltYm9sc0NvZGVzLm1pbnVzOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRTeW0oKTtcbiAgICAgICAgICAgICAgICAgICAgdGVybSA9IG5ldyBTdWJ0cmFjdGlvbih0aGlzLnN5bWJvbCwgdGVybSwgdGhpcy5zY2FuVGVybSgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBTeW1ib2xzQ29kZXMub3JTeTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0U3ltKCk7XG4gICAgICAgICAgICAgICAgICAgIHRlcm0gPSBuZXcgTG9naWNhbE9yKHRoaXMuc3ltYm9sLCB0ZXJtLCB0aGlzLnNjYW5UZXJtKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0ZXJtO1xuICAgIH1cblxuICAgIC8qKiDQodC40L3RgtCw0LrRgdC40YfQtdGB0LrQsNGPINC00LjQsNCz0YDQsNC80LzQsCBcItGB0LvQsNCz0LDQtdC80L7QtVwiICovXG4gICAgc2NhblRlcm0oKVxuICAgIHtcbiAgICAgICAgbGV0IG11bHRpcGxpZXIgPSB0aGlzLnNjYW5NdWx0aXBsaWVyKCk7XG4gICAgICAgIGxldCBzeW1ib2xDb2RlID0gbnVsbDtcblxuICAgICAgICB3aGlsZSAoW1N5bWJvbHNDb2Rlcy5zdGFyLFxuICAgICAgICAgICAgICAgIFN5bWJvbHNDb2Rlcy5zbGFzaCxcbiAgICAgICAgICAgICAgICBTeW1ib2xzQ29kZXMuZGl2U3ksXG4gICAgICAgICAgICAgICAgU3ltYm9sc0NvZGVzLm1vZFN5LFxuICAgICAgICAgICAgICAgIFN5bWJvbHNDb2Rlcy5hbmRTeV0uaW5jbHVkZXModGhpcy5zeW1ib2wuc3ltYm9sQ29kZSkpIHtcblxuICAgICAgICAgICAgc3ltYm9sQ29kZSA9IHRoaXMuc3ltYm9sLnN5bWJvbENvZGU7XG5cbiAgICAgICAgICAgIHRoaXMubmV4dFN5bSgpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKHN5bWJvbENvZGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFN5bWJvbHNDb2Rlcy5zdGFyOlxuICAgICAgICAgICAgICAgICAgICBtdWx0aXBsaWVyID0gbmV3IE11bHRpcGxpY2F0aW9uKHRoaXMuc3ltYm9sLCBtdWx0aXBsaWVyLCB0aGlzLnNjYW5NdWx0aXBsaWVyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFN5bWJvbHNDb2Rlcy5zbGFzaDpcbiAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGllciA9IG5ldyBEaXZpc2lvbih0aGlzLnN5bWJvbCwgbXVsdGlwbGllciwgdGhpcy5zY2FuTXVsdGlwbGllcigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBTeW1ib2xzQ29kZXMuZGl2U3k6XG4gICAgICAgICAgICAgICAgICAgIG11bHRpcGxpZXIgPSBuZXcgSW50ZWdlckRpdmlzaW9uKHRoaXMuc3ltYm9sLCBtdWx0aXBsaWVyLCB0aGlzLnNjYW5NdWx0aXBsaWVyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFN5bWJvbHNDb2Rlcy5tb2RTeTpcbiAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGllciA9IG5ldyBNb2R1bG8odGhpcy5zeW1ib2wsIG11bHRpcGxpZXIsIHRoaXMuc2Nhbk11bHRpcGxpZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgU3ltYm9sc0NvZGVzLmFuZFN5OlxuICAgICAgICAgICAgICAgICAgICBtdWx0aXBsaWVyID0gbmV3IExvZ2ljYWxBbmQodGhpcy5zeW1ib2wsIG11bHRpcGxpZXIsIHRoaXMuc2Nhbk11bHRpcGxpZXIoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbXVsdGlwbGllcjtcbiAgICB9XG5cbiAgICAvKiog0KHQuNC90YLQsNC60YHQuNGH0LXRgdC60LDRjyDQtNC40LDQs9GA0LDQvNC80LAgXCLQvNC90L7QttC40YLQtdC70YxcIiAqL1xuICAgIHNjYW5NdWx0aXBsaWVyKClcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLnN5bWJvbC5zeW1ib2xDb2RlID09PSBTeW1ib2xzQ29kZXMuaWRlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNjYW5JZGVudGlmaWVyQnJhbmNoKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoIHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5mbG9hdEMgfHxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zeW1ib2wuc3ltYm9sQ29kZSA9PT0gU3ltYm9sc0NvZGVzLmludEMgfHxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zeW1ib2wuc3ltYm9sQ29kZSA9PT0gU3ltYm9sc0NvZGVzLnN0cmluZ0MgfHxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zeW1ib2wuc3ltYm9sQ29kZSA9PT0gU3ltYm9sc0NvZGVzLmNoYXJDIHx8XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5ib29sZWFuQyApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNjYW5VbnNpZ25lZENvbnN0YW50KCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zeW1ib2wuc3ltYm9sQ29kZSA9PT0gU3ltYm9sc0NvZGVzLmxlZnRQYXIpIHtcbiAgICAgICAgICAgIHRoaXMubmV4dFN5bSgpO1xuICAgICAgICAgICAgbGV0IGVtYmVkZGVkRXhwcmVzc2lvbiA9IHRoaXMuc2NhbkV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgIHRoaXMuYWNjZXB0KFN5bWJvbHNDb2Rlcy5yaWdodFBhcik7XG4gICAgICAgICAgICByZXR1cm4gZW1iZWRkZWRFeHByZXNzaW9uO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2NhblBhcmFtZXRlcnMoKVxuICAgIHtcbiAgICAgICAgbGV0IHBhcmFtZXRlcnMgPSBbXTtcbiAgICAgICAgaWYgKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgIT09IFN5bWJvbHNDb2Rlcy5yaWdodFBhcikge1xuICAgICAgICAgICAgZG8ge1xuXG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnMubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN5bWJvbC5zeW1ib2xDb2RlID09PSBTeW1ib2xzQ29kZXMuY29tbWEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0U3ltKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVycy5wdXNoKHRoaXMuc2NhbkV4cHJlc3Npb24oKSk7XG5cbiAgICAgICAgICAgIH0gd2hpbGUgKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUgPT09IFN5bWJvbHNDb2Rlcy5jb21tYSlcblxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hY2NlcHQoU3ltYm9sc0NvZGVzLnJpZ2h0UGFyKTtcblxuICAgICAgICByZXR1cm4gcGFyYW1ldGVycztcbiAgICB9XG5cbiAgICAvKiog0KHQuNC90YLQsNC60YHQuNGH0LXRgdC60LDRjyDQtNC40LDQs9GA0LDQvNC80LAgXCLQutC+0L3RgdGC0LDQvdGC0LAg0LHQtdC3INC30L3QsNC60LBcIiAqL1xuICAgIHNjYW5VbnNpZ25lZENvbnN0YW50KClcbiAgICB7XG4gICAgICAgIGxldCBjb25zdGFudCA9IG51bGw7XG5cbiAgICAgICAgc3dpdGNoKHRoaXMuc3ltYm9sLnN5bWJvbENvZGUpIHtcbiAgICAgICAgICAgIGNhc2UgU3ltYm9sc0NvZGVzLmZsb2F0QzpcbiAgICAgICAgICAgIGNhc2UgU3ltYm9sc0NvZGVzLmludEM6XG4gICAgICAgICAgICBjYXNlIFN5bWJvbHNDb2Rlcy5jaGFyQzpcbiAgICAgICAgICAgIGNhc2UgU3ltYm9sc0NvZGVzLnN0cmluZ0M6XG4gICAgICAgICAgICBjYXNlIFN5bWJvbHNDb2Rlcy5ib29sZWFuQzpcbiAgICAgICAgICAgICAgICBjb25zdGFudCA9IG5ldyBDb25zdGFudCh0aGlzLnN5bWJvbCk7XG4gICAgICAgICAgICAgICAgdGhpcy5uZXh0U3ltKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuXG4gICAgLyoqINCh0LjQvdGC0LDQutGB0LjRh9C10YHQutCw0Y8g0LTQuNCw0LPRgNCw0LzQvNCwIFwi0LrQvtC90YHRgtCw0L3RgtCwXCIgKi9cbiAgICBzY2FuQ29uc3RhbnQoKVxuICAgIHtcbiAgICAgICAgbGV0IHVuYXJ5TWludXMgPSBmYWxzZTtcbiAgICAgICAgbGV0IHNpZ25TeW1ib2wgPSBudWxsO1xuICAgICAgICBzd2l0Y2godGhpcy5zeW1ib2wuc3ltYm9sQ29kZSkge1xuICAgICAgICAgICAgY2FzZSBTeW1ib2xzQ29kZXMubWludXM6XG4gICAgICAgICAgICAgICAgc2lnblN5bWJvbCA9IHRoaXMuc3ltYm9sO1xuICAgICAgICAgICAgICAgIHRoaXMubmV4dFN5bSgpO1xuICAgICAgICAgICAgICAgIHVuYXJ5TWludXMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTeW1ib2xzQ29kZXMucGx1czpcbiAgICAgICAgICAgICAgICBzaWduU3ltYm9sID0gdGhpcy5zeW1ib2w7XG4gICAgICAgICAgICAgICAgdGhpcy5uZXh0U3ltKCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY29uc3RhbnQgPSBudWxsO1xuXG4gICAgICAgIHN3aXRjaCh0aGlzLnN5bWJvbC5zeW1ib2xDb2RlKSB7XG4gICAgICAgICAgICBjYXNlIFN5bWJvbHNDb2Rlcy5mbG9hdEM6XG4gICAgICAgICAgICBjYXNlIFN5bWJvbHNDb2Rlcy5pbnRDOlxuICAgICAgICAgICAgY2FzZSBTeW1ib2xzQ29kZXMuY2hhckM6XG4gICAgICAgICAgICBjYXNlIFN5bWJvbHNDb2Rlcy5zdHJpbmdDOlxuICAgICAgICAgICAgY2FzZSBTeW1ib2xzQ29kZXMuYm9vbGVhbkM6XG4gICAgICAgICAgICBjYXNlIFN5bWJvbHNDb2Rlcy5pZGVudDpcbiAgICAgICAgICAgICAgICBjb25zdGFudCA9IG5ldyBDb25zdGFudCh0aGlzLnN5bWJvbCk7XG4gICAgICAgICAgICAgICAgdGhpcy5uZXh0U3ltKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodW5hcnlNaW51cykge1xuICAgICAgICAgICAgY29uc3RhbnQgPSBuZXcgVW5hcnlNaW51cyhzaWduU3ltYm9sLCBjb25zdGFudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuXG4gICAgYWRkRXJyb3IoZXJyb3JDb2RlLCBlcnJvclRleHQgPSBudWxsLCBzeW1ib2wpXG4gICAge1xuICAgICAgICB0aGlzLmxleGljYWxBbmFseXplci5maWxlSU8uYWRkRXJyb3IoZXJyb3JDb2RlLCBlcnJvclRleHQsIHN5bWJvbC50ZXh0UG9zaXRpb24pO1xuICAgIH1cbn07IiwiZXhwb3J0IGNsYXNzIEJhc2VWYXJpYWJsZVxue1xuICAgIGNvbnN0cnVjdG9yKClcbiAgICB7XG4gICAgICAgIHRoaXMudHlwZSA9IG51bGw7XG4gICAgICAgIHRoaXMudHlwZUlkID0gbnVsbDtcbiAgICB9XG5cbiAgICBnZXRUeXBlKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUgPyB0aGlzLnR5cGUgOiB0aGlzLnR5cGVJZDtcbiAgICB9XG59IiwiaW1wb3J0IHsgQmFzZVZhcmlhYmxlIH0gZnJvbSAnLi9CYXNlVmFyaWFibGUuanMnO1xuXG5leHBvcnQgY2xhc3MgU2NhbGFyVmFyaWFibGUgZXh0ZW5kcyBCYXNlVmFyaWFibGVcbntcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSwgdHlwZUlkKVxuICAgIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLnR5cGVJZCA9IHR5cGVJZDtcbiAgICAgICAgdGhpcy50eXBlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgY2xvbmUoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTY2FsYXJWYXJpYWJsZSh0aGlzLnZhbHVlLCB0aGlzLnR5cGVJZCk7XG4gICAgfVxufSIsImltcG9ydCB7IFR5cGVzSWRzIH0gZnJvbSAnLi9UeXBlc0lkcy5qcyc7XG5pbXBvcnQgeyBCYXNlVmFyaWFibGUgfSBmcm9tICcuL0Jhc2VWYXJpYWJsZS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBFbnVtVmFyaWFibGUgZXh0ZW5kcyBCYXNlVmFyaWFibGVcbntcbiAgICBjb25zdHJ1Y3RvcihpZGVudGlmaWVyLCB0eXBlKVxuICAgIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IGlkZW50aWZpZXI7XG4gICAgICAgIHRoaXMudHlwZUlkID0gVHlwZXNJZHMuRU5VTTtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB9XG5cbiAgICBnZXRJbmRleCgpXG4gICAge1xuICAgICAgICBsZXQgbGVuID0gdGhpcy50eXBlLml0ZW1zLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgbGV0IGl0ZW0gPSB0aGlzLnR5cGUuaXRlbXNbaV07XG4gICAgICAgICAgICBpZiAoaXRlbS5zeW1ib2wuc3RyaW5nVmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gdGhpcy52YWx1ZS5zeW1ib2wuc3RyaW5nVmFsdWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xvbmUoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFbnVtVmFyaWFibGUodGhpcy52YWx1ZSwgdGhpcy50eXBlKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgVHlwZXNJZHMgfSBmcm9tICcuL1R5cGVzSWRzLmpzJztcbmltcG9ydCB7IEJhc2VWYXJpYWJsZSB9IGZyb20gJy4vQmFzZVZhcmlhYmxlLmpzJztcbmltcG9ydCB7IEFycmF5VHlwZSB9IGZyb20gJy4uLy4uL1N5bnRheEFuYWx5emVyL1RyZWUvVHlwZXMvQXJyYXlUeXBlLmpzJztcbmltcG9ydCB7IEluZGV4UmluZyB9IGZyb20gJy4uLy4uL1N5bnRheEFuYWx5emVyL1RyZWUvQXJyYXlzL0luZGV4UmluZy5qcyc7XG5pbXBvcnQgeyBFcnJvcnNDb2RlcyB9IGZyb20gJy4uLy4uL0Vycm9ycy9FcnJvcnNDb2Rlcy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBBcnJheVZhcmlhYmxlIGV4dGVuZHMgQmFzZVZhcmlhYmxlXG57XG4gICAgY29uc3RydWN0b3IodHlwZSwgc2NvcGUpXG4gICAge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnR5cGVJZCA9IFR5cGVzSWRzLkFSUkFZO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuaXRlbXMgPSBbXTtcblxuICAgICAgICB0aGlzLmxlZnRJbnRlZ2VySW5kZXggPSAwO1xuICAgICAgICB0aGlzLnJpZ2h0SW50ZWdlckluZGV4ID0gbnVsbDtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBudWxsO1xuICAgICAgICB0aGlzLmFycmF5TGVuZ3RoID0gbnVsbDtcbiAgICB9XG5cbiAgICBzZXRWYWx1ZShpbmRleFJpbmcsIHR5cGUsIHZhbHVlKVxuICAgIHtcbiAgICAgICAgbGV0IGluZGV4RXhwcmVzc2lvbiA9IGluZGV4UmluZy5ldmFsdWF0ZWRJbmRleEV4cHJlc3Npb247XG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMuc2NvcGUuZ2V0SW50ZWdlclZhbHVlT2ZJbmRleFZhcmlhYmxlKGluZGV4RXhwcmVzc2lvbikgKyB0aGlzLm9mZnNldDtcblxuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMuYXJyYXlMZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuc2NvcGUuYWRkRXJyb3IoRXJyb3JzQ29kZXMuaW5kZXhJc091dE9mUmFuZ2UsICcnLCBpbmRleFJpbmcpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLml0ZW1zW2luZGV4XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbXNbaW5kZXhdID0gdGhpcy5zY29wZS5jcmVhdGVWYXJpYWJsZSh0aGlzLnR5cGUudHlwZU9mRWxlbWVudHMsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgaXRlbSA9IHRoaXMuaXRlbXNbaW5kZXhdO1xuICAgICAgICBpZiAoaW5kZXhSaW5nLmluZGV4UmluZyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgaXRlbS52YWx1ZSA9IHZhbHVlLnZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKGluZGV4UmluZy5pbmRleFJpbmcgaW5zdGFuY2VvZiBJbmRleFJpbmcpIHtcbiAgICAgICAgICAgIGl0ZW0uc2V0VmFsdWUoaW5kZXhSaW5nLmluZGV4UmluZywgdHlwZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0QnlJbmRleFJpbmcoaW5kZXhSaW5nKVxuICAgIHtcbiAgICAgICAgbGV0IGluZGV4RXhwcmVzc2lvbiA9IGluZGV4UmluZy5ldmFsdWF0ZWRJbmRleEV4cHJlc3Npb247XG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMuc2NvcGUuZ2V0SW50ZWdlclZhbHVlT2ZJbmRleFZhcmlhYmxlKGluZGV4RXhwcmVzc2lvbikgKyB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLmFycmF5TGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnNjb3BlLmFkZEVycm9yKEVycm9yc0NvZGVzLmluZGV4SXNPdXRPZlJhbmdlLCAnJywgaW5kZXhSaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5pdGVtc1tpbmRleF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgIHRoaXMuaXRlbXNbaW5kZXhdID0gdGhpcy5zY29wZS5jcmVhdGVEZWZhdWx0VmFyaWFibGUodGhpcy50eXBlLnR5cGVPZkVsZW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBmb3VuZEl0ZW0gPSB0aGlzLml0ZW1zW2luZGV4XTtcbiAgICAgICAgICAgIHJldHVybiAgaW5kZXhSaW5nLmluZGV4UmluZyBpbnN0YW5jZW9mIEluZGV4UmluZyA/XG4gICAgICAgICAgICAgICAgICAgIGZvdW5kSXRlbS5nZXRCeUluZGV4UmluZyhpbmRleFJpbmcuaW5kZXhSaW5nKSA6XG4gICAgICAgICAgICAgICAgICAgIGZvdW5kSXRlbTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsb25lKClcbiAgICB7XG4gICAgICAgIGxldCBjb3B5QXJyYXlWYXJpYWJsZSA9IG5ldyBBcnJheVZhcmlhYmxlKHRoaXMudHlwZSwgdGhpcy5zY29wZSk7XG5cbiAgICAgICAgY29weUFycmF5VmFyaWFibGUucmlnaHRJbnRlZ2VySW5kZXggPSB0aGlzLnJpZ2h0SW50ZWdlckluZGV4O1xuICAgICAgICBjb3B5QXJyYXlWYXJpYWJsZS5vZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgY29weUFycmF5VmFyaWFibGUuYXJyYXlMZW5ndGggPSB0aGlzLmFycmF5TGVuZ3RoO1xuICAgICAgICBjb3B5QXJyYXlWYXJpYWJsZS5wYXJlbnRBcnJheSA9IHRoaXMucGFyZW50QXJyYXk7XG5cbiAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKFxuICAgICAgICAgICAgKGl0ZW0sIGluZGV4KSA9PiB7IGNvcHlBcnJheVZhcmlhYmxlLml0ZW1zW2luZGV4XSA9IGl0ZW0uY2xvbmUoKTsgfVxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBjb3B5QXJyYXlWYXJpYWJsZTtcbiAgICB9XG59IiwiaW1wb3J0IHsgVHlwZXNJZHMgfSBmcm9tICcuL1R5cGVzSWRzLmpzJztcbmltcG9ydCB7IEJhc2VWYXJpYWJsZSB9IGZyb20gJy4vQmFzZVZhcmlhYmxlLmpzJztcbmltcG9ydCB7IEFycmF5VHlwZSB9IGZyb20gJy4uLy4uL1N5bnRheEFuYWx5emVyL1RyZWUvVHlwZXMvQXJyYXlUeXBlLmpzJztcbmltcG9ydCB7IEluZGV4UmluZyB9IGZyb20gJy4uLy4uL1N5bnRheEFuYWx5emVyL1RyZWUvQXJyYXlzL0luZGV4UmluZy5qcyc7XG5pbXBvcnQgeyBFcnJvcnNDb2RlcyB9IGZyb20gJy4uLy4uL0Vycm9ycy9FcnJvcnNDb2Rlcy5qcyc7XG5pbXBvcnQgeyBQb2ludGVyVHlwZSB9IGZyb20gJy4uLy4uL1N5bnRheEFuYWx5emVyL1RyZWUvVHlwZXMvUG9pbnRlclR5cGUuanMnO1xuXG5leHBvcnQgY2xhc3MgUG9pbnRlclZhcmlhYmxlIGV4dGVuZHMgQmFzZVZhcmlhYmxlXG57XG4gICAgY29uc3RydWN0b3IodmFyaWFibGUsIHRhcmdldFR5cGUpXG4gICAge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnR5cGVJZCA9IFR5cGVzSWRzLlBPSU5URVI7XG4gICAgICAgIHRoaXMudHlwZSA9IG5ldyBQb2ludGVyVHlwZShudWxsLCB0YXJnZXRUeXBlKTtcbiAgICAgICAgdGhpcy52YXJpYWJsZSA9IHZhcmlhYmxlO1xuICAgIH1cblxuICAgIGNsb25lKClcbiAgICB7XG4gICAgICAgIHJldHVybiBuZXcgUG9pbnRlclZhcmlhYmxlKHRoaXMudmFyaWFibGUsIHRoaXMudHlwZSk7XG4gICAgfVxufSIsImltcG9ydCB7IFR5cGVzSWRzIH0gZnJvbSAnLi9UeXBlc0lkcy5qcyc7XG5pbXBvcnQgeyBCYXNlVmFyaWFibGUgfSBmcm9tICcuL0Jhc2VWYXJpYWJsZS5qcyc7XG5pbXBvcnQgeyBBcnJheVZhcmlhYmxlIH0gZnJvbSAnLi9BcnJheVZhcmlhYmxlLmpzJztcbmltcG9ydCB7IEFycmF5VHlwZSB9IGZyb20gJy4uLy4uL1N5bnRheEFuYWx5emVyL1RyZWUvVHlwZXMvQXJyYXlUeXBlLmpzJztcbmltcG9ydCB7IEluZGV4UmluZyB9IGZyb20gJy4uLy4uL1N5bnRheEFuYWx5emVyL1RyZWUvQXJyYXlzL0luZGV4UmluZy5qcyc7XG5pbXBvcnQgeyBFcnJvcnNDb2RlcyB9IGZyb20gJy4uLy4uL0Vycm9ycy9FcnJvcnNDb2Rlcy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBSZWNvcmRWYXJpYWJsZSBleHRlbmRzIEJhc2VWYXJpYWJsZVxue1xuICAgIGNvbnN0cnVjdG9yKHR5cGUsIHNjb3BlKVxuICAgIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy50eXBlSWQgPSBUeXBlc0lkcy5SRUNPUkQ7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuaXRlbXMgPSB7fTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgIH1cblxuICAgIHNldFByb3BlcnR5QnlQcm9wZXJ0eUlkZW50aWZpZXIocHJvcGVydHlJZGVudGlmaWVyLCB2YXJpYWJsZSlcbiAgICB7XG4gICAgICAgIGxldCBwcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eUlkZW50aWZpZXIuc3ltYm9sLnZhbHVlO1xuXG4gICAgICAgIGlmICh0aGlzLnR5cGUudHlwZXNMaXN0Lmhhc093blByb3BlcnR5KHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbXNbcHJvcGVydHlOYW1lXSA9IHZhcmlhYmxlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zY29wZS5hZGRFcnJvcihFcnJvcnNDb2Rlcy5pbmRleElzT3V0T2ZSYW5nZSwgYFByb3BlcnR5ICR7cHJvcGVydHlOYW1lfSBpcyBub3QgZGVmaW5lZC5gLCBwcm9wZXJ0eUlkZW50aWZpZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0QnlQcm9wZXJ0eUlkZW50aWZpZXIocHJvcGVydHlJZGVudGlmaWVyKVxuICAgIHtcbiAgICAgICAgbGV0IHByb3BlcnR5TmFtZSA9IHByb3BlcnR5SWRlbnRpZmllci5zeW1ib2wudmFsdWU7XG5cbiAgICAgICAgaWYgKHRoaXMudHlwZS50eXBlc0xpc3QuaGFzT3duUHJvcGVydHkocHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLml0ZW1zLmhhc093blByb3BlcnR5KHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgcHJvcGVydHlUeXBlID0gdGhpcy50eXBlLnR5cGVzTGlzdFtwcm9wZXJ0eU5hbWVdO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtc1twcm9wZXJ0eU5hbWVdID0gdGhpcy5zY29wZS5jcmVhdGVEZWZhdWx0VmFyaWFibGUocHJvcGVydHlUeXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLml0ZW1zW3Byb3BlcnR5TmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNjb3BlLmFkZEVycm9yKEVycm9yc0NvZGVzLmluZGV4SXNPdXRPZlJhbmdlLCBgUHJvcGVydHkgJHtwcm9wZXJ0eU5hbWV9IGlzIG5vdCBkZWZpbmVkLmAsIHByb3BlcnR5SWRlbnRpZmllcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbG9uZSgpXG4gICAge1xuICAgICAgICBsZXQgY29weVJlY29yZFZhcmlhYmxlID0gbmV3IFJlY29yZFZhcmlhYmxlKHRoaXMudHlwZSwgdGhpcy5zY29wZSk7XG5cbiAgICAgICAgbGV0IGNvcHlJdGVtcyA9IHt9O1xuICAgICAgICBsZXQgcHJvcGVydHkgPSBudWxsO1xuXG4gICAgICAgIGZvciAocHJvcGVydHkgaW4gdGhpcy5pdGVtcykge1xuICAgICAgICAgICAgY29weVJlY29yZFZhcmlhYmxlLml0ZW1zW3Byb3BlcnR5XSA9IHRoaXMuaXRlbXNbcHJvcGVydHldLmNsb25lKHRoaXMuc2NvcGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvcHlSZWNvcmRWYXJpYWJsZTtcbiAgICB9XG5cblxufSIsImltcG9ydCB7IEJhc2VWYXJpYWJsZSB9IGZyb20gJy4vQmFzZVZhcmlhYmxlLmpzJztcblxuZXhwb3J0IGNsYXNzIENhbGxhYmxlVmFyaWFibGUgZXh0ZW5kcyBCYXNlVmFyaWFibGVcbntcbiAgICBjb25zdHJ1Y3Rvcih0eXBlLCB2YWx1ZSA9IG51bGwpXG4gICAge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnR5cGVJZCA9IHR5cGUudHlwZUlkO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgY2xvbmUoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDYWxsYWJsZVZhcmlhYmxlKHRoaXMudHlwZSwgdGhpcy52YWx1ZSk7XG4gICAgfVxufSIsImltcG9ydCB7IFByb2dyYW1CYXNlIH0gZnJvbSAnLi4vU3ludGF4QW5hbHl6ZXIvVHJlZS9Qcm9ncmFtQmFzZS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBQcm9jZWR1cmVJdGVtIGV4dGVuZHMgUHJvZ3JhbUJhc2VcbntcbiAgICBjb25zdHJ1Y3RvcigpXG4gICAge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnZhcnMgPSBbXTtcbiAgICAgICAgdGhpcy5zaWduYXR1cmUgPSBbXTtcbiAgICAgICAgdGhpcy5zZW50ZW5jZXMgPSBbXTtcbiAgICAgICAgdGhpcy5uYW1lID0gbnVsbDtcbiAgICB9XG5cbiAgICBhc3luYyBpbm5lclJ1bigpXG4gICAge1xuICAgIH1cbn07IiwiaW1wb3J0IHsgUHJvY2VkdXJlSXRlbSB9IGZyb20gJy4vUHJvY2VkdXJlSXRlbS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBGdW5jdGlvbkl0ZW0gZXh0ZW5kcyBQcm9jZWR1cmVJdGVtXG57XG4gICAgY29uc3RydWN0b3IoKVxuICAgIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5yZXR1cm5UeXBlID0gbnVsbDtcbiAgICB9XG59OyIsImltcG9ydCB7IFR5cGVzSWRzIH0gZnJvbSAnLi9WYXJpYWJsZXMvVHlwZXNJZHMuanMnO1xuaW1wb3J0IHsgU2NhbGFyVmFyaWFibGUgfSBmcm9tICcuL1ZhcmlhYmxlcy9TY2FsYXJWYXJpYWJsZS5qcyc7XG5pbXBvcnQgeyBFbnVtVmFyaWFibGUgfSBmcm9tICcuL1ZhcmlhYmxlcy9FbnVtVmFyaWFibGUuanMnO1xuaW1wb3J0IHsgQXJyYXlWYXJpYWJsZSB9IGZyb20gJy4vVmFyaWFibGVzL0FycmF5VmFyaWFibGUuanMnO1xuaW1wb3J0IHsgUG9pbnRlclZhcmlhYmxlIH0gZnJvbSAnLi9WYXJpYWJsZXMvUG9pbnRlclZhcmlhYmxlLmpzJztcbmltcG9ydCB7IFJlY29yZFZhcmlhYmxlIH0gZnJvbSAnLi9WYXJpYWJsZXMvUmVjb3JkVmFyaWFibGUuanMnO1xuaW1wb3J0IHsgQ2FsbGFibGVWYXJpYWJsZSB9IGZyb20gJy4vVmFyaWFibGVzL0NhbGxhYmxlVmFyaWFibGUuanMnO1xuaW1wb3J0IHsgUnVudGltZUVycm9yIH0gZnJvbSAnLi4vRXJyb3JzL1J1bnRpbWVFcnJvci5qcyc7XG5pbXBvcnQgeyBFcnJvcnNEZXNjcmlwdGlvbiB9IGZyb20gJy4uL0Vycm9ycy9FcnJvcnNEZXNjcmlwdGlvbi5qcyc7XG5pbXBvcnQgeyBFcnJvcnNDb2RlcyB9IGZyb20gJy4uL0Vycm9ycy9FcnJvcnNDb2Rlcy5qcyc7XG5pbXBvcnQgeyBTY2FsYXJUeXBlIH0gZnJvbSAnLi4vU3ludGF4QW5hbHl6ZXIvVHJlZS9UeXBlcy9TY2FsYXJUeXBlLmpzJztcbmltcG9ydCB7IEFwcGxpZWROYW1lZFR5cGUgfSBmcm9tICcuLi9TeW50YXhBbmFseXplci9UcmVlL1R5cGVzL0FwcGxpZWROYW1lZFR5cGUuanMnO1xuaW1wb3J0IHsgRW51bVR5cGUgfSBmcm9tICcuLi9TeW50YXhBbmFseXplci9UcmVlL1R5cGVzL0VudW1UeXBlLmpzJztcbmltcG9ydCB7IEZ1bmN0aW9uVHlwZSB9IGZyb20gJy4uL1N5bnRheEFuYWx5emVyL1RyZWUvVHlwZXMvRnVuY3Rpb25UeXBlLmpzJztcbmltcG9ydCB7IFByb2NlZHVyZVR5cGUgfSBmcm9tICcuLi9TeW50YXhBbmFseXplci9UcmVlL1R5cGVzL1Byb2NlZHVyZVR5cGUuanMnO1xuaW1wb3J0IHsgQXJyYXlUeXBlIH0gZnJvbSAnLi4vU3ludGF4QW5hbHl6ZXIvVHJlZS9UeXBlcy9BcnJheVR5cGUuanMnO1xuaW1wb3J0IHsgUG9pbnRlclR5cGUgfSBmcm9tICcuLi9TeW50YXhBbmFseXplci9UcmVlL1R5cGVzL1BvaW50ZXJUeXBlLmpzJztcbmltcG9ydCB7IFJlY29yZFR5cGUgfSBmcm9tICcuLi9TeW50YXhBbmFseXplci9UcmVlL1R5cGVzL1JlY29yZFR5cGUuanMnO1xuaW1wb3J0IHsgSWRlbnRpZmllciB9IGZyb20gJy4uL1N5bnRheEFuYWx5emVyL1RyZWUvSWRlbnRpZmllci5qcyc7XG5pbXBvcnQgeyBJbmRleGVkSWRlbnRpZmllciB9IGZyb20gJy4uL1N5bnRheEFuYWx5emVyL1RyZWUvQXJyYXlzL0luZGV4ZWRJZGVudGlmaWVyLmpzJztcbmltcG9ydCB7IEluZGV4UmluZyB9IGZyb20gJy4uL1N5bnRheEFuYWx5emVyL1RyZWUvQXJyYXlzL0luZGV4UmluZy5qcyc7XG5pbXBvcnQgeyBDb25zdGFudCB9IGZyb20gJy4uL1N5bnRheEFuYWx5emVyL1RyZWUvQ29uc3RhbnQuanMnO1xuaW1wb3J0IHsgVW5hcnlNaW51cyB9IGZyb20gJy4uL1N5bnRheEFuYWx5emVyL1RyZWUvVW5hcnlNaW51cy5qcyc7XG5pbXBvcnQgeyBQcm9jZWR1cmVJdGVtIH0gZnJvbSAnLi9Qcm9jZWR1cmVJdGVtLmpzJztcbmltcG9ydCB7IEZ1bmN0aW9uSXRlbSB9IGZyb20gJy4vRnVuY3Rpb25JdGVtLmpzJztcblxuXG5leHBvcnQgY2xhc3MgU2NvcGVcbntcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnRTY29wZSA9IG51bGwpXG4gICAge1xuICAgICAgICB0aGlzLnBhcmVudFNjb3BlID0gcGFyZW50U2NvcGU7XG4gICAgICAgIHRoaXMuaXRlbXMgPSB7fTtcbiAgICAgICAgdGhpcy5jb25zdGFudHMgPSB7fTtcbiAgICAgICAgdGhpcy5lbnVtc0l0ZW1zID0ge307XG4gICAgICAgIHRoaXMudHlwZXMgPSB7fTtcbiAgICAgICAgdGhpcy5jeWNsZURlcHRoID0gMDtcbiAgICAgICAgdGhpcy5lcnJvcnNEZXNjcmlwdGlvbiA9IG5ldyBFcnJvcnNEZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzTGlzdCA9IG51bGw7XG4gICAgICAgIHRoaXMuY2FsbGFibGVOYW1lID0gbnVsbDtcbiAgICB9XG5cbiAgICBhZGRWYXJpYWJsZShpZGVudGlmaWVyLCB0eXBlLCB2YWx1ZSA9IG51bGwsIHRyZWVOb2RlID0gbnVsbClcbiAgICB7XG4gICAgICAgIGxldCBuYW1lID0gaWRlbnRpZmllci5zeW1ib2wudmFsdWU7XG4gICAgICAgIGxldCBsb3dlckNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAodGhpcy5jb25zdGFudHMuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlTmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkRXJyb3IoRXJyb3JzQ29kZXMuaWRlbnRpZmllckFscmVhZHlVc2VkLCBgQ29uc3RhbnQgJyR7bG93ZXJDYXNlTmFtZX0nIGRlY2xhcmVkLmAsIHRyZWVOb2RlID09PSBudWxsID8gdHlwZSA6IHRyZWVOb2RlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLml0ZW1zLmhhc093blByb3BlcnR5KGxvd2VyQ2FzZU5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLmFkZEVycm9yKEVycm9yc0NvZGVzLmlkZW50aWZpZXJBbHJlYWR5VXNlZCwgYFZhcmlhYmxlICcke2xvd2VyQ2FzZU5hbWV9JyBhbHJlYWR5IGRlY2xhcmVkLmAsIHRyZWVOb2RlID09PSBudWxsID8gdHlwZSA6IHRyZWVOb2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbXNbbG93ZXJDYXNlTmFtZV0gPSB0aGlzLmNyZWF0ZVZhcmlhYmxlKHR5cGUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZVZhcmlhYmxlKHR5cGUsIHZhbHVlID0gbnVsbClcbiAgICB7XG4gICAgICAgIGxldCByZXNvbHZlZFR5cGUgPSB0aGlzLnJlc29sdmVOYW1lZFR5cGUodHlwZSk7XG5cbiAgICAgICAgaWYgKHJlc29sdmVkVHlwZSBpbnN0YW5jZW9mIFNjYWxhclR5cGUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAocmVzb2x2ZWRUeXBlLnR5cGVJZCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFR5cGVzSWRzLklOVEVHRVI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgVHlwZXNJZHMuUkVBTDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFR5cGVzSWRzLkNIQVI6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBUeXBlc0lkcy5TVFJJTkc6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTY2FsYXJWYXJpYWJsZSh2YWx1ZSwgcmVzb2x2ZWRUeXBlLnR5cGVJZCk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzb2x2ZWRUeXBlIGluc3RhbmNlb2YgRW51bVR5cGUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gcmVzb2x2ZWRUeXBlLml0ZW1zWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBFbnVtVmFyaWFibGUodmFsdWUsIHJlc29sdmVkVHlwZSk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzb2x2ZWRUeXBlIGluc3RhbmNlb2YgQXJyYXlUeXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVBcnJheVZhcmlhYmxlKHZhbHVlLCB0eXBlKTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXNvbHZlZFR5cGUgaW5zdGFuY2VvZiBQb2ludGVyVHlwZSkge1xuICAgICAgICAgICAgbGV0IHRhcmdldFR5cGUgPSB0aGlzLnJlc29sdmVOYW1lZFR5cGUodHlwZS50eXBlKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUG9pbnRlclZhcmlhYmxlKHZhbHVlLCB0YXJnZXRUeXBlKTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXNvbHZlZFR5cGUgaW5zdGFuY2VvZiBGdW5jdGlvblR5cGUgfHxcbiAgICAgICAgICAgIHJlc29sdmVkVHlwZSBpbnN0YW5jZW9mIFByb2NlZHVyZVR5cGUgfHxcbiAgICAgICAgICAgIHJlc29sdmVkVHlwZSBpbnN0YW5jZW9mIFJlY29yZFR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZURlZmF1bHRWYXJpYWJsZShyZXNvbHZlZFR5cGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0SW50ZWdlclZhbHVlT2ZJbmRleENvbnN0YW50KGNvbnN0YW50KVxuICAgIHtcbiAgICAgICAgaWYgKGNvbnN0YW50IGluc3RhbmNlb2YgQ29uc3RhbnQpIHtcbiAgICAgICAgICAgIGxldCB0eXBlSWQgPSBjb25zdGFudC50eXBlSWQ7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGVJZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgVHlwZXNJZHMuSU5URUdFUjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50LnN5bWJvbC52YWx1ZTtcbiAgICAgICAgICAgICAgICBjYXNlIFR5cGVzSWRzLkNIQVI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudC5zeW1ib2wudmFsdWUuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgICAgICBjYXNlIFR5cGVzSWRzLkVOVU06XG4gICAgICAgICAgICAgICAgICAgIGxldCBlbnVtRWxlbWVudCA9IHRoaXMuZ2V0RW51bUVsZW1lbnQoY29uc3RhbnQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW51bUVsZW1lbnQuZ2V0SW5kZXgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChjb25zdGFudCBpbnN0YW5jZW9mIFVuYXJ5TWludXMpIHtcbiAgICAgICAgICAgIGxldCB2YWx1ZUV4cHJlc3Npb24gPSBjb25zdGFudC52YWx1ZTtcbiAgICAgICAgICAgIGlmICh2YWx1ZUV4cHJlc3Npb24gaW5zdGFuY2VvZiBDb25zdGFudCAmJlxuICAgICAgICAgICAgICAgIHZhbHVlRXhwcmVzc2lvbi50eXBlSWQgPT09IFR5cGVzSWRzLklOVEVHRVIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLXZhbHVlRXhwcmVzc2lvbi5zeW1ib2wudmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkRXJyb3IoRXJyb3JzQ29kZXMudHlwZXNNaXNtYXRjaCwgYEludGVnZXIgY29uc3RhbnQgZXhwZWN0ZWQgYWZ0ZXIgdW5hcnkgbWludXMuYCwgdmFsdWVFeHByZXNzaW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldEludGVnZXJWYWx1ZU9mSW5kZXhWYXJpYWJsZSh2YXJpYWJsZSlcbiAgICB7XG4gICAgICAgIGxldCB0eXBlSWQgPSB2YXJpYWJsZS50eXBlSWQ7XG4gICAgICAgIHN3aXRjaCAodHlwZUlkKSB7XG4gICAgICAgICAgICBjYXNlIFR5cGVzSWRzLklOVEVHRVI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhcmlhYmxlLnZhbHVlO1xuICAgICAgICAgICAgY2FzZSBUeXBlc0lkcy5DSEFSOlxuICAgICAgICAgICAgICAgIHJldHVybiB2YXJpYWJsZS52YWx1ZS5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgY2FzZSBUeXBlc0lkcy5FTlVNOlxuICAgICAgICAgICAgICAgIGxldCBlbnVtRWxlbWVudCA9IHRoaXMuZ2V0RW51bUVsZW1lbnQodmFyaWFibGUudmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBlbnVtRWxlbWVudC5nZXRJbmRleCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlQXJyYXlWYXJpYWJsZShwYXJlbnRBcnJheSwgdHlwZSlcbiAgICB7XG4gICAgICAgIGxldCByZXNvbHZlZFR5cGUgPSB0aGlzLnJlc29sdmVOYW1lZFR5cGUodHlwZSk7XG4gICAgICAgIGxldCB2YXJpYWJsZSA9IG5ldyBBcnJheVZhcmlhYmxlKHJlc29sdmVkVHlwZSwgdGhpcyk7XG5cbiAgICAgICAgdmFyaWFibGUucGFyZW50QXJyYXkgPSBwYXJlbnRBcnJheTtcbiAgICAgICAgbGV0IGxlZnRJbmRleCA9IHJlc29sdmVkVHlwZS5sZWZ0SW5kZXg7XG4gICAgICAgIGxldCByaWdodEluZGV4ID0gcmVzb2x2ZWRUeXBlLnJpZ2h0SW5kZXg7XG4gICAgICAgIGxldCBsZWZ0SW50ZWdlckluZGV4ID0gdGhpcy5nZXRJbnRlZ2VyVmFsdWVPZkluZGV4Q29uc3RhbnQobGVmdEluZGV4KTtcbiAgICAgICAgbGV0IHJpZ2h0SW50ZWdlckluZGV4ID0gdGhpcy5nZXRJbnRlZ2VyVmFsdWVPZkluZGV4Q29uc3RhbnQocmlnaHRJbmRleCk7XG5cbiAgICAgICAgbGV0IG1pbkludGVnZXJJbmRleCA9IE1hdGgubWluKGxlZnRJbnRlZ2VySW5kZXgsIHJpZ2h0SW50ZWdlckluZGV4KTtcbiAgICAgICAgbGV0IG1heEludGVnZXJJbmRleCA9IE1hdGgubWF4KGxlZnRJbnRlZ2VySW5kZXgsIHJpZ2h0SW50ZWdlckluZGV4KTtcbiAgICAgICAgbGV0IG9mZnNldCA9IC1taW5JbnRlZ2VySW5kZXg7XG5cbiAgICAgICAgdmFyaWFibGUub2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICB2YXJpYWJsZS5hcnJheUxlbmd0aCA9IG1heEludGVnZXJJbmRleCAtIG1pbkludGVnZXJJbmRleCArIDE7XG4gICAgICAgIHZhcmlhYmxlLmxlZnRJbnRlZ2VySW5kZXggPSAwO1xuICAgICAgICB2YXJpYWJsZS5yaWdodEludGVnZXJJbmRleCA9IG1heEludGVnZXJJbmRleDtcbiAgICAgICAgdmFyaWFibGUucmlnaHRJbnRlZ2VySW5kZXggPSBtYXhJbnRlZ2VySW5kZXg7XG5cbiAgICAgICAgcmV0dXJuIHZhcmlhYmxlO1xuICAgIH1cblxuICAgIHJlc29sdmVOYW1lZFR5cGUodHlwZSlcbiAgICB7XG4gICAgICAgIGlmICh0eXBlIGluc3RhbmNlb2YgQXBwbGllZE5hbWVkVHlwZSkge1xuICAgICAgICAgICAgbGV0IG5hbWUgPSB0eXBlLnN5bWJvbC5zdHJpbmdWYWx1ZTtcbiAgICAgICAgICAgIGxldCByZWZUeXBlID0gdGhpcy5nZXRUeXBlKG5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZU5hbWVkVHlwZShyZWZUeXBlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAgdHlwZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqICDQlNC70Y8gU2NhbGFyVmFyaWFibGUg0LjRgdC/0L7Qu9GM0LfRg9C10YLRgdGPINGC0L7Qu9GM0LrQviB0eXBlSWQuXG4gICAgICogINCSIHR5cGUg0L/QtdGA0LXQtNCw0ZHRgtGB0Y8g0YLQuNC/INC40LvQuCBpZCDRgtC40L/QsC5cbiAgICAgKi9cbiAgICBzZXRWYWx1ZShkZXN0aW5hdGlvbiwgdHlwZSwgdmFsdWUsIHRyZWVOb2RlID0gbnVsbClcbiAgICB7XG4gICAgICAgIGxldCBpZGVudGlmaWVyID0gbnVsbDtcblxuICAgICAgICBpZiAoZGVzdGluYXRpb24gaW5zdGFuY2VvZiBJZGVudGlmaWVyKSB7XG4gICAgICAgICAgICBpZGVudGlmaWVyID0gZGVzdGluYXRpb247XG4gICAgICAgIH0gZWxzZSBpZiAoZGVzdGluYXRpb24gaW5zdGFuY2VvZiBJbmRleGVkSWRlbnRpZmllcikge1xuICAgICAgICAgICAgaWRlbnRpZmllciA9IGRlc3RpbmF0aW9uLmlkZW50aWZpZXI7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5hbWUgPSBpZGVudGlmaWVyLnN5bWJvbC5zdHJpbmdWYWx1ZTtcbiAgICAgICAgbGV0IGxvd2VyQ2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICh0aGlzLml0ZW1zLmhhc093blByb3BlcnR5KGxvd2VyQ2FzZU5hbWUpKSB7XG4gICAgICAgICAgICBsZXQgaXRlbSA9IHRoaXMuaXRlbXNbbG93ZXJDYXNlTmFtZV07XG5cbiAgICAgICAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgU2NhbGFyVmFyaWFibGUgfHxcbiAgICAgICAgICAgICAgICBpdGVtIGluc3RhbmNlb2YgRW51bVZhcmlhYmxlIHx8XG4gICAgICAgICAgICAgICAgaXRlbSBpbnN0YW5jZW9mIENhbGxhYmxlVmFyaWFibGUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zYW1lVHlwZShpdGVtLmdldFR5cGUoKSwgdHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pdGVtc1tsb3dlckNhc2VOYW1lXS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVHlwZU1pc21hdGNoRXJyb3IodHlwZSwgaXRlbSwgdHJlZU5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbSBpbnN0YW5jZW9mIEFycmF5VmFyaWFibGUpIHtcblxuICAgICAgICAgICAgICAgIGxldCBkZXN0aW5hdGlvblR5cGUgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChkZXN0aW5hdGlvbiBpbnN0YW5jZW9mIElkZW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25UeXBlID0gaXRlbS50eXBlO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zYW1lVHlwZSh0eXBlLCBkZXN0aW5hdGlvblR5cGUpKSB7O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRWYXJpYWJsZU9iamVjdChkZXN0aW5hdGlvbiwgdmFsdWUuY2xvbmUoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFR5cGVNaXNtYXRjaEVycm9yKHR5cGUsIGl0ZW0sIHRyZWVOb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVzdGluYXRpb24gaW5zdGFuY2VvZiBJbmRleGVkSWRlbnRpZmllcikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXhSaW5nID0gZGVzdGluYXRpb24uaW5kZXhSaW5nO1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvblR5cGUgPSB0aGlzLmdldERlc3RpbmF0aW9uVHlwZShpdGVtLnR5cGUsIGluZGV4UmluZyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNhbWVUeXBlKHR5cGUsIGRlc3RpbmF0aW9uVHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5VmFyaWFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmNsb25lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnNldFZhbHVlKGluZGV4UmluZywgdHlwZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRUeXBlTWlzbWF0Y2hFcnJvcih0eXBlLCBpdGVtLCB0cmVlTm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0gaW5zdGFuY2VvZiBQb2ludGVyVmFyaWFibGUgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZSBpbnN0YW5jZW9mIFBvaW50ZXJUeXBlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2FtZVR5cGUoaXRlbS50eXBlLCB0eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS52YXJpYWJsZSA9IHZhbHVlLnZhcmlhYmxlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRUeXBlTWlzbWF0Y2hFcnJvcih0eXBlLCBpdGVtLCB0cmVlTm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRFcnJvcihFcnJvcnNDb2Rlcy50eXBlc01pc21hdGNoLCBudWxsLCB0cmVlTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5wYXJlbnRTY29wZSkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnRTY29wZS5zZXRWYWx1ZShkZXN0aW5hdGlvbiwgdHlwZSwgdmFsdWUsIHRyZWVOb2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWRkRXJyb3IoRXJyb3JzQ29kZXMudmFyaWFibGVOb3REZWNsYXJlZCwgYFZhcmlhYmxlICcke2xvd2VyQ2FzZU5hbWV9JyBub3QgZGVjbGFyZWQuYCwgdHJlZU5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogINCU0LvRjyBTY2FsYXJWYXJpYWJsZSDQuNGB0L/QvtC70YzQt9GD0LXRgtGB0Y8g0YLQvtC70YzQutC+IHR5cGVJZC5cbiAgICAgKiAg0JIgdHlwZSDQv9C10YDQtdC00LDRkdGC0YHRjyDRgtC40L8g0LjQu9C4IGlkINGC0LjQv9CwLlxuICAgICAqL1xuICAgIHNldFZhcmlhYmxlVmFsdWUoZGVzdGluYXRpb24sIHZhcmlhYmxlLCB0cmVlTm9kZSA9IG51bGwpXG4gICAge1xuICAgICAgICBsZXQgdHlwZSA9IHZhcmlhYmxlLmdldFR5cGUoKTtcbiAgICAgICAgbGV0IGlkZW50aWZpZXIgPSBudWxsO1xuXG4gICAgICAgIGlmIChkZXN0aW5hdGlvbiBpbnN0YW5jZW9mIElkZW50aWZpZXIpIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXIgPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgfSBlbHNlIGlmIChkZXN0aW5hdGlvbiBpbnN0YW5jZW9mIEluZGV4ZWRJZGVudGlmaWVyKSB7XG4gICAgICAgICAgICBpZGVudGlmaWVyID0gZGVzdGluYXRpb24uaWRlbnRpZmllcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBuYW1lID0gaWRlbnRpZmllci5zeW1ib2wuc3RyaW5nVmFsdWU7XG4gICAgICAgIGxldCBsb3dlckNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAodGhpcy5pdGVtcy5oYXNPd25Qcm9wZXJ0eShsb3dlckNhc2VOYW1lKSkge1xuICAgICAgICAgICAgbGV0IGl0ZW0gPSB0aGlzLml0ZW1zW2xvd2VyQ2FzZU5hbWVdO1xuXG4gICAgICAgICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIFNjYWxhclZhcmlhYmxlIHx8XG4gICAgICAgICAgICAgICAgaXRlbSBpbnN0YW5jZW9mIEVudW1WYXJpYWJsZSB8fFxuICAgICAgICAgICAgICAgIGl0ZW0gaW5zdGFuY2VvZiBDYWxsYWJsZVZhcmlhYmxlIHx8XG4gICAgICAgICAgICAgICAgaXRlbSBpbnN0YW5jZW9mIEFycmF5VmFyaWFibGUgJiZcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbiBpbnN0YW5jZW9mIElkZW50aWZpZXIgfHxcbiAgICAgICAgICAgICAgICBpdGVtIGluc3RhbmNlb2YgUmVjb3JkVmFyaWFibGUgKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zYW1lVHlwZShpdGVtLmdldFR5cGUoKSwgdHlwZSkpIHtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFR5cGVNaXNtYXRjaEVycm9yKHR5cGUsIGl0ZW0sIHRyZWVOb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgU2NhbGFyVmFyaWFibGUgfHxcbiAgICAgICAgICAgICAgICBpdGVtIGluc3RhbmNlb2YgRW51bVZhcmlhYmxlIHx8XG4gICAgICAgICAgICAgICAgaXRlbSBpbnN0YW5jZW9mIENhbGxhYmxlVmFyaWFibGUpIHtcblxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbXNbbG93ZXJDYXNlTmFtZV0udmFsdWUgPSB2YXJpYWJsZS52YWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbSBpbnN0YW5jZW9mIEFycmF5VmFyaWFibGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGVzdGluYXRpb24gaW5zdGFuY2VvZiBJZGVudGlmaWVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFyaWFibGVPYmplY3QoZGVzdGluYXRpb24sIHZhcmlhYmxlLmNsb25lKCkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVzdGluYXRpb24gaW5zdGFuY2VvZiBJbmRleGVkSWRlbnRpZmllcikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXhSaW5nID0gZGVzdGluYXRpb24uaW5kZXhSaW5nO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZGVzdGluYXRpb25UeXBlID0gdGhpcy5nZXREZXN0aW5hdGlvblR5cGUoaXRlbS50eXBlLCBpbmRleFJpbmcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zYW1lVHlwZSh0eXBlLCBkZXN0aW5hdGlvblR5cGUpKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YXJpYWJsZSBpbnN0YW5jZW9mIFNjYWxhclZhcmlhYmxlIHx8XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZSBpbnN0YW5jZW9mIEVudW1WYXJpYWJsZSB8fFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGUgaW5zdGFuY2VvZiBDYWxsYWJsZVZhcmlhYmxlKSB7XG4vLy8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlID0gdmFyaWFibGUudmFsdWU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlID0gdmFyaWFibGUuY2xvbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uc2V0VmFsdWUoaW5kZXhSaW5nLCB0eXBlLCB2YXJpYWJsZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFR5cGVNaXNtYXRjaEVycm9yKHR5cGUsIGl0ZW0sIHRyZWVOb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbSBpbnN0YW5jZW9mIFJlY29yZFZhcmlhYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRWYXJpYWJsZU9iamVjdChkZXN0aW5hdGlvbiwgdmFyaWFibGUuY2xvbmUoKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0gaW5zdGFuY2VvZiBQb2ludGVyVmFyaWFibGUgJiZcbiAgICAgICAgICAgICAgICB0eXBlIGluc3RhbmNlb2YgUG9pbnRlclR5cGUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zYW1lVHlwZShpdGVtLnR5cGUsIHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0udmFyaWFibGUgPSB2YXJpYWJsZS52YXJpYWJsZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFR5cGVNaXNtYXRjaEVycm9yKHR5cGUsIGl0ZW0sIHRyZWVOb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkRXJyb3IoRXJyb3JzQ29kZXMudHlwZXNNaXNtYXRjaCwgbnVsbCwgdHJlZU5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucGFyZW50U2NvcGUpIHtcbiAgICAgICAgICAgIHRoaXMucGFyZW50U2NvcGUuc2V0VmFyaWFibGVWYWx1ZShkZXN0aW5hdGlvbiwgdmFyaWFibGUsIHRyZWVOb2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWRkRXJyb3IoRXJyb3JzQ29kZXMudmFyaWFibGVOb3REZWNsYXJlZCwgYFZhcmlhYmxlICcke2xvd2VyQ2FzZU5hbWV9JyBub3QgZGVjbGFyZWQuYCwgdHJlZU5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0UmVjb3JkVmFyaWFibGVQcm9wZXJ0eShyZWNvcmRWYXJpYWJsZSwgcHJvcGVydHlJZGVudGlmaWVyLCB2YXJpYWJsZSlcbiAgICB7XG4gICAgICAgIGxldCB0eXBlID0gdmFyaWFibGUuZ2V0VHlwZSgpO1xuXG4gICAgICAgIGxldCBpdGVtID0gcmVjb3JkVmFyaWFibGUuZ2V0QnlQcm9wZXJ0eUlkZW50aWZpZXIocHJvcGVydHlJZGVudGlmaWVyKTtcblxuICAgICAgICBpZiAodGhpcy5zYW1lVHlwZShpdGVtLmdldFR5cGUoKSwgdHlwZSkpIHtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWRkVHlwZU1pc21hdGNoRXJyb3IodHlwZSwgaXRlbSwgcHJvcGVydHlJZGVudGlmaWVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgU2NhbGFyVmFyaWFibGUgfHxcbiAgICAgICAgICAgIGl0ZW0gaW5zdGFuY2VvZiBFbnVtVmFyaWFibGUgfHxcbiAgICAgICAgICAgIGl0ZW0gaW5zdGFuY2VvZiBDYWxsYWJsZVZhcmlhYmxlKSB7XG4gICAgICAgICAgICBpdGVtLnZhbHVlID0gdmFyaWFibGUudmFsdWU7XG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbSBpbnN0YW5jZW9mIEFycmF5VmFyaWFibGUgfHxcbiAgICAgICAgICAgIGl0ZW0gaW5zdGFuY2VvZiBSZWNvcmRWYXJpYWJsZSkge1xuXG4gICAgICAgICAgICByZWNvcmRWYXJpYWJsZS5zZXRQcm9wZXJ0eUJ5UHJvcGVydHlJZGVudGlmaWVyKHByb3BlcnR5SWRlbnRpZmllciwgdmFyaWFibGUuY2xvbmUoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFkZEVycm9yKEVycm9yc0NvZGVzLnR5cGVzTWlzbWF0Y2gsIG51bGwsIHByb3BlcnR5SWRlbnRpZmllcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRWYXJpYWJsZU9iamVjdChkZXN0aW5hdGlvbklkZW50aWZpZXIsIHZhcmlhYmxlKVxuICAgIHtcbiAgICAgICAgbGV0IG5hbWUgPSBkZXN0aW5hdGlvbklkZW50aWZpZXIuc3ltYm9sLnN0cmluZ1ZhbHVlO1xuICAgICAgICBsZXQgbG93ZXJDYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICB0aGlzLml0ZW1zW2xvd2VyQ2FzZU5hbWVdID0gdmFyaWFibGU7XG4gICAgfVxuXG4gICAgYWRkVHlwZU1pc21hdGNoRXJyb3IodHlwZSwgaXRlbSwgdHJlZU5vZGUpXG4gICAge1xuICAgICAgICBsZXQgc291cmNlVHlwZSA9IE51bWJlci5pc0ludGVnZXIodHlwZSkgPyBuZXcgU2NhbGFyVHlwZShudWxsLCB0eXBlKSA6IHR5cGU7XG4gICAgICAgIGxldCBkZXN0aW5hdGlvblR5cGUgPSBpdGVtLnR5cGUgPT09IGZhbHNlID8gbmV3IFNjYWxhclR5cGUobnVsbCwgaXRlbS50eXBlSWQpIDogaXRlbS50eXBlO1xuICAgICAgICB0aGlzLmFkZEVycm9yKEVycm9yc0NvZGVzLnR5cGVzTWlzbWF0Y2gsIGBUeXBlICR7ZGVzdGluYXRpb25UeXBlfSBleHBlY3RlZCBidXQgJHtzb3VyY2VUeXBlfSBmb3VuZC5gLCB0cmVlTm9kZSk7XG4gICAgfVxuXG4gICAgZ2V0RGVzdGluYXRpb25UeXBlKGFycmF5VHlwZSwgaW5kZXhSaW5nKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICAoYXJyYXlUeXBlIGluc3RhbmNlb2YgQXJyYXlUeXBlICYmXG4gICAgICAgICAgICAgICAgaW5kZXhSaW5nICYmXG4gICAgICAgICAgICAgICAgaW5kZXhSaW5nICE9PSBudWxsKSA/XG4gICAgICAgICAgICAgICAgdGhpcy5nZXREZXN0aW5hdGlvblR5cGUoYXJyYXlUeXBlLnR5cGVPZkVsZW1lbnRzLCBpbmRleFJpbmcuaW5kZXhSaW5nKSA6XG4gICAgICAgICAgICAgICAgYXJyYXlUeXBlO1xuICAgIH1cblxuICAgIGdldFZhcmlhYmxlKG5hbWUpXG4gICAge1xuICAgICAgICBsZXQgbG93ZXJDYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKHRoaXMuaXRlbXMuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlTmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLml0ZW1zW2xvd2VyQ2FzZU5hbWVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50U2NvcGUgPyB0aGlzLnBhcmVudFNjb3BlLmdldFZhcmlhYmxlKG5hbWUpIDogbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldEVsZW1lbnRCeUlkZW50aWZpZXIoaWRlbnRpZmllcilcbiAgICB7XG4gICAgICAgIGlmIChpZGVudGlmaWVyIGluc3RhbmNlb2YgSWRlbnRpZmllcikge1xuICAgICAgICAgICAgbGV0IG5hbWUgPSBpZGVudGlmaWVyLnN5bWJvbC52YWx1ZTtcbiAgICAgICAgICAgIGxldCBsb3dlckNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5jb25zdGFudHMuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdGFudHNbbG93ZXJDYXNlTmFtZV07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXRlbXMuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtc1tsb3dlckNhc2VOYW1lXTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5lbnVtc0l0ZW1zLmhhc093blByb3BlcnR5KGxvd2VyQ2FzZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW51bXNJdGVtc1tsb3dlckNhc2VOYW1lXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50U2NvcGUgPyB0aGlzLnBhcmVudFNjb3BlLmdldEVsZW1lbnRCeUlkZW50aWZpZXIoaWRlbnRpZmllcikgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0RW51bUVsZW1lbnQoaWRlbnRpZmllcilcbiAgICB7XG4gICAgICAgIGxldCBuYW1lID0gaWRlbnRpZmllci5zeW1ib2wudmFsdWU7XG4gICAgICAgIGxldCBsb3dlckNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIGlmICh0aGlzLmVudW1zSXRlbXMuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlTmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVudW1zSXRlbXNbbG93ZXJDYXNlTmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFkZEVycm9yKEVycm9yc0NvZGVzLnZhcmlhYmxlTm90RGVjbGFyZWQsIGBFbnVtIGVsZW1lbnQgJyR7bG93ZXJDYXNlTmFtZX0nIG5vdCBkZWNsYXJlZC5gLCBpZGVudGlmaWVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNhbWVUeXBlKHR5cGVBLCB0eXBlQilcbiAgICB7XG4gICAgICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKHR5cGVBKSAmJlxuICAgICAgICAgICAgTnVtYmVyLmlzSW50ZWdlcih0eXBlQikpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlQSA9PT0gdHlwZUI7XG4gICAgICAgIH0gZWxzZSBpZiAoTnVtYmVyLmlzSW50ZWdlcih0eXBlQSkgJiZcbiAgICAgICAgICAgICFOdW1iZXIuaXNJbnRlZ2VyKHR5cGVCKSkge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVBID09PSB0eXBlQi50eXBlSWQ7XG4gICAgICAgIH0gZWxzZSBpZiAoTnVtYmVyLmlzSW50ZWdlcih0eXBlQikgJiZcbiAgICAgICAgICAgICFOdW1iZXIuaXNJbnRlZ2VyKHR5cGVBKSkge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVBLnR5cGVJZCA9PT0gdHlwZUI7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZUEuY29uc3RydWN0b3IgPT09IHR5cGVCLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICBpZiAodHlwZUEgaW5zdGFuY2VvZiBTY2FsYXJUeXBlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVBLnR5cGVJZCA9PT0gdHlwZUIudHlwZUlkO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlQSBpbnN0YW5jZW9mIEVudW1UeXBlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5pcyh0eXBlQSwgdHlwZUIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmKHR5cGVBIGluc3RhbmNlb2YgRnVuY3Rpb25UeXBlIHx8XG4gICAgICAgICAgICAgICAgICAgIHR5cGVBIGluc3RhbmNlb2YgUHJvY2VkdXJlVHlwZSl7XG4gICAgICAgICAgICAgICAgbGV0IGFQYXJhbXMgPSB0aGlzLmdldFBhcmFtZXRlcnNBcnJheSh0eXBlQSk7XG4gICAgICAgICAgICAgICAgbGV0IGJQYXJhbXMgPSB0aGlzLmdldFBhcmFtZXRlcnNBcnJheSh0eXBlQik7XG4gICAgICAgICAgICAgICAgbGV0IGxlbmd0aCA9IGFQYXJhbXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChsZW5ndGggPT09IGJQYXJhbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0eXBlQSBpbnN0YW5jZW9mIEZ1bmN0aW9uVHlwZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhbWVUeXBlKHR5cGVBLnJldHVyblR5cGUsIHR5cGVCLnJldHVyblR5cGUpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZUEgaW5zdGFuY2VvZiBBcnJheVR5cGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zYW1lVHlwZSh0eXBlQS50eXBlT2ZFbGVtZW50cywgdHlwZUIudHlwZU9mRWxlbWVudHMpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlQS5sZWZ0SW5kZXguc3ltYm9sLnZhbHVlID09PSB0eXBlQi5sZWZ0SW5kZXguc3ltYm9sLnZhbHVlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlQS5yaWdodEluZGV4LnN5bWJvbC52YWx1ZSA9PT0gdHlwZUIucmlnaHRJbmRleC5zeW1ib2wudmFsdWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVBIGluc3RhbmNlb2YgUG9pbnRlclR5cGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zYW1lVHlwZSh0eXBlQS50eXBlLCB0eXBlQi50eXBlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZUEgaW5zdGFuY2VvZiBSZWNvcmRUeXBlKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNhbWVTZXQgPSBPYmplY3Qua2V5cyh0eXBlQS50eXBlc0xpc3QpLmxlbmd0aCA9PT0gT2JqZWN0LmtleXModHlwZUIudHlwZXNMaXN0KS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgbGV0IHByb3BlcnR5TmFtZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgZm9yIChwcm9wZXJ0eU5hbWUgaW4gdHlwZUEudHlwZXNMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc2FtZVNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNhbWVTZXQgPSBzYW1lU2V0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlQi50eXBlc0xpc3QuaGFzT3duUHJvcGVydHkocHJvcGVydHlOYW1lKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zYW1lVHlwZSh0eXBlQS50eXBlc0xpc3RbcHJvcGVydHlOYW1lXSwgdHlwZUIudHlwZXNMaXN0W3Byb3BlcnR5TmFtZV0pXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNhbWVTZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRQYXJhbWV0ZXJzQXJyYXkoY2FsbGFibGVUeXBlKVxuICAgIHtcbiAgICAgICAgbGV0IHBhcmFtZXRlcnNBcnJheT0gW107XG4gICAgICAgIGxldCBjb3VudGVyID0gMDtcbiAgICAgICAgbGV0IGxlbmd0aCA9IGNhbGxhYmxlVHlwZS5zaWduYXR1cmUubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpPTA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGl0ZW0gPSBjYWxsYWJsZVR5cGUuc2lnbmF0dXJlW2ldO1xuICAgICAgICAgICAgbGV0IGlkZW50TGVuZ3RoID0gaXRlbS5pZGVudGlmaWVycy5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGxldCBqPTA7IGogPCBpZGVudExlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyc0FycmF5W2NvdW50ZXIrK10gPSBpdGVtO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhcmFtZXRlcnNBcnJheTtcbiAgICB9XG5cbiAgICBhZGRFcnJvcihlcnJvckNvZGUsIGVycm9yVGV4dCA9IG51bGwsIHRyZWVOb2RlID0gbnVsbClcbiAgICB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gdGhpcy5lcnJvcnNEZXNjcmlwdGlvbi5nZXRFcnJvclRleHRCeUNvZGUoZXJyb3JDb2RlKSArXG4gICAgICAgICAgICAgICAgKGVycm9yVGV4dCA9PT0gbnVsbCA/ICcnIDogKCcuICcgKyBlcnJvclRleHQpKTtcbiAgICAgICAgbGV0IGN1cnJlbnRQb3NpdGlvbiA9IHRyZWVOb2RlID09PSBudWxsID8gbnVsbCA6IHRyZWVOb2RlLnN5bWJvbC50ZXh0UG9zaXRpb247XG4gICAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IoZXJyb3JDb2RlLCBtZXNzYWdlLCBjdXJyZW50UG9zaXRpb24pO1xuICAgIH1cblxuICAgIGFkZFR5cGUodHlwZURlY2xhcmF0aW9uKVxuICAgIHtcbiAgICAgICAgbGV0IG5hbWUgPSB0eXBlRGVjbGFyYXRpb24uaWRlbnRpZmllci5zeW1ib2wuc3RyaW5nVmFsdWU7XG4gICAgICAgIGxldCBsb3dlckNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAodGhpcy50eXBlcy5oYXNPd25Qcm9wZXJ0eShsb3dlckNhc2VOYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5hZGRFcnJvcihFcnJvcnNDb2Rlcy5pZGVudGlmaWVyQWxyZWFkeVVzZWQsIGBUeXBlICcke2xvd2VyQ2FzZU5hbWV9JyBhbHJlYWR5IGRlY2xhcmVkLmAsIHR5cGVEZWNsYXJhdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnR5cGVzW2xvd2VyQ2FzZU5hbWVdID0gdHlwZURlY2xhcmF0aW9uLnR5cGU7XG4gICAgICAgICAgICBpZiAodHlwZURlY2xhcmF0aW9uLnR5cGUgaW5zdGFuY2VvZiBFbnVtVHlwZSkge1xuICAgICAgICAgICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgICAgICAgICB0eXBlRGVjbGFyYXRpb24udHlwZS5pdGVtcy5mb3JFYWNoKGZ1bmN0aW9uKGVudW1JdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBsb3dlckNhc2VOYW1lID0gZW51bUl0ZW0uc3ltYm9sLnN0cmluZ1ZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmVudW1zSXRlbXMuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYWRkRXJyb3IoRXJyb3JzQ29kZXMuaWRlbnRpZmllckFscmVhZHlVc2VkLCBgRW51bWVyYXRpb24gaXRlbSAnJHtsb3dlckNhc2VOYW1lfScgYWxyZWFkeSBkZWNsYXJlZC5gLCBlbnVtSXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5lbnVtc0l0ZW1zW2xvd2VyQ2FzZU5hbWVdID0gbmV3IEVudW1WYXJpYWJsZShlbnVtSXRlbSwgdHlwZURlY2xhcmF0aW9uLnR5cGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0VHlwZShuYW1lLCB0cmVlTm9kZSA9IG51bGwpXG4gICAge1xuICAgICAgICBsZXQgbG93ZXJDYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKHRoaXMudHlwZXMuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlTmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnR5cGVzW2xvd2VyQ2FzZU5hbWVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGRFcnJvcihFcnJvcnNDb2Rlcy50eXBlTm90RGVjbGFyZWQsIGBUeXBlICcke2xvd2VyQ2FzZU5hbWV9JyBub3QgZGVjbGFyZWQuYCwgdHJlZU5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0UGFyYW1ldGVyc0xpc3QoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyYW1ldGVyc0xpc3Q7XG4gICAgfVxuXG4gICAgc2V0UGFyYW1ldGVyc0xpc3QoUGFyYW1ldGVyc0xpc3QpXG4gICAge1xuICAgICAgICB0aGlzLnBhcmFtZXRlcnNMaXN0ID0gUGFyYW1ldGVyc0xpc3Q7XG4gICAgfVxuXG4gICAgYWRkQ29uc3RhbnQoY29uc3RhbnREZWNsYXJhdGlvbilcbiAgICB7XG4gICAgICAgIGxldCBuYW1lID0gY29uc3RhbnREZWNsYXJhdGlvbi5pZGVudGlmaWVyLnN5bWJvbC5zdHJpbmdWYWx1ZTtcbiAgICAgICAgbGV0IHR5cGUgPSBjb25zdGFudERlY2xhcmF0aW9uLnR5cGU7XG4gICAgICAgIGxldCB2YWx1ZSA9IGNvbnN0YW50RGVjbGFyYXRpb24udmFsdWU7XG4gICAgICAgIGxldCBsb3dlckNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAodGhpcy5jb25zdGFudHMuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlTmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkRXJyb3IoRXJyb3JzQ29kZXMuaWRlbnRpZmllckFscmVhZHlVc2VkLCBgQ29uc3RhbnQgJyR7bG93ZXJDYXNlTmFtZX0nIGFscmVhZHkgZGVjbGFyZWQuYCwgY29uc3RhbnREZWNsYXJhdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgY29uc3RhbnQgPSBudWxsO1xuICAgICAgICAgICAgbGV0IHJlc29sdmVkVHlwZSA9IHRoaXMucmVzb2x2ZU5hbWVkVHlwZSh0eXBlKTtcblxuICAgICAgICAgICAgaWYgKHJlc29sdmVkVHlwZSA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgIHJlc29sdmVkVHlwZSBpbnN0YW5jZW9mIFNjYWxhclR5cGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdGFudCA9IG5ldyBTY2FsYXJWYXJpYWJsZSh2YWx1ZS5zeW1ib2wudmFsdWUsIHR5cGUgPyByZXNvbHZlZFR5cGUudHlwZUlkIDogdmFsdWUudHlwZUlkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5jb25zdGFudHNbbG93ZXJDYXNlTmFtZV0gPSBjb25zdGFudDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFZhcmlhYmxlQnlSZWZlcmVuY2UodmFyaWFibGVJZGVudGlmaWVyKVxuICAgIHtcbiAgICAgICAgbGV0IG5hbWUgPSB2YXJpYWJsZUlkZW50aWZpZXIuc3ltYm9sLnZhbHVlO1xuICAgICAgICBsZXQgbG93ZXJDYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICBpZiAodGhpcy5pdGVtcy5oYXNPd25Qcm9wZXJ0eShsb3dlckNhc2VOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXNbbG93ZXJDYXNlTmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgdmFyaWFibGUgPSB0aGlzLnBhcmVudFNjb3BlLmdldFZhcmlhYmxlQnlSZWZlcmVuY2UodmFyaWFibGVJZGVudGlmaWVyKTtcbiAgICAgICAgICAgIGlmICghdmFyaWFibGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZEVycm9yKEVycm9yc0NvZGVzLnZhcmlhYmxlTm90RGVjbGFyZWQsIGBWYXJpYWJsZSAnJHtsb3dlckNhc2VOYW1lfScgbm90IGRlY2xhcmVkLmAsIHZhcmlhYmxlSWRlbnRpZmllcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YXJpYWJsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZFZhcmlhYmxlQnlSZWZlcmVuY2UodmFyaWFibGVJZGVudGlmaWVyLCBwYXJhbWV0ZXJJZGVudGlmaWVyKVxuICAgIHtcbiAgICAgICAgbGV0IG5hbWUgPSBwYXJhbWV0ZXJJZGVudGlmaWVyLnN5bWJvbC52YWx1ZTtcbiAgICAgICAgbGV0IGxvd2VyQ2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgbGV0IHZhcmlhYmxlID0gdGhpcy5wYXJlbnRTY29wZS5nZXRWYXJpYWJsZUJ5UmVmZXJlbmNlKHZhcmlhYmxlSWRlbnRpZmllcik7XG4gICAgICAgIHRoaXMuaXRlbXNbbG93ZXJDYXNlTmFtZV0gPSB2YXJpYWJsZTtcbiAgICB9XG5cbiAgICBjcmVhdGVEZWZhdWx0VmFyaWFibGUodHlwZU9iamVjdClcbiAgICB7XG4gICAgICAgIGlmICh0eXBlT2JqZWN0IGluc3RhbmNlb2YgU2NhbGFyVHlwZSkge1xuICAgICAgICAgICAgbGV0IGRlZmF1bHRWYWx1ZSA9IG51bGw7XG5cbiAgICAgICAgICAgIHN3aXRjaCAodHlwZU9iamVjdC50eXBlSWQpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFR5cGVzSWRzLkJPT0xFQU46XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFR5cGVzSWRzLkNIQVI6XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgVHlwZXNJZHMuSU5URUdFUjpcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlID0gMDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBUeXBlc0lkcy5SRUFMOlxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWUgPSAwO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFR5cGVzSWRzLlNUUklORzpcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlID0gJyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgU2NhbGFyVmFyaWFibGUoZGVmYXVsdFZhbHVlLCB0eXBlT2JqZWN0LnR5cGVJZCk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZU9iamVjdCBpbnN0YW5jZW9mIFJlY29yZFR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVjb3JkVmFyaWFibGUodHlwZU9iamVjdCwgdGhpcyk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZU9iamVjdCBpbnN0YW5jZW9mIFByb2NlZHVyZVR5cGUpIHtcbiAgICAgICAgICAgIGxldCBwcm9jZWR1cmVJdGVtID0gbmV3IFByb2NlZHVyZUl0ZW0oKTtcbiAgICAgICAgICAgIHByb2NlZHVyZUl0ZW0uc2lnbmF0dXJlID0gdHlwZU9iamVjdC5zaWduYXR1cmU7XG4gICAgICAgICAgICBwcm9jZWR1cmVJdGVtLnR5cGUgPSB0eXBlT2JqZWN0O1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IENhbGxhYmxlVmFyaWFibGUodHlwZU9iamVjdCwgcHJvY2VkdXJlSXRlbSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZU9iamVjdCBpbnN0YW5jZW9mIFBvaW50ZXJUeXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFBvaW50ZXJWYXJpYWJsZShudWxsLCB0eXBlT2JqZWN0KTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlT2JqZWN0IGluc3RhbmNlb2YgRnVuY3Rpb25UeXBlKSB7XG4gICAgICAgICAgICBsZXQgZnVuY3Rpb25JdGVtID0gbmV3IEZ1bmN0aW9uSXRlbSgpO1xuICAgICAgICAgICAgZnVuY3Rpb25JdGVtLnNpZ25hdHVyZSA9IHR5cGVPYmplY3Quc2lnbmF0dXJlO1xuICAgICAgICAgICAgZnVuY3Rpb25JdGVtLnJldHVyblR5cGUgPSB0eXBlT2JqZWN0LnJldHVyblR5cGU7XG4gICAgICAgICAgICBmdW5jdGlvbkl0ZW0ubmFtZSA9IG5ldyBJZGVudGlmaWVyKHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogJ291dHB1dFZhbHVlJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmdW5jdGlvbkl0ZW0udHlwZSA9IHR5cGVPYmplY3Q7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgQ2FsbGFibGVWYXJpYWJsZSh0eXBlT2JqZWN0LCBmdW5jdGlvbkl0ZW0pO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVPYmplY3QgaW5zdGFuY2VvZiBBcnJheVR5cGUpIHtcbiAgICAgICAgICAgIGxldCByZXNvbHZlZFR5cGUgPSB0aGlzLnJlc29sdmVOYW1lZFR5cGUodHlwZU9iamVjdCk7XG4gICAgICAgICAgICBsZXQgdmFyaWFibGUgPSBuZXcgQXJyYXlWYXJpYWJsZShyZXNvbHZlZFR5cGUsIHRoaXMpO1xuXG4gICAgICAgICAgICBsZXQgbGVmdEluZGV4ID0gcmVzb2x2ZWRUeXBlLmxlZnRJbmRleDtcbiAgICAgICAgICAgIGxldCByaWdodEluZGV4ID0gcmVzb2x2ZWRUeXBlLnJpZ2h0SW5kZXg7XG4gICAgICAgICAgICBsZXQgbGVmdEludGVnZXJJbmRleCA9IHRoaXMuZ2V0SW50ZWdlclZhbHVlT2ZJbmRleENvbnN0YW50KGxlZnRJbmRleCk7XG4gICAgICAgICAgICBsZXQgcmlnaHRJbnRlZ2VySW5kZXggPSB0aGlzLmdldEludGVnZXJWYWx1ZU9mSW5kZXhDb25zdGFudChyaWdodEluZGV4KTtcblxuICAgICAgICAgICAgbGV0IG1pbkludGVnZXJJbmRleCA9IE1hdGgubWluKGxlZnRJbnRlZ2VySW5kZXgsIHJpZ2h0SW50ZWdlckluZGV4KTtcbiAgICAgICAgICAgIGxldCBtYXhJbnRlZ2VySW5kZXggPSBNYXRoLm1heChsZWZ0SW50ZWdlckluZGV4LCByaWdodEludGVnZXJJbmRleCk7XG4gICAgICAgICAgICBsZXQgb2Zmc2V0ID0gLW1pbkludGVnZXJJbmRleDtcblxuICAgICAgICAgICAgdmFyaWFibGUub2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICAgICAgdmFyaWFibGUuYXJyYXlMZW5ndGggPSBtYXhJbnRlZ2VySW5kZXggLSBtaW5JbnRlZ2VySW5kZXggKyAxO1xuICAgICAgICAgICAgdmFyaWFibGUubGVmdEludGVnZXJJbmRleCA9IDA7XG4gICAgICAgICAgICB2YXJpYWJsZS5yaWdodEludGVnZXJJbmRleCA9IG1heEludGVnZXJJbmRleDtcbiAgICAgICAgICAgIHZhcmlhYmxlLnJpZ2h0SW50ZWdlckluZGV4ID0gbWF4SW50ZWdlckluZGV4O1xuXG4gICAgICAgICAgICByZXR1cm4gdmFyaWFibGU7XG4gICAgICAgIH1cbiAgICB9XG59IiwiaW1wb3J0IHsgVHJlZU5vZGVCYXNlIH0gZnJvbSAnLi9UcmVlTm9kZUJhc2UuanMnO1xuXG5leHBvcnQgY2xhc3MgUHJvY2VkdXJlQ2FsbCBleHRlbmRzIFRyZWVOb2RlQmFzZVxue1xuICAgIGNvbnN0cnVjdG9yKHN5bWJvbCwgaWRlbnRpZmllciwgcGFyYW1ldGVycyA9IFtdKVxuICAgIHtcbiAgICAgICAgc3VwZXIoc3ltYm9sKTtcbiAgICAgICAgdGhpcy5pZGVudGlmaWVyID0gaWRlbnRpZmllcjtcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzID0gcGFyYW1ldGVycztcbiAgICB9XG59IiwiZXhwb3J0IGNsYXNzIFVuYm91bmRlZFBhcmFtZXRlcnNMaXN0XG57XG4gICAgY29uc3RydWN0b3IoYnlSZWZlcmVuY2UgPSBmYWxzZSlcbiAgICB7XG4gICAgICAgIHRoaXMuYnlSZWZlcmVuY2UgPSBieVJlZmVyZW5jZTtcbiAgICB9XG59IiwiaW1wb3J0IHsgUHJvY2VkdXJlSXRlbSB9IGZyb20gJy4uL1Byb2NlZHVyZUl0ZW0uanMnO1xuaW1wb3J0IHsgRW51bVZhcmlhYmxlIH0gZnJvbSAnLi4vVmFyaWFibGVzL0VudW1WYXJpYWJsZS5qcyc7XG5pbXBvcnQgeyBTY2FsYXJWYXJpYWJsZSB9IGZyb20gJy4uL1ZhcmlhYmxlcy9TY2FsYXJWYXJpYWJsZS5qcyc7XG5pbXBvcnQgeyBVbmJvdW5kZWRQYXJhbWV0ZXJzTGlzdCB9IGZyb20gJy4uL1NpZ25hdHVyZXMvVW5ib3VuZGVkUGFyYW1ldGVyc0xpc3QuanMnO1xuaW1wb3J0IHsgUHJvY2VkdXJlVHlwZSB9IGZyb20gJy4uLy4uL1N5bnRheEFuYWx5emVyL1RyZWUvVHlwZXMvUHJvY2VkdXJlVHlwZS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBXcml0ZUxuIGV4dGVuZHMgUHJvY2VkdXJlSXRlbVxue1xuICAgIGNvbnN0cnVjdG9yKG91dHB1dFN0cmVhbSwgb3VwdXROZXdMaW5lU3ltYm9sKVxuICAgIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5vdXRwdXRTdHJlYW0gPSBvdXRwdXRTdHJlYW07XG4gICAgICAgIHRoaXMub3VwdXROZXdMaW5lU3ltYm9sID0gb3VwdXROZXdMaW5lU3ltYm9sO1xuICAgICAgICB0aGlzLnR5cGUgPSBuZXcgUHJvY2VkdXJlVHlwZShudWxsLCBuZXcgVW5ib3VuZGVkUGFyYW1ldGVyc0xpc3QoKSwgbnVsbCk7XG4gICAgfVxuXG4gICAgYXN5bmMgaW5uZXJSdW4oc2NvcGUpXG4gICAge1xuICAgICAgICBsZXQgcGFyYW1ldGVyc0xpc3QgPSBzY29wZS5nZXRQYXJhbWV0ZXJzTGlzdCgpO1xuXG4gICAgICAgIHRoaXMub3V0cHV0U3RyZWFtLndyaXRlKHBhcmFtZXRlcnNMaXN0Lm1hcChmdW5jdGlvbihlbGVtKXtcbiAgICAgICAgICAgIGlmIChlbGVtIGluc3RhbmNlb2YgRW51bVZhcmlhYmxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0udmFsdWUuc3ltYm9sLnN0cmluZ1ZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlbGVtIGluc3RhbmNlb2YgU2NhbGFyVmFyaWFibGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbS52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkuam9pbignJykgKyB0aGlzLm91cHV0TmV3TGluZVN5bWJvbCk7XG4gICAgfVxufTsiLCJpbXBvcnQgeyBQcm9jZWR1cmVJdGVtIH0gZnJvbSAnLi4vUHJvY2VkdXJlSXRlbS5qcyc7XG5pbXBvcnQgeyBFbnVtVmFyaWFibGUgfSBmcm9tICcuLi9WYXJpYWJsZXMvRW51bVZhcmlhYmxlLmpzJztcbmltcG9ydCB7IFNjYWxhclZhcmlhYmxlIH0gZnJvbSAnLi4vVmFyaWFibGVzL1NjYWxhclZhcmlhYmxlLmpzJztcbmltcG9ydCB7IFVuYm91bmRlZFBhcmFtZXRlcnNMaXN0IH0gZnJvbSAnLi4vU2lnbmF0dXJlcy9VbmJvdW5kZWRQYXJhbWV0ZXJzTGlzdC5qcyc7XG5pbXBvcnQgeyBQcm9jZWR1cmVUeXBlIH0gZnJvbSAnLi4vLi4vU3ludGF4QW5hbHl6ZXIvVHJlZS9UeXBlcy9Qcm9jZWR1cmVUeXBlLmpzJztcblxuZXhwb3J0IGNsYXNzIFdyaXRlIGV4dGVuZHMgUHJvY2VkdXJlSXRlbVxue1xuICAgIGNvbnN0cnVjdG9yKG91dHB1dFN0cmVhbSlcbiAgICB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3V0cHV0U3RyZWFtID0gb3V0cHV0U3RyZWFtO1xuICAgICAgICB0aGlzLnR5cGUgPSBuZXcgUHJvY2VkdXJlVHlwZShudWxsLCBuZXcgVW5ib3VuZGVkUGFyYW1ldGVyc0xpc3QoKSwgbnVsbCk7XG4gICAgfVxuXG4gICAgYXN5bmMgaW5uZXJSdW4oc2NvcGUpXG4gICAge1xuICAgICAgICBsZXQgcGFyYW1ldGVyc0xpc3QgPSBzY29wZS5nZXRQYXJhbWV0ZXJzTGlzdCgpO1xuXG4gICAgICAgIHRoaXMub3V0cHV0U3RyZWFtLndyaXRlKHBhcmFtZXRlcnNMaXN0Lm1hcChmdW5jdGlvbihlbGVtKXtcbiAgICAgICAgICAgIGlmIChlbGVtIGluc3RhbmNlb2YgRW51bVZhcmlhYmxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0udmFsdWUuc3ltYm9sLnN0cmluZ1ZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlbGVtIGluc3RhbmNlb2YgU2NhbGFyVmFyaWFibGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbS52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkuam9pbignJykpO1xuICAgIH1cbn07IiwiaW1wb3J0IHsgUHJvY2VkdXJlSXRlbSB9IGZyb20gJy4uL1Byb2NlZHVyZUl0ZW0uanMnO1xuaW1wb3J0IHsgRW51bVZhcmlhYmxlIH0gZnJvbSAnLi4vVmFyaWFibGVzL0VudW1WYXJpYWJsZS5qcyc7XG5pbXBvcnQgeyBTY2FsYXJWYXJpYWJsZSB9IGZyb20gJy4uL1ZhcmlhYmxlcy9TY2FsYXJWYXJpYWJsZS5qcyc7XG5pbXBvcnQgeyBVbmJvdW5kZWRQYXJhbWV0ZXJzTGlzdCB9IGZyb20gJy4uL1NpZ25hdHVyZXMvVW5ib3VuZGVkUGFyYW1ldGVyc0xpc3QuanMnO1xuaW1wb3J0IHsgUHJvY2VkdXJlVHlwZSB9IGZyb20gJy4uLy4uL1N5bnRheEFuYWx5emVyL1RyZWUvVHlwZXMvUHJvY2VkdXJlVHlwZS5qcyc7XG5pbXBvcnQgeyBUeXBlc0lkcyB9IGZyb20gJy4uLy4uL1NlbWFudGljcy9WYXJpYWJsZXMvVHlwZXNJZHMuanMnO1xuaW1wb3J0IHsgRXJyb3JzQ29kZXMgfSBmcm9tICcuLi8uLi9FcnJvcnMvRXJyb3JzQ29kZXMuanMnO1xuaW1wb3J0IHsgU2NhbGFyVHlwZSB9IGZyb20gJy4uLy4uL1N5bnRheEFuYWx5emVyL1RyZWUvVHlwZXMvU2NhbGFyVHlwZS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBSZWFkTG4gZXh0ZW5kcyBQcm9jZWR1cmVJdGVtXG57XG4gICAgY29uc3RydWN0b3IoaW5wdXQsIG91dHB1dFN0cmVhbSwgb3VwdXROZXdMaW5lU3ltYm9sKVxuICAgIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5pbnB1dCA9IGlucHV0O1xuICAgICAgICB0aGlzLm91dHB1dFN0cmVhbSA9IG91dHB1dFN0cmVhbTtcbiAgICAgICAgdGhpcy5vdXB1dE5ld0xpbmVTeW1ib2wgPSBvdXB1dE5ld0xpbmVTeW1ib2w7XG4gICAgICAgIHRoaXMudHlwZSA9IG5ldyBQcm9jZWR1cmVUeXBlKG51bGwsIG5ldyBVbmJvdW5kZWRQYXJhbWV0ZXJzTGlzdCh0cnVlKSwgbnVsbCk7XG4gICAgICAgIHRoaXMuY2hhciA9IG51bGw7XG4gICAgfVxuXG4gICAgYXN5bmMgaW5uZXJSdW4oc2NvcGUsIGVuZ2luZSlcbiAgICB7XG4gICAgICAgIGxldCBwYXJhbWV0ZXJzTGlzdCA9IHNjb3BlLmdldFBhcmFtZXRlcnNMaXN0KCk7XG4gICAgICAgIGxldCBwYXJhbWV0ZXJzVHlwZXMgPSBbXTtcbiAgICAgICAgbGV0IHBhcmFtZXRlcnNUeXBlc0lkcyA9IFtdO1xuXG4gICAgICAgIGF3YWl0IHBhcmFtZXRlcnNMaXN0LmZvckVhY2goYXN5bmMgZnVuY3Rpb24ocGFyYW1ldGVyKSB7XG4gICAgICAgICAgICBsZXQgZXZhbHVhdGVkUGFyYW1ldGVyID0gYXdhaXQgZW5naW5lLmV2YWx1YXRlSWRlbnRpZmllckJyYW5jaChwYXJhbWV0ZXIpO1xuICAgICAgICAgICAgcGFyYW1ldGVyc1R5cGVzSWRzLnB1c2goZXZhbHVhdGVkUGFyYW1ldGVyLnR5cGVJZCk7XG4gICAgICAgICAgICBwYXJhbWV0ZXJzVHlwZXMucHVzaChldmFsdWF0ZWRQYXJhbWV0ZXIudHlwZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCB3b3JkcyA9IGF3YWl0IHRoaXMuZ2V0V29yZHMocGFyYW1ldGVyc1R5cGVzSWRzLCB0aGlzLm91cHV0TmV3TGluZVN5bWJvbCk7XG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgYXdhaXQgd29yZHMuZm9yRWFjaChhc3luYyBmdW5jdGlvbih3b3JkLCBpbmRleCkge1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIHN3aXRjaCAocGFyYW1ldGVyc1R5cGVzSWRzW2luZGV4XSkge1xuICAgICAgICAgICAgICAgIGNhc2UgVHlwZXNJZHMuSU5URUdFUjpcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBOdW1iZXIucGFyc2VJbnQod29yZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmFkZEVycm9yKEVycm9yc0NvZGVzLnR5cGVzTWlzbWF0Y2gsIGBJbnRlZ2VyIHZhbHVlIGV4cGVjdGVkLCBidXQgJyR7d29yZH0nIGZvdW5kLmAsIHBhcmFtZXRlcnNMaXN0W2luZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBUeXBlc0lkcy5SRUFMOlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcnNlRmxvYXQod29yZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmFkZEVycm9yKEVycm9yc0NvZGVzLnR5cGVzTWlzbWF0Y2gsIGBGbG9hdCB2YWx1ZSBleHBlY3RlZCwgYnV0ICcke3dvcmR9JyBmb3VuZC5gLCBwYXJhbWV0ZXJzTGlzdFtpbmRleF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgVHlwZXNJZHMuQ0hBUjpcbiAgICAgICAgICAgICAgICBjYXNlIFR5cGVzSWRzLlNUUklORzpcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB3b3JkO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdHlwZSA9IHBhcmFtZXRlcnNUeXBlc1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9IG5ldyBTY2FsYXJUeXBlKG51bGwsIHBhcmFtZXRlcnNUeXBlc0lkc1tpbmRleF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLmFkZEVycm9yKEVycm9yc0NvZGVzLnR5cGVzTWlzbWF0Y2gsIGBDYW5ub3QgaW5wdXQgdmFsdWUgb2YgdGhpcyB0eXBlOiAke3R5cGV9YCwgcGFyYW1ldGVyc0xpc3RbaW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBzY2FsYXJWYXJpYWJsZSA9IG5ldyBTY2FsYXJWYXJpYWJsZSh2YWx1ZSwgcGFyYW1ldGVyc1R5cGVzSWRzW2luZGV4XSk7XG4vLyAgICAgICAgICAgIGNvbnNvbGUubG9nKHNjYWxhclZhcmlhYmxlKTtcbi8vICAgICAgICAgICAgY29uc29sZS5sb2cocGFyYW1ldGVyc0xpc3QpO1xuXG4gICAgICAgICAgICBhd2FpdCBlbmdpbmUuc2V0SWRlbnRpZmllckJyYW5jaFZhbHVlKHBhcmFtZXRlcnNMaXN0W2luZGV4XSwgc2NhbGFyVmFyaWFibGUpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLm91dHB1dFN0cmVhbS53cml0ZSh0aGlzLm91cHV0TmV3TGluZVN5bWJvbCk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0V29yZHMocGFyYW1ldGVyc1R5cGVzSWRzKVxuICAgIHtcbiAgICAgICAgbGV0IHdvcmRzID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbWV0ZXJzVHlwZXNJZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCByZXMgID0gYXdhaXQgdGhpcy5nZXRXb3JkKHBhcmFtZXRlcnNUeXBlc0lkc1swXSk7XG4gICAgICAgICAgICB3b3Jkc1tpXSA9IHJlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB3b3JkcztcbiAgICB9XG5cbiAgICBhc3luYyBnZXRXb3JkKHR5cGVJZClcbiAgICB7XG4gICAgICAgIGxldCBjdXJyZW50V29yZCA9ICcnO1xuXG4gICAgICAgIHN3aXRjaCAodHlwZUlkKSB7XG4gICAgICAgICAgICBjYXNlIFR5cGVzSWRzLkNIQVI6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hhciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50V29yZCA9IGF3YWl0IHRoaXMuaW5wdXQuZ2V0Q2hhcigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRXb3JkID0gdGhpcy5jaGFyO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBUeXBlc0lkcy5JTlRFR0VSOlxuICAgICAgICAgICAgY2FzZSBUeXBlc0lkcy5SRUFMOlxuICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzLmNoYXIgPT09IG51bGwgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIC9bXFxyXFxuXFxzXFx0XS8uZXhlYyh0aGlzLmNoYXIpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubmV4dENoYXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50V29yZCArPSB0aGlzLmNoYXI7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubmV4dENoYXIoKTtcbiAgICAgICAgICAgICAgICB9IHdoaWxlICgvW1xcclxcblxcc1xcdF0vLmV4ZWModGhpcy5jaGFyKSA9PT0gbnVsbCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFR5cGVzSWRzLlNUUklORzpcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hhciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm5leHRDaGFyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzLmNoYXIgIT09IHRoaXMub3VwdXROZXdMaW5lU3ltYm9sKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRXb3JkICs9IHRoaXMuY2hhcjtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5uZXh0Q2hhcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjdXJyZW50V29yZDtcbiAgICB9XG5cbiAgICBhc3luYyBuZXh0Q2hhcigpXG4gICAge1xuICAgICAgICBsZXQgY2hhclByID0gYXdhaXQgdGhpcy5pbnB1dC5nZXRDaGFyKCk7XG5cbiAgICAgICAgdGhpcy5jaGFyID0gIGNoYXJQcjtcbiAgICB9XG59O1xuIiwiaW1wb3J0IHsgUHJvY2VkdXJlSXRlbSB9IGZyb20gJy4vUHJvY2VkdXJlSXRlbS5qcyc7XG5pbXBvcnQgeyBXcml0ZUxuIH0gZnJvbSAnLi9Qcm9jZWR1cmVzL1dyaXRlTG4uanMnO1xuaW1wb3J0IHsgV3JpdGUgfSBmcm9tICcuL1Byb2NlZHVyZXMvV3JpdGUuanMnO1xuaW1wb3J0IHsgUmVhZExuIH0gZnJvbSAnLi9Qcm9jZWR1cmVzL1JlYWRMbi5qcyc7XG5cbmV4cG9ydCBjbGFzcyBQcm9jZWR1cmVzU3RvcmVcbntcbiAgICBjb25zdHJ1Y3RvcihpbnB1dCwgb3V0cHV0U3RyZWFtLCBvdXB1dE5ld0xpbmVTeW1ib2wpXG4gICAge1xuICAgICAgICB0aGlzLml0ZW1zID0ge1xuICAgICAgICAgICAgd3JpdGVsbjogbmV3IFdyaXRlTG4ob3V0cHV0U3RyZWFtLCBvdXB1dE5ld0xpbmVTeW1ib2wpLFxuICAgICAgICAgICAgd3JpdGU6IG5ldyBXcml0ZShvdXRwdXRTdHJlYW0pLFxuICAgICAgICAgICAgcmVhZGxuOiBuZXcgUmVhZExuKGlucHV0LCBvdXRwdXRTdHJlYW0sIG91cHV0TmV3TGluZVN5bWJvbCksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYWRkUHJvY2VkdXJlKG5hbWUsIHByb2NlZHVyZSlcbiAgICB7XG4gICAgICAgIHRoaXMuaXRlbXNbbmFtZS50b0xvd2VyQ2FzZSgpXSA9IHByb2NlZHVyZTtcbiAgICB9XG5cbiAgICBnZXRQcm9jZWR1cmUobmFtZSlcbiAgICB7XG4gICAgICAgIGxldCBsb3dlckNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zLmhhc093blByb3BlcnR5KGxvd2VyQ2FzZU5hbWUpID9cbiAgICAgICAgICAgIHRoaXMuaXRlbXNbbG93ZXJDYXNlTmFtZV0gOlxuICAgICAgICAgICAgbnVsbDtcbiAgICB9XG59OyIsImltcG9ydCB7IEZ1bmN0aW9uSXRlbSB9IGZyb20gJy4uL0Z1bmN0aW9uSXRlbS5qcyc7XG5pbXBvcnQgeyBUeXBlc0lkcyB9IGZyb20gJy4uLy4uL1NlbWFudGljcy9WYXJpYWJsZXMvVHlwZXNJZHMuanMnO1xuaW1wb3J0IHsgU2NhbGFyVHlwZSB9IGZyb20gJy4uLy4uL1N5bnRheEFuYWx5emVyL1RyZWUvVHlwZXMvU2NhbGFyVHlwZS5qcydcblxuZXhwb3J0IGNsYXNzIE9yZCBleHRlbmRzIEZ1bmN0aW9uSXRlbVxue1xuICAgIGNvbnN0cnVjdG9yKClcbiAgICB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucmV0dXJuVHlwZSA9IG5ldyBTY2FsYXJUeXBlKG51bGwsIFR5cGVzSWRzLklOVEVHRVIpO1xuICAgIH1cblxuICAgIGFzeW5jIGlubmVyUnVuKHNjb3BlKVxuICAgIHtcbiAgICAgICAgbGV0IHBhcmFtZXRlcnNMaXN0ID0gc2NvcGUuZ2V0UGFyYW1ldGVyc0xpc3QoKTtcbiAgICAgICAgbGV0IGNoYXJQYXJhbWV0ZXIgPSBwYXJhbWV0ZXJzTGlzdFswXTtcbiAgICAgICAgbGV0IGNoYXIgPSBjaGFyUGFyYW1ldGVyLnZhbHVlO1xuICAgICAgICBsZXQgY29kZSA9IGNoYXIuY2hhckNvZGVBdCgwKTtcblxuICAgICAgICBzY29wZS5zZXRWYWx1ZSgnT3JkJywgVHlwZXNJZHMuSU5URUdFUiwgY29kZSk7XG4gICAgfVxufTsiLCJpbXBvcnQgeyBGdW5jdGlvbkl0ZW0gfSBmcm9tICcuLi9GdW5jdGlvbkl0ZW0uanMnO1xuaW1wb3J0IHsgVHlwZXNJZHMgfSBmcm9tICcuLi8uLi9TZW1hbnRpY3MvVmFyaWFibGVzL1R5cGVzSWRzLmpzJztcbmltcG9ydCB7IFNjYWxhclR5cGUgfSBmcm9tICcuLi8uLi9TeW50YXhBbmFseXplci9UcmVlL1R5cGVzL1NjYWxhclR5cGUuanMnXG5cbmV4cG9ydCBjbGFzcyBDaHIgZXh0ZW5kcyBGdW5jdGlvbkl0ZW1cbntcbiAgICBjb25zdHJ1Y3RvcigpXG4gICAge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnJldHVyblR5cGUgPSBuZXcgU2NhbGFyVHlwZShudWxsLCBUeXBlc0lkcy5DSEFSKTtcbiAgICB9XG5cbiAgICBhc3luYyBpbm5lclJ1bihzY29wZSlcbiAgICB7XG4gICAgICAgIGxldCBwYXJhbWV0ZXJzTGlzdCA9IHNjb3BlLmdldFBhcmFtZXRlcnNMaXN0KCk7XG4gICAgICAgIGxldCBjb2RlUGFyYW1ldGVyID0gcGFyYW1ldGVyc0xpc3RbMF07XG4gICAgICAgIGxldCBjb2RlID0gY29kZVBhcmFtZXRlci52YWx1ZTtcbiAgICAgICAgbGV0IGNoYXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xuXG4gICAgICAgIHNjb3BlLnNldFZhbHVlKCdDaHInLCBUeXBlc0lkcy5DSEFSLCBjaGFyKTtcbiAgICB9XG59OyIsImltcG9ydCB7IE9yZCB9IGZyb20gJy4vRnVuY3Rpb25zL09yZC5qcyc7XG5pbXBvcnQgeyBDaHIgfSBmcm9tICcuL0Z1bmN0aW9ucy9DaHIuanMnO1xuXG5leHBvcnQgY2xhc3MgRnVuY3Rpb25zU3RvcmVcbntcbiAgICBjb25zdHJ1Y3RvcigpXG4gICAge1xuICAgICAgICB0aGlzLml0ZW1zID0ge1xuICAgICAgICAgICAgY2hyOiBuZXcgQ2hyKCksXG4gICAgICAgICAgICBvcmQ6IG5ldyBPcmQoKVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGFkZEZ1bmN0aW9uKG5hbWUsIHByb2NlZHVyZSlcbiAgICB7XG4gICAgICAgIHRoaXMuaXRlbXNbbmFtZS50b0xvd2VyQ2FzZSgpXSA9IHByb2NlZHVyZTtcbiAgICB9XG5cbiAgICBnZXRGdW5jdGlvbihuYW1lKVxuICAgIHtcbiAgICAgICAgbGV0IGxvd2VyQ2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXMuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlTmFtZSkgP1xuICAgICAgICAgICAgdGhpcy5pdGVtc1tsb3dlckNhc2VOYW1lXSA6XG4gICAgICAgICAgICBudWxsO1xuICAgIH1cbn07IiwiaW1wb3J0IHsgU2NvcGUgfSBmcm9tICcuL1Njb3BlLmpzJztcbmltcG9ydCB7IEZ1bmN0aW9uSXRlbSB9IGZyb20gJy4vRnVuY3Rpb25JdGVtLmpzJztcbmltcG9ydCB7IFByb2NlZHVyZUl0ZW0gfSBmcm9tICcuL1Byb2NlZHVyZUl0ZW0uanMnO1xuaW1wb3J0IHsgU2NhbGFyVmFyaWFibGUgfSBmcm9tICcuL1ZhcmlhYmxlcy9TY2FsYXJWYXJpYWJsZS5qcyc7XG5pbXBvcnQgeyBFbnVtVmFyaWFibGUgfSBmcm9tICcuL1ZhcmlhYmxlcy9FbnVtVmFyaWFibGUuanMnO1xuaW1wb3J0IHsgQ2FsbGFibGVWYXJpYWJsZSB9IGZyb20gJy4vVmFyaWFibGVzL0NhbGxhYmxlVmFyaWFibGUuanMnO1xuaW1wb3J0IHsgVHlwZXNJZHMgfSBmcm9tICcuL1ZhcmlhYmxlcy9UeXBlc0lkcy5qcyc7XG5pbXBvcnQgeyBWYXJpYWJsZXNEZWNsYXJhdGlvbiB9IGZyb20gJy4uL1N5bnRheEFuYWx5emVyL1RyZWUvVmFyaWFibGVzRGVjbGFyYXRpb24uanMnO1xuaW1wb3J0IHsgVHlwZURlY2xhcmF0aW9uIH0gZnJvbSAnLi4vU3ludGF4QW5hbHl6ZXIvVHJlZS9UeXBlRGVjbGFyYXRpb24uanMnO1xuaW1wb3J0IHsgQ29uc3RhbnREZWNsYXJhdGlvbiB9IGZyb20gJy4uL1N5bnRheEFuYWx5emVyL1RyZWUvQ29uc3RhbnREZWNsYXJhdGlvbi5qcyc7XG5pbXBvcnQgeyBTY2FsYXJUeXBlIH0gZnJvbSAnLi4vU3ludGF4QW5hbHl6ZXIvVHJlZS9UeXBlcy9TY2FsYXJUeXBlLmpzJztcbmltcG9ydCB7IEFycmF5VHlwZSB9IGZyb20gJy4uL1N5bnRheEFuYWx5emVyL1RyZWUvVHlwZXMvQXJyYXlUeXBlLmpzJztcbmltcG9ydCB7IElkZW50aWZpZXIgfSBmcm9tICcuLi9TeW50YXhBbmFseXplci9UcmVlL0lkZW50aWZpZXIuanMnO1xuaW1wb3J0IHsgRnVuY3Rpb24gfSBmcm9tICcuLi9TeW50YXhBbmFseXplci9UcmVlL0Z1bmN0aW9uLmpzJztcbmltcG9ydCB7IFByb2NlZHVyZSB9IGZyb20gJy4uL1N5bnRheEFuYWx5emVyL1RyZWUvUHJvY2VkdXJlLmpzJztcbmltcG9ydCB7IEFzc2lnbmF0aW9uIH0gZnJvbSAnLi4vU3ludGF4QW5hbHl6ZXIvVHJlZS9Bc3NpZ25hdGlvbi5qcyc7XG5pbXBvcnQgeyBTeW1ib2xzQ29kZXMgfSBmcm9tICcuLi9MZXhpY2FsQW5hbHl6ZXIvU3ltYm9sc0NvZGVzLmpzJztcbmltcG9ydCB7IENvbnN0YW50IH0gZnJvbSAnLi4vU3ludGF4QW5hbHl6ZXIvVHJlZS9Db25zdGFudC5qcyc7XG5pbXBvcnQgeyBObWJGbG9hdCB9IGZyb20gJy4uL0xleGljYWxBbmFseXplci9TeW1ib2xzL05tYkZsb2F0LmpzJztcbmltcG9ydCB7IE5tYkludCB9IGZyb20gJy4uL0xleGljYWxBbmFseXplci9TeW1ib2xzL05tYkludC5qcyc7XG5pbXBvcnQgeyBPbmVTeW1ib2wgfSBmcm9tICcuLi9MZXhpY2FsQW5hbHl6ZXIvU3ltYm9scy9PbmVTeW1ib2wuanMnO1xuaW1wb3J0IHsgU3RyaW5nQ29uc3RhbnQgfSBmcm9tICcuLi9MZXhpY2FsQW5hbHl6ZXIvU3ltYm9scy9TdHJpbmdDb25zdGFudC5qcyc7XG5pbXBvcnQgeyBBZGRpdGlvbiB9IGZyb20gJy4uL1N5bnRheEFuYWx5emVyL1RyZWUvQWRkaXRpb24uanMnO1xuaW1wb3J0IHsgU3VidHJhY3Rpb24gfSBmcm9tICcuLi9TeW50YXhBbmFseXplci9UcmVlL1N1YnRyYWN0aW9uLmpzJztcbmltcG9ydCB7IE11bHRpcGxpY2F0aW9uIH0gZnJvbSAnLi4vU3ludGF4QW5hbHl6ZXIvVHJlZS9NdWx0aXBsaWNhdGlvbi5qcyc7XG5pbXBvcnQgeyBEaXZpc2lvbiB9IGZyb20gJy4uL1N5bnRheEFuYWx5emVyL1RyZWUvRGl2aXNpb24uanMnO1xuaW1wb3J0IHsgSW50ZWdlckRpdmlzaW9uIH0gZnJvbSAnLi4vU3ludGF4QW5hbHl6ZXIvVHJlZS9JbnRlZ2VyRGl2aXNpb24uanMnO1xuaW1wb3J0IHsgTW9kdWxvIH0gZnJvbSAnLi4vU3ludGF4QW5hbHl6ZXIvVHJlZS9Nb2R1bG8uanMnO1xuaW1wb3J0IHsgTG9naWNhbEFuZCB9IGZyb20gJy4uL1N5bnRheEFuYWx5emVyL1RyZWUvTG9naWNhbEFuZC5qcyc7XG5pbXBvcnQgeyBMb2dpY2FsT3IgfSBmcm9tICcuLi9TeW50YXhBbmFseXplci9UcmVlL0xvZ2ljYWxPci5qcyc7XG5pbXBvcnQgeyBVbmFyeU1pbnVzIH0gZnJvbSAnLi4vU3ludGF4QW5hbHl6ZXIvVHJlZS9VbmFyeU1pbnVzLmpzJztcbmltcG9ydCB7IE5vdCB9IGZyb20gJy4uL1N5bnRheEFuYWx5emVyL1RyZWUvTm90LmpzJztcbmltcG9ydCB7IENvbXBvdW5kT3BlcmF0b3IgfSBmcm9tICcuLi9TeW50YXhBbmFseXplci9UcmVlL0NvbXBvdW5kT3BlcmF0b3IuanMnO1xuaW1wb3J0IHsgSW1wbGljYXRpb24gfSBmcm9tICcuLi9TeW50YXhBbmFseXplci9UcmVlL0ltcGxpY2F0aW9uLmpzJztcbmltcG9ydCB7IFRha2VGaWVsZCB9IGZyb20gJy4uL1N5bnRheEFuYWx5emVyL1RyZWUvVGFrZUZpZWxkLmpzJztcbmltcG9ydCB7IFdoaWxlQ3ljbGUgfSBmcm9tICcuLi9TeW50YXhBbmFseXplci9UcmVlL0xvb3BzL1doaWxlQ3ljbGUuanMnO1xuaW1wb3J0IHsgUmVwZWF0Q3ljbGUgfSBmcm9tICcuLi9TeW50YXhBbmFseXplci9UcmVlL0xvb3BzL1JlcGVhdEN5Y2xlLmpzJztcbmltcG9ydCB7IEZvckN5Y2xlIH0gZnJvbSAnLi4vU3ludGF4QW5hbHl6ZXIvVHJlZS9Mb29wcy9Gb3JDeWNsZS5qcyc7XG5pbXBvcnQgeyBQcm9jZWR1cmVDYWxsIH0gZnJvbSAnLi4vU3ludGF4QW5hbHl6ZXIvVHJlZS9Qcm9jZWR1cmVDYWxsLmpzJztcbmltcG9ydCB7IEZ1bmN0aW9uQ2FsbCB9IGZyb20gJy4uL1N5bnRheEFuYWx5emVyL1RyZWUvRnVuY3Rpb25DYWxsLmpzJztcbmltcG9ydCB7IEluIH0gZnJvbSAnLi4vU3ludGF4QW5hbHl6ZXIvVHJlZS9SZWxhdGlvbnMvSW4uanMnO1xuaW1wb3J0IHsgRXF1YWwgfSBmcm9tICcuLi9TeW50YXhBbmFseXplci9UcmVlL1JlbGF0aW9ucy9FcXVhbC5qcyc7XG5pbXBvcnQgeyBOb3RFcXVhbCB9IGZyb20gJy4uL1N5bnRheEFuYWx5emVyL1RyZWUvUmVsYXRpb25zL05vdEVxdWFsLmpzJztcbmltcG9ydCB7IExlc3MgfSBmcm9tICcuLi9TeW50YXhBbmFseXplci9UcmVlL1JlbGF0aW9ucy9MZXNzLmpzJztcbmltcG9ydCB7IEdyZWF0ZXIgfSBmcm9tICcuLi9TeW50YXhBbmFseXplci9UcmVlL1JlbGF0aW9ucy9HcmVhdGVyLmpzJztcbmltcG9ydCB7IEdyZWF0ZXJPckVxdWFsIH0gZnJvbSAnLi4vU3ludGF4QW5hbHl6ZXIvVHJlZS9SZWxhdGlvbnMvR3JlYXRlck9yRXF1YWwuanMnO1xuaW1wb3J0IHsgTGVzc09yRXF1YWwgfSBmcm9tICcuLi9TeW50YXhBbmFseXplci9UcmVlL1JlbGF0aW9ucy9MZXNzT3JFcXVhbC5qcyc7XG5pbXBvcnQgeyBQcm9jZWR1cmVzU3RvcmUgfSBmcm9tICcuL1Byb2NlZHVyZXNTdG9yZS5qcyc7XG5pbXBvcnQgeyBGdW5jdGlvbnNTdG9yZSB9IGZyb20gJy4vRnVuY3Rpb25zU3RvcmUuanMnO1xuaW1wb3J0IHsgUnVudGltZUVycm9yIH0gZnJvbSAnLi4vRXJyb3JzL1J1bnRpbWVFcnJvci5qcyc7XG5pbXBvcnQgeyBFcnJvcnNEZXNjcmlwdGlvbiB9IGZyb20gJy4uL0Vycm9ycy9FcnJvcnNEZXNjcmlwdGlvbi5qcyc7XG5pbXBvcnQgeyBFcnJvcnNDb2RlcyB9IGZyb20gJy4uL0Vycm9ycy9FcnJvcnNDb2Rlcy5qcyc7XG5pbXBvcnQgeyBCcmVhayB9IGZyb20gICcuLi9TeW50YXhBbmFseXplci9UcmVlL0JyZWFrLmpzJztcbmltcG9ydCB7IEluZGV4ZWRJZGVudGlmaWVyIH0gZnJvbSAnLi4vU3ludGF4QW5hbHl6ZXIvVHJlZS9BcnJheXMvSW5kZXhlZElkZW50aWZpZXIuanMnO1xuaW1wb3J0IHsgSW5kZXhSaW5nIH0gZnJvbSAnLi4vU3ludGF4QW5hbHl6ZXIvVHJlZS9BcnJheXMvSW5kZXhSaW5nLmpzJztcbmltcG9ydCB7IFVuYm91bmRlZFBhcmFtZXRlcnNMaXN0IH0gZnJvbSAnLi4vU2VtYW50aWNzL1NpZ25hdHVyZXMvVW5ib3VuZGVkUGFyYW1ldGVyc0xpc3QuanMnO1xuaW1wb3J0IHsgQXJyYXlWYXJpYWJsZSB9IGZyb20gJy4uL1NlbWFudGljcy9WYXJpYWJsZXMvQXJyYXlWYXJpYWJsZS5qcyc7XG5pbXBvcnQgeyBHZXRCeVBvaW50ZXIgfSBmcm9tICcuLi9TeW50YXhBbmFseXplci9UcmVlL0dldEJ5UG9pbnRlci5qcyc7XG5pbXBvcnQgeyBHZXRQb2ludGVyIH0gZnJvbSAnLi4vU3ludGF4QW5hbHl6ZXIvVHJlZS9HZXRQb2ludGVyLmpzJztcbmltcG9ydCB7IFBvaW50ZXJWYXJpYWJsZSB9IGZyb20gJy4vVmFyaWFibGVzL1BvaW50ZXJWYXJpYWJsZS5qcyc7XG5pbXBvcnQgeyBTd2l0Y2ggfSBmcm9tICcuLi9TeW50YXhBbmFseXplci9UcmVlL0Nhc2UvU3dpdGNoLmpzJztcbmltcG9ydCB7IENhc2UgfSBmcm9tICcuLi9TeW50YXhBbmFseXplci9UcmVlL0Nhc2UvQ2FzZS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBFbmdpbmVcbntcbiAgICBjb25zdHJ1Y3Rvcih0cmVlLCBjb25maWcpXG4gICAge1xuICAgICAgICB0aGlzLnRyZWUgPSB0cmVlO1xuICAgICAgICB0aGlzLnRyZWVzID0gW3RoaXMudHJlZV07XG4gICAgICAgIHRoaXMudHJlZXNDb3VudGVyID0gMDtcbiAgICAgICAgdGhpcy5zY29wZXMgPSBbXTtcbiAgICAgICAgdGhpcy5jdXJyZW50U2NvcGVJZCA9IDA7XG4gICAgICAgIHRoaXMuc2NvcGVzW3RoaXMuY3VycmVudFNjb3BlSWRdID0gbmV3IFNjb3BlKCk7XG4gICAgICAgIHRoaXMucHJvY2VkdXJlc1N0b3JlID0gbmV3IFByb2NlZHVyZXNTdG9yZShjb25maWcuaW5wdXQsIGNvbmZpZy5vdXRwdXRTdHJlYW0sIGNvbmZpZy5vdXB1dE5ld0xpbmVTeW1ib2wpO1xuICAgICAgICB0aGlzLmZ1bmN0aW9uc1N0b3JlID0gbmV3IEZ1bmN0aW9uc1N0b3JlKCk7XG4gICAgICAgIHRoaXMuZXJyb3JzRGVzY3JpcHRpb24gPSBuZXcgRXJyb3JzRGVzY3JpcHRpb24oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybiBTY29wZVxuICAgICAqL1xuICAgIGdldEN1cnJlbnRTY29wZSgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5zY29wZXNbdGhpcy5jdXJyZW50U2NvcGVJZF07XG4gICAgfVxuXG4gICAgYXN5bmMgcnVuKClcbiAgICB7XG4gICAgICAgIHRoaXMuc2V0Q29uc3RhbnRzKCk7XG4gICAgICAgIHRoaXMuc2V0VHlwZXMoKTtcbiAgICAgICAgdGhpcy5zZXRWYXJpYWJsZXMoKTtcblxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHRoaXMudHJlZS5zZW50ZW5jZXMpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy50cmVlLnNlbnRlbmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZXZhbHVhdGVTZW50ZW5jZSh0aGlzLnRyZWUuc2VudGVuY2VzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldFZhcmlhYmxlcygpXG4gICAge1xuICAgICAgICBsZXQgY3VycmVudFNjb3BlID0gdGhpcy5nZXRDdXJyZW50U2NvcGUoKTtcblxuICAgICAgICBpZiAodGhpcy50cmVlLnZhcnMpIHtcbiAgICAgICAgICAgIHRoaXMudHJlZS52YXJzLmZvckVhY2goZnVuY3Rpb24gKHZhcmlhYmxlc0RlY2xhcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhcmlhYmxlc0RlY2xhcmF0aW9uIGluc3RhbmNlb2YgVmFyaWFibGVzRGVjbGFyYXRpb24pIHtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgdmFyaWFibGVzVHlwZSA9IHZhcmlhYmxlc0RlY2xhcmF0aW9uLnZhcmlhYmxlc1R5cGU7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVzRGVjbGFyYXRpb24uaWRlbnRpZmllcnMuZm9yRWFjaChcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGlkZW50aWZpZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlkZW50aWZpZXIgaW5zdGFuY2VvZiBJZGVudGlmaWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTY29wZS5hZGRWYXJpYWJsZShpZGVudGlmaWVyLCB2YXJpYWJsZXNEZWNsYXJhdGlvbi52YXJpYWJsZXNUeXBlLCBudWxsLCBpZGVudGlmaWVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluaXRpYWxWYWx1ZSA9IHZhcmlhYmxlc0RlY2xhcmF0aW9uLmluaXRpYWxWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWxWYWx1ZSBpbnN0YW5jZW9mIENvbnN0YW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2NvcGUuc2V0VmFsdWUoaWRlbnRpZmllciwgaW5pdGlhbFZhbHVlLnR5cGVJZCwgaW5pdGlhbFZhbHVlLnN5bWJvbC52YWx1ZSwgaW5pdGlhbFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93ICdJZGVudGlmaWVyIG11c3QgYmUgaGVyZSEnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyAnVmFyaWFibGVzRGVjbGFyYXRpb24gb2JqZWN0IG11c3QgYmUgaGVyZSEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0VHlwZXMoKVxuICAgIHtcbiAgICAgICAgbGV0IGN1cnJlbnRTY29wZSA9IHRoaXMuZ2V0Q3VycmVudFNjb3BlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMudHJlZS50eXBlcykge1xuICAgICAgICAgICAgdGhpcy50cmVlLnR5cGVzLmZvckVhY2goZnVuY3Rpb24gKHR5cGVEZWNsYXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlRGVjbGFyYXRpb24gaW5zdGFuY2VvZiBUeXBlRGVjbGFyYXRpb24pIHtcblxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2NvcGUuYWRkVHlwZSh0eXBlRGVjbGFyYXRpb24pO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgJ1R5cGVEZWNsYXJhdGlvbiBvYmplY3QgbXVzdCBiZSBoZXJlISc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRDb25zdGFudHMoKVxuICAgIHtcbiAgICAgICAgbGV0IGN1cnJlbnRTY29wZSA9IHRoaXMuZ2V0Q3VycmVudFNjb3BlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMudHJlZS5jb25zdGFudHMpIHtcbiAgICAgICAgICAgIHRoaXMudHJlZS5jb25zdGFudHMuZm9yRWFjaChmdW5jdGlvbiAoY29uc3RhbnREZWNsYXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGlmIChjb25zdGFudERlY2xhcmF0aW9uIGluc3RhbmNlb2YgQ29uc3RhbnREZWNsYXJhdGlvbikge1xuXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTY29wZS5hZGRDb25zdGFudChjb25zdGFudERlY2xhcmF0aW9uKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93ICdDb25zdGFudERlY2xhcmF0aW9uIG9iamVjdCBtdXN0IGJlIGhlcmUhJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGV2YWx1YXRlSW5kZXhSaW5nKGluZGV4UmluZylcbiAgICB7XG4gICAgICAgIGluZGV4UmluZy5ldmFsdWF0ZWRJbmRleEV4cHJlc3Npb24gPSBhd2FpdCB0aGlzLmV2YWx1YXRlRXhwcmVzc2lvbihpbmRleFJpbmcuaW5kZXhFeHByZXNzaW9uKTtcbiAgICAgICAgaWYgKGluZGV4UmluZy5pbmRleFJpbmcgaW5zdGFuY2VvZiBJbmRleFJpbmcpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZXZhbHVhdGVJbmRleFJpbmcoaW5kZXhSaW5nLmluZGV4UmluZyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5kZXhSaW5nO1xuICAgIH1cblxuICAgIGFzeW5jIGV2YWx1YXRlSWRlbnRpZmllckJyYW5jaChpZGVudGlmaWVyQnJhbmNoRXhwcmVzc2lvbilcbiAgICB7XG4gICAgICAgIGlmIChpZGVudGlmaWVyQnJhbmNoRXhwcmVzc2lvbiBpbnN0YW5jZW9mIElkZW50aWZpZXIpIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW50U2NvcGUgPSB0aGlzLmdldEN1cnJlbnRTY29wZSgpO1xuICAgICAgICAgICAgbGV0IG5hbWUgPSBpZGVudGlmaWVyQnJhbmNoRXhwcmVzc2lvbi5zeW1ib2wudmFsdWU7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgICAgIHJlc3VsdCA9IGN1cnJlbnRTY29wZS5nZXRFbGVtZW50QnlJZGVudGlmaWVyKGlkZW50aWZpZXJCcmFuY2hFeHByZXNzaW9uKTtcblxuICAgICAgICAgICAgaWYgKHJlc3VsdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbG93ZXJDYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgICAgbGV0IGlzRGVjbGFyZWRQcm9jZWR1cmUgPSB0aGlzLnRyZWUucHJvY2VkdXJlcy5oYXNPd25Qcm9wZXJ0eShsb3dlckNhc2VOYW1lKTtcbiAgICAgICAgICAgIGxldCBwcm9jZWR1cmUgPSBpc0RlY2xhcmVkUHJvY2VkdXJlID9cbiAgICAgICAgICAgICAgICB0aGlzLnRyZWUucHJvY2VkdXJlc1tsb3dlckNhc2VOYW1lXTpcbiAgICAgICAgICAgICAgICB0aGlzLnByb2NlZHVyZXNTdG9yZS5nZXRQcm9jZWR1cmUobG93ZXJDYXNlTmFtZSk7XG4gICAgICAgICAgICBpZiAocHJvY2VkdXJlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDYWxsYWJsZVZhcmlhYmxlKHByb2NlZHVyZS50eXBlLCBwcm9jZWR1cmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGlzRGVjbGFyZWRGdW5jdGlvbiA9IHRoaXMudHJlZS5mdW5jdGlvbnMuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlTmFtZSk7XG4gICAgICAgICAgICBsZXQgY2FsbGVkRnVuY3Rpb24gPSBpc0RlY2xhcmVkRnVuY3Rpb24gP1xuICAgICAgICAgICAgICAgIHRoaXMudHJlZS5mdW5jdGlvbnNbbG93ZXJDYXNlTmFtZV06XG4gICAgICAgICAgICAgICAgdGhpcy5mdW5jdGlvbnNTdG9yZS5nZXRGdW5jdGlvbihsb3dlckNhc2VOYW1lKTtcbiAgICAgICAgICAgIGlmIChjYWxsZWRGdW5jdGlvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAgbmV3IENhbGxhYmxlVmFyaWFibGUoY2FsbGVkRnVuY3Rpb24udHlwZSwgY2FsbGVkRnVuY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hZGRFcnJvcihFcnJvcnNDb2Rlcy52YXJpYWJsZU5vdERlY2xhcmVkLCBgRWxlbWVudCAnJHtuYW1lfScgbm90IGRlY2xhcmVkLmAsIGlkZW50aWZpZXJCcmFuY2hFeHByZXNzaW9uKTtcbiAgICAgICAgfSBlbHNlIGlmIChpZGVudGlmaWVyQnJhbmNoRXhwcmVzc2lvbiBpbnN0YW5jZW9mIEluZGV4ZWRJZGVudGlmaWVyKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVudFNjb3BlID0gdGhpcy5nZXRDdXJyZW50U2NvcGUoKTtcblxuICAgICAgICAgICAgbGV0IGFycmF5VmFyaWFibGUgPSBhd2FpdCB0aGlzLmV2YWx1YXRlSWRlbnRpZmllckJyYW5jaChpZGVudGlmaWVyQnJhbmNoRXhwcmVzc2lvbi5pZGVudGlmaWVyKTtcbiAgICAgICAgICAgIGlmICghKGFycmF5VmFyaWFibGUgaW5zdGFuY2VvZiBBcnJheVZhcmlhYmxlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkRXJyb3IoRXJyb3JzQ29kZXMuYXJyYXlFeHBlY3RlZCwgJ0FycmF5IGV4cGVjdGVkJywgaWRlbnRpZmllckJyYW5jaEV4cHJlc3Npb24pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZGVudGlmaWVyQnJhbmNoRXhwcmVzc2lvbi5pbmRleFJpbmcgPSBhd2FpdCB0aGlzLmV2YWx1YXRlSW5kZXhSaW5nKGlkZW50aWZpZXJCcmFuY2hFeHByZXNzaW9uLmluZGV4UmluZyk7XG4gICAgICAgICAgICByZXR1cm4gYXJyYXlWYXJpYWJsZS5nZXRCeUluZGV4UmluZyhpZGVudGlmaWVyQnJhbmNoRXhwcmVzc2lvbi5pbmRleFJpbmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoaWRlbnRpZmllckJyYW5jaEV4cHJlc3Npb24gaW5zdGFuY2VvZiBGdW5jdGlvbkNhbGwpIHtcbiAgICAgICAgICAgIGxldCBpc0RlY2xhcmVkUHJvY2VkdXJlID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBpc0RlY2xhcmVkRnVuY3Rpb24gPSBudWxsO1xuXG4gICAgICAgICAgICBsZXQgcmV0dXJuZWRFbGVtID0gYXdhaXQgdGhpcy5ldmFsdWF0ZUlkZW50aWZpZXJCcmFuY2goaWRlbnRpZmllckJyYW5jaEV4cHJlc3Npb24uaWRlbnRpZmllckJyYW5jaCk7XG4gICAgICAgICAgICBsZXQgY2FsbGVkRWxlbSA9IHJldHVybmVkRWxlbSBpbnN0YW5jZW9mIENhbGxhYmxlVmFyaWFibGUgP1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuZWRFbGVtLnZhbHVlIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybmVkRWxlbTtcblxuICAgICAgICAgICAgbGV0IGN1cnJlbnRTY29wZSA9IHRoaXMuZ2V0Q3VycmVudFNjb3BlKCk7XG4gICAgICAgICAgICBsZXQgc2NvcGUgPSBuZXcgU2NvcGUoY3VycmVudFNjb3BlKTtcbiAgICAgICAgICAgIGxldCBwcm9jZWR1cmVOYW1lID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChjYWxsZWRFbGVtIGluc3RhbmNlb2YgRnVuY3Rpb25JdGVtIHx8XG4gICAgICAgICAgICAgICAgICAgIGNhbGxlZEVsZW0gaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgICAgICAgICAgICAgIGxldCBwcm9jZWR1cmVJZGVudGlmaWVyID0gY2FsbGVkRWxlbS5uYW1lO1xuICAgICAgICAgICAgICAgIHByb2NlZHVyZU5hbWUgPSBwcm9jZWR1cmVJZGVudGlmaWVyLnN5bWJvbC52YWx1ZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgICAgICAgc2NvcGUuYWRkVmFyaWFibGUocHJvY2VkdXJlSWRlbnRpZmllciwgY2FsbGVkRWxlbS50eXBlLnJldHVyblR5cGUpO1xuICAgICAgICAgICAgICAgIHNjb3BlLmNhbGxhYmxlTmFtZSA9IGNhbGxlZEVsZW0ubmFtZS5zeW1ib2wudmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkUGFyYW1ldGVyc1RvU2NvcGUoaWRlbnRpZmllckJyYW5jaEV4cHJlc3Npb24ucGFyYW1ldGVycywgY2FsbGVkRWxlbS50eXBlLnNpZ25hdHVyZSwgc2NvcGUpO1xuICAgICAgICAgICAgdGhpcy50cmVlc0NvdW50ZXIrKztcblxuICAgICAgICAgICAgdGhpcy50cmVlID0gY2FsbGVkRWxlbTtcbiAgICAgICAgICAgIHRoaXMudHJlZXNbdGhpcy50cmVlc0NvdW50ZXJdID0gdGhpcy50cmVlO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50U2NvcGVJZCsrO1xuICAgICAgICAgICAgdGhpcy5zY29wZXNbdGhpcy5jdXJyZW50U2NvcGVJZF0gPSBzY29wZTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5ydW4oKTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsZWRFbGVtLmlubmVyUnVuID09PSAnZnVuY3Rpb24nICkge1xuICAgICAgICAgICAgICAgIGF3YWl0IGNhbGxlZEVsZW0uaW5uZXJSdW4oc2NvcGUsIHRoaXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChjYWxsZWRFbGVtIGluc3RhbmNlb2YgRnVuY3Rpb25JdGVtIHx8XG4gICAgICAgICAgICAgICAgICAgIGNhbGxlZEVsZW0gaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHNjb3BlLmdldFZhcmlhYmxlKHByb2NlZHVyZU5hbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5zY29wZXNbdGhpcy5jdXJyZW50U2NvcGVJZF07XG5cbiAgICAgICAgICAgIHRoaXMuY3VycmVudFNjb3BlSWQtLTtcbiAgICAgICAgICAgIHRoaXMudHJlZXNDb3VudGVyLS07XG4gICAgICAgICAgICB0aGlzLnRyZWUgPSB0aGlzLnRyZWVzW3RoaXMudHJlZXNDb3VudGVyXTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0gZWxzZSBpZiAoaWRlbnRpZmllckJyYW5jaEV4cHJlc3Npb24gaW5zdGFuY2VvZiBHZXRCeVBvaW50ZXIpIHtcbiAgICAgICAgICAgIGxldCBwb2ludGVyVmFyaWFibGUgPSBhd2FpdCB0aGlzLmV2YWx1YXRlSWRlbnRpZmllckJyYW5jaChpZGVudGlmaWVyQnJhbmNoRXhwcmVzc2lvbi5wb2ludGVyKTtcbiAgICAgICAgICAgIHJldHVybiBwb2ludGVyVmFyaWFibGUudmFyaWFibGU7XG4gICAgICAgIH0gZWxzZSBpZiAoaWRlbnRpZmllckJyYW5jaEV4cHJlc3Npb24gaW5zdGFuY2VvZiBUYWtlRmllbGQpIHtcbiAgICAgICAgICAgIGxldCBiYXNlRXhwcmVzc2lvbiA9IGF3YWl0IHRoaXMuZXZhbHVhdGVJZGVudGlmaWVyQnJhbmNoKGlkZW50aWZpZXJCcmFuY2hFeHByZXNzaW9uLmJhc2VFeHByZXNzaW9uKTtcbiAgICAgICAgICAgIGxldCBwcm9wZXJ0eUlkZW50aWZpZXIgPSBpZGVudGlmaWVyQnJhbmNoRXhwcmVzc2lvbi5zdWJGaWVsZDtcbiAgICAgICAgICAgIHJldHVybiBiYXNlRXhwcmVzc2lvbi5nZXRCeVByb3BlcnR5SWRlbnRpZmllcihwcm9wZXJ0eUlkZW50aWZpZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGRFcnJvcihFcnJvcnNDb2Rlcy50eXBlc01pc21hdGNoLCAnSWRlbnRpZmllciBicmFuY2ggZXhwZWN0ZWQuJywgaWRlbnRpZmllckJyYW5jaEV4cHJlc3Npb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZXZhbHVhdGVTZW50ZW5jZShzZW50ZW5jZSlcbiAgICB7XG4gICAgICAgIGxldCBjdXJyZW50U2NvcGUgPSB0aGlzLmdldEN1cnJlbnRTY29wZSgpO1xuXG4gICAgICAgIGlmIChzZW50ZW5jZSBpbnN0YW5jZW9mIEFzc2lnbmF0aW9uKSB7XG4gICAgICAgICAgICBsZXQgZGVzdGluYXRpb24gPSBzZW50ZW5jZS5kZXN0aW5hdGlvbjtcbiAgICAgICAgICAgIGxldCBzb3VyY2VFeHByZXNzaW9uID0gc2VudGVuY2Uuc291cmNlRXhwcmVzc2lvbjtcbiAgICAgICAgICAgIGxldCBleHByZXNzaW9uUmVzdWx0ID0gYXdhaXQgdGhpcy5ldmFsdWF0ZUV4cHJlc3Npb24oc291cmNlRXhwcmVzc2lvbik7XG4gICAgICAgICAgICBsZXQgdHlwZSA9IGV4cHJlc3Npb25SZXN1bHQuZ2V0VHlwZSgpO1xuXG4gICAgICAgICAgICBpZiAoZGVzdGluYXRpb24gaW5zdGFuY2VvZiBUYWtlRmllbGQpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVjb3JkVmFyaWFibGUgPSBhd2FpdCB0aGlzLmV2YWx1YXRlSWRlbnRpZmllckJyYW5jaChkZXN0aW5hdGlvbi5iYXNlRXhwcmVzc2lvbik7XG4gICAgICAgICAgICAgICAgbGV0IHByb3BlcnR5SWRlbnRpZmllciA9IGRlc3RpbmF0aW9uLnN1YkZpZWxkO1xuXG4gICAgICAgICAgICAgICAgY3VycmVudFNjb3BlLnNldFJlY29yZFZhcmlhYmxlUHJvcGVydHkocmVjb3JkVmFyaWFibGUsIHByb3BlcnR5SWRlbnRpZmllciwgZXhwcmVzc2lvblJlc3VsdCk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGRlc3RpbmF0aW9uIGluc3RhbmNlb2YgSW5kZXhlZElkZW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uaW5kZXhSaW5nID0gYXdhaXQgdGhpcy5ldmFsdWF0ZUluZGV4UmluZyhkZXN0aW5hdGlvbi5pbmRleFJpbmcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGN1cnJlbnRTY29wZS5zZXRWYXJpYWJsZVZhbHVlKGRlc3RpbmF0aW9uLCBleHByZXNzaW9uUmVzdWx0LCBzZW50ZW5jZS5kZXN0aW5hdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc2VudGVuY2UgaW5zdGFuY2VvZiBDb21wb3VuZE9wZXJhdG9yKSB7XG4gICAgICAgICAgICBpZiAoc2VudGVuY2Uuc2VudGVuY2VzKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNlbnRlbmNlcyA9IHNlbnRlbmNlLnNlbnRlbmNlcztcbiAgICAgICAgICAgICAgICBsZXQgc2VudGVuY2VzTnVtYmVyID0gc2VudGVuY2VzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbnRlbmNlc051bWJlcjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCB0aGlzLmV2YWx1YXRlU2VudGVuY2Uoc2VudGVuY2VzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIEJyZWFrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHNlbnRlbmNlIGluc3RhbmNlb2YgSW1wbGljYXRpb24pIHtcbiAgICAgICAgICAgIGxldCBjb25kaXRpb24gPSBhd2FpdCB0aGlzLmV2YWx1YXRlRXhwcmVzc2lvbihzZW50ZW5jZS5jb25kaXRpb24pO1xuXG4gICAgICAgICAgICBpZiAoY29uZGl0aW9uLnZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZXZhbHVhdGVTZW50ZW5jZShzZW50ZW5jZS5sZWZ0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZXZhbHVhdGVTZW50ZW5jZShzZW50ZW5jZS5yaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIHNlbnRlbmNlIGluc3RhbmNlb2YgRnVuY3Rpb25DYWxsIHx8XG4gICAgICAgICAgICAgICAgICAgIHNlbnRlbmNlIGluc3RhbmNlb2YgUHJvY2VkdXJlQ2FsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZXZhbHVhdGVJZGVudGlmaWVyQnJhbmNoKHNlbnRlbmNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChzZW50ZW5jZSBpbnN0YW5jZW9mIFdoaWxlQ3ljbGUpIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW50U2NvcGUgPSB0aGlzLmdldEN1cnJlbnRTY29wZSgpO1xuICAgICAgICAgICAgY3VycmVudFNjb3BlLmN5Y2xlRGVwdGgrKztcbiAgICAgICAgICAgIHdoaWxlICggKCBhd2FpdCB0aGlzLmV2YWx1YXRlRXhwcmVzc2lvbihzZW50ZW5jZS5jb25kaXRpb24pICkudmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgdGhpcy5ldmFsdWF0ZVNlbnRlbmNlKHNlbnRlbmNlLmJvZHkpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBCcmVhaykge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50U2NvcGUuY3ljbGVEZXB0aC0tO1xuICAgICAgICB9IGVsc2UgaWYgKHNlbnRlbmNlIGluc3RhbmNlb2YgUmVwZWF0Q3ljbGUpIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW50U2NvcGUgPSB0aGlzLmdldEN1cnJlbnRTY29wZSgpO1xuICAgICAgICAgICAgY3VycmVudFNjb3BlLmN5Y2xlRGVwdGgrKztcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgdGhpcy5ldmFsdWF0ZVNlbnRlbmNlKHNlbnRlbmNlLmJvZHkpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBCcmVhaykge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IHdoaWxlICggKCBhd2FpdCB0aGlzLmV2YWx1YXRlRXhwcmVzc2lvbihzZW50ZW5jZS5jb25kaXRpb24pICkudmFsdWUgIT09IHRydWUgKVxuICAgICAgICAgICAgY3VycmVudFNjb3BlLmN5Y2xlRGVwdGgtLTtcbiAgICAgICAgfSBlbHNlIGlmIChzZW50ZW5jZSBpbnN0YW5jZW9mIEZvckN5Y2xlKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVudFNjb3BlID0gdGhpcy5nZXRDdXJyZW50U2NvcGUoKTtcbiAgICAgICAgICAgIGxldCB2YXJpYWJsZUlkZW50aWZpZXIgPSBzZW50ZW5jZS52YXJpYWJsZUlkZW50aWZpZXI7XG4gICAgICAgICAgICBsZXQgY3VycmVudFZhbHVlID0gYXdhaXQgdGhpcy5ldmFsdWF0ZUV4cHJlc3Npb24oc2VudGVuY2UuaW5pdEV4cHJlc3Npb24pO1xuICAgICAgICAgICAgbGV0IGxhc3RWYWx1ZSA9IGF3YWl0IHRoaXMuZXZhbHVhdGVFeHByZXNzaW9uKHNlbnRlbmNlLmxhc3RFeHByZXNzaW9uKTtcblxuICAgICAgICAgICAgbGV0IGluY3JlbWVudCA9IG51bGw7XG4gICAgICAgICAgICBsZXQgY29tcGFyYXRpb24gPSBudWxsO1xuICAgICAgICAgICAgbGV0IHR5cGVJZCA9IGN1cnJlbnRWYWx1ZS50eXBlSWQ7XG4gICAgICAgICAgICBsZXQgdHlwZSA9IGN1cnJlbnRWYWx1ZS50eXBlID09PSBmYWxzZSA/IHR5cGVJZCA6IGN1cnJlbnRWYWx1ZS50eXBlO1xuICAgICAgICAgICAgY3VycmVudFNjb3BlLnNldFZhbHVlKHZhcmlhYmxlSWRlbnRpZmllciwgdHlwZSwgY3VycmVudFZhbHVlLnZhbHVlLCB2YXJpYWJsZUlkZW50aWZpZXIpO1xuICAgICAgICAgICAgaWYgKHNlbnRlbmNlLmNvdW50RG93bikge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZUlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgVHlwZXNJZHMuSU5URUdFUjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY3JlbWVudCA9IGZ1bmN0aW9uKGVsZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnZhbHVlLS07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW07XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyYXRpb24gPSAobGVmdEVsZW0sIHJpZ2h0RWxlbSkgPT4gbGVmdEVsZW0udmFsdWUgPj0gcmlnaHRFbGVtLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgVHlwZXNJZHMuQ0hBUjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY3JlbWVudCA9IGZ1bmN0aW9uKGVsZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29kZSA9IGVsZW0udmFsdWUuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlLS07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS52YWx1ZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW07XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyYXRpb24gPSAobGVmdEVsZW0sIHJpZ2h0RWxlbSkgPT4gbGVmdEVsZW0udmFsdWUuY2hhckNvZGVBdCgwKSA+PSByaWdodEVsZW0udmFsdWUuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFR5cGVzSWRzLkVOVU06XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNyZW1lbnQgPSBmdW5jdGlvbihlbGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGl0ZW1zID0gZWxlbS50eXBlLml0ZW1zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsZW4gPSBpdGVtcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gZWxlbS5nZXRJbmRleCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4LS07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS52YWx1ZSA9IGl0ZW1zWyhpbmRleCArIGxlbikgJSBsZW5dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmF0aW9uID0gKGxlZnRFbGVtLCByaWdodEVsZW0pID0+IGxlZnRFbGVtLmdldEluZGV4KCkgPj0gcmlnaHRFbGVtLmdldEluZGV4KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZUlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgVHlwZXNJZHMuSU5URUdFUjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY3JlbWVudCA9IGZ1bmN0aW9uKGVsZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnZhbHVlKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW07XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyYXRpb24gPSAobGVmdEVsZW0sIHJpZ2h0RWxlbSkgPT4gbGVmdEVsZW0udmFsdWUgPD0gcmlnaHRFbGVtLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgVHlwZXNJZHMuQ0hBUjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY3JlbWVudCA9IGZ1bmN0aW9uKGVsZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29kZSA9IGVsZW0udmFsdWUuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS52YWx1ZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW07XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyYXRpb24gPSAobGVmdEVsZW0sIHJpZ2h0RWxlbSkgPT4gbGVmdEVsZW0udmFsdWUuY2hhckNvZGVBdCgwKSA8PSByaWdodEVsZW0udmFsdWUuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFR5cGVzSWRzLkVOVU06XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNyZW1lbnQgPSBmdW5jdGlvbihlbGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGl0ZW1zID0gZWxlbS50eXBlLml0ZW1zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsZW4gPSBpdGVtcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gZWxlbS5nZXRJbmRleCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS52YWx1ZSA9IGl0ZW1zW2luZGV4ICUgbGVuXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJhdGlvbiA9IChsZWZ0RWxlbSwgcmlnaHRFbGVtKSA9PiBsZWZ0RWxlbS5nZXRJbmRleCgpIDw9IHJpZ2h0RWxlbS5nZXRJbmRleCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudFNjb3BlLmN5Y2xlRGVwdGgrKztcbiAgICAgICAgICAgIGxldCBwcmV2aW91c1ZhbCA9IHR5cGVJZCA9PT0gVHlwZXNJZHMuRU5VTSA/XG4gICAgICAgICAgICAgICAgbmV3IEVudW1WYXJpYWJsZShjdXJyZW50VmFsdWUudmFsdWUsIHR5cGUpIDpcbiAgICAgICAgICAgICAgICBuZXcgU2NhbGFyVmFyaWFibGUoY3VycmVudFZhbHVlLnZhbHVlLCB0eXBlSWQpO1xuICAgICAgICAgICAgbGV0IGNhbkNvbnRpbnVlID0gdHJ1ZTtcbiAgICAgICAgICAgIHdoaWxlIChjb21wYXJhdGlvbihjdXJyZW50VmFsdWUsIGxhc3RWYWx1ZSkgJiYgY2FuQ29udGludWUpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgdGhpcy5ldmFsdWF0ZVNlbnRlbmNlKHNlbnRlbmNlLmJvZHkpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBCcmVhaykge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJldmlvdXNWYWwudmFsdWUgPSBjdXJyZW50VmFsdWUudmFsdWU7XG4gICAgICAgICAgICAgICAgY3VycmVudFZhbHVlID0gaW5jcmVtZW50KGN1cnJlbnRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgY3VycmVudFNjb3BlLnNldFZhbHVlKHZhcmlhYmxlSWRlbnRpZmllciwgdHlwZSwgY3VycmVudFZhbHVlLnZhbHVlKTtcbiAgICAgICAgICAgICAgICBjYW5Db250aW51ZSA9IGNvbXBhcmF0aW9uKHByZXZpb3VzVmFsLCBjdXJyZW50VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudFNjb3BlLmN5Y2xlRGVwdGgtLTtcbiAgICAgICAgfSBlbHNlIGlmIChzZW50ZW5jZSBpbnN0YW5jZW9mIEJyZWFrKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVudFNjb3BlID0gdGhpcy5nZXRDdXJyZW50U2NvcGUoKTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50U2NvcGUuY3ljbGVEZXB0aCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRFcnJvcihFcnJvcnNDb2Rlcy5icmVha091dE9mTG9vcCwgbnVsbCwgc2VudGVuY2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VudGVuY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc2VudGVuY2UgaW5zdGFuY2VvZiBTd2l0Y2gpIHtcbiAgICAgICAgICAgIGxldCBzd2l0Y2hWYWx1ZSA9IGF3YWl0IHRoaXMuZXZhbHVhdGVFeHByZXNzaW9uKHNlbnRlbmNlLnN3aXRjaEV4cHJlc3Npb24pO1xuICAgICAgICAgICAgbGV0IGNhc2VGb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IGN1cnJlbnRTY29wZSA9IHRoaXMuZ2V0Q3VycmVudFNjb3BlKCk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgIHNlbnRlbmNlLmNhc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNhc2VJdGVtID0gc2VudGVuY2UuY2FzZXNbaV07XG4gICAgICAgICAgICAgICAgZm9yKGxldCBqID0gMDsgaiA8IGNhc2VJdGVtLmNvbnN0YW50cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29uc3RhbnQgPSBjYXNlSXRlbS5jb25zdGFudHNbal07XG4gICAgICAgICAgICAgICAgICAgIGlmICghY3VycmVudFNjb3BlLnNhbWVUeXBlKGNvbnN0YW50LnR5cGVJZCwgc3dpdGNoVmFsdWUuZ2V0VHlwZSgpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRFcnJvcihFcnJvcnNDb2Rlcy50eXBlc01pc21hdGNoLCAnVGhlIGNvbnN0YW50IGFuZCB0aGUgc3dpdGNoIGV4cHJlc3Npb24gaGF2ZSBkaWZmZXJlbnQgdHlwZXMnLCBjb25zdGFudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnN0YW50LnN5bWJvbC52YWx1ZSA9PT0gc3dpdGNoVmFsdWUudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2VGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV2YWx1YXRlU2VudGVuY2UoY2FzZUl0ZW0ub3BlcmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNhc2VGb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghY2FzZUZvdW5kICYmIHNlbnRlbmNlLmVsc2VTZW50ZW5jZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXZhbHVhdGVTZW50ZW5jZShzZW50ZW5jZS5lbHNlU2VudGVuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgYWRkUGFyYW1ldGVyc1RvU2NvcGUocGFyYW1ldGVycywgc2lnbmF0dXJlLCBzY29wZSlcbiAgICB7XG4gICAgICAgIGlmIChzaWduYXR1cmUgaW5zdGFuY2VvZiBVbmJvdW5kZWRQYXJhbWV0ZXJzTGlzdCkge1xuICAgICAgICAgICAgaWYgKHNpZ25hdHVyZS5ieVJlZmVyZW5jZSkge1xuICAgICAgICAgICAgICAgIHNjb3BlLnNldFBhcmFtZXRlcnNMaXN0KHBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgcGFyYW1ldGVyc1ZhbHVlcyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLm1hcChhc3luYyAoZWxlbSkgPT4gYXdhaXQgdGhpcy5ldmFsdWF0ZUV4cHJlc3Npb24oZWxlbSkpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBzY29wZS5zZXRQYXJhbWV0ZXJzTGlzdChwYXJhbWV0ZXJzVmFsdWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBwYXJhbWV0ZXJzQ291bnRlciA9IDA7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2lnbmF0dXJlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGFwcGxpZWRUeXBlID0gc2lnbmF0dXJlW2pdO1xuICAgICAgICAgICAgICAgIGxldCBpZGVudGlmaWVycyA9IGFwcGxpZWRUeXBlLmlkZW50aWZpZXJzO1xuICAgICAgICAgICAgICAgIGxldCBieVJlZmVyZW5jZSA9IGFwcGxpZWRUeXBlLmJ5UmVmZXJlbmNlO1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBpZGVudGlmaWVycy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaWRlbnRpZmllciA9IGlkZW50aWZpZXJzW2pdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdHlwZSA9IGFwcGxpZWRUeXBlLnR5cGU7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwYXJhbWV0ZXIgPSBwYXJhbWV0ZXJzW3BhcmFtZXRlcnNDb3VudGVyXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ5UmVmZXJlbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShwYXJhbWV0ZXIgaW5zdGFuY2VvZiBJZGVudGlmaWVyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkRXJyb3IoRXJyb3JzQ29kZXMuaWRlbnRpZmllckV4cGVjdGVkLCAnQ2Fubm90IHVzZSBvdGhlciBleHByZXNzaW9ucyBoZXJlJywgcGFyYW1ldGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmFkZFZhcmlhYmxlQnlSZWZlcmVuY2UocGFyYW1ldGVyLCBpZGVudGlmaWVyKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCB0aGlzLmV2YWx1YXRlRXhwcmVzc2lvbihwYXJhbWV0ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuYWRkVmFyaWFibGUoaWRlbnRpZmllciwgdHlwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5zZXRWYWx1ZShpZGVudGlmaWVyLCB0eXBlLCByZXN1bHQudmFsdWUsIGlkZW50aWZpZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnNDb3VudGVyKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZXZhbHVhdGVFeHByZXNzaW9uKGV4cHJlc3Npb24pXG4gICAge1xuICAgICAgICBpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIEdldFBvaW50ZXIpIHtcbiAgICAgICAgICAgIGxldCBpbmRlbnRpZmllckJyYW5jaCA9IGV4cHJlc3Npb24uaWRlbnRpZmllcjtcbiAgICAgICAgICAgIGxldCBpZGVudGlmaWVyQnJhbmNoUmVzdWx0ID0gYXdhaXQgdGhpcy5ldmFsdWF0ZUlkZW50aWZpZXJCcmFuY2goaW5kZW50aWZpZXJCcmFuY2gpO1xuICAgICAgICAgICAgbGV0IHR5cGUgPSBpZGVudGlmaWVyQnJhbmNoUmVzdWx0LmdldFR5cGUoKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUG9pbnRlclZhcmlhYmxlKGlkZW50aWZpZXJCcmFuY2hSZXN1bHQsIHR5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBFcXVhbCkge1xuICAgICAgICAgICAgbGV0IGxlZnRPcGVyYW5kID0gYXdhaXQgdGhpcy5ldmFsdWF0ZUV4cHJlc3Npb24oZXhwcmVzc2lvbi5sZWZ0KTtcbiAgICAgICAgICAgIGxldCByaWdodE9wZXJhbmQgPSBhd2FpdCB0aGlzLmV2YWx1YXRlRXhwcmVzc2lvbihleHByZXNzaW9uLnJpZ2h0KTtcbiAgICAgICAgICAgIGxldCB0eXBlSWQgPSBUeXBlc0lkcy5CT09MRUFOO1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XG4gICAgICAgICAgICBpZiAobGVmdE9wZXJhbmQudHlwZUlkID09PSBUeXBlc0lkcy5FTlVNICYmXG4gICAgICAgICAgICAgICAgcmlnaHRPcGVyYW5kLnR5cGVJZCA9PT0gVHlwZXNJZHMuRU5VTSAmJlxuICAgICAgICAgICAgICAgIE9iamVjdC5pcyhsZWZ0T3BlcmFuZC50eXBlLCByaWdodE9wZXJhbmQudHlwZSkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBsZWZ0T3BlcmFuZC5nZXRJbmRleCgpID09PSByaWdodE9wZXJhbmQuZ2V0SW5kZXgoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbGVmdE9wZXJhbmQudmFsdWUgPT09IHJpZ2h0T3BlcmFuZC52YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTY2FsYXJWYXJpYWJsZShyZXN1bHQsIHR5cGVJZCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIEdyZWF0ZXIpIHtcbiAgICAgICAgICAgIGxldCBsZWZ0T3BlcmFuZCA9IGF3YWl0IHRoaXMuZXZhbHVhdGVFeHByZXNzaW9uKGV4cHJlc3Npb24ubGVmdCk7XG4gICAgICAgICAgICBsZXQgcmlnaHRPcGVyYW5kID0gYXdhaXQgdGhpcy5ldmFsdWF0ZUV4cHJlc3Npb24oZXhwcmVzc2lvbi5yaWdodCk7XG4gICAgICAgICAgICBsZXQgdHlwZUlkID0gVHlwZXNJZHMuQk9PTEVBTjtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGxlZnRPcGVyYW5kLnR5cGVJZCA9PT0gVHlwZXNJZHMuQ0hBUiAmJlxuICAgICAgICAgICAgICAgIHJpZ2h0T3BlcmFuZC50eXBlSWQgPT09IFR5cGVzSWRzLkNIQVIpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBsZWZ0T3BlcmFuZC52YWx1ZS5jaGFyQ29kZUF0KDApID4gcmlnaHRPcGVyYW5kLnZhbHVlLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYoICBsZWZ0T3BlcmFuZC50eXBlSWQgPT09IFR5cGVzSWRzLkVOVU0gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0T3BlcmFuZC50eXBlSWQgPT09IFR5cGVzSWRzLkVOVU0gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5pcyhsZWZ0T3BlcmFuZC50eXBlLCByaWdodE9wZXJhbmQudHlwZSkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBsZWZ0T3BlcmFuZC5nZXRJbmRleCgpID4gcmlnaHRPcGVyYW5kLmdldEluZGV4KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGxlZnRPcGVyYW5kLnZhbHVlID4gcmlnaHRPcGVyYW5kLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTY2FsYXJWYXJpYWJsZShyZXN1bHQsIHR5cGVJZCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIExlc3MpIHtcbiAgICAgICAgICAgIGxldCBsZWZ0T3BlcmFuZCA9IGF3YWl0IHRoaXMuZXZhbHVhdGVFeHByZXNzaW9uKGV4cHJlc3Npb24ubGVmdCk7XG4gICAgICAgICAgICBsZXQgcmlnaHRPcGVyYW5kID0gYXdhaXQgdGhpcy5ldmFsdWF0ZUV4cHJlc3Npb24oZXhwcmVzc2lvbi5yaWdodCk7XG4gICAgICAgICAgICBsZXQgdHlwZUlkID0gVHlwZXNJZHMuQk9PTEVBTjtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGxlZnRPcGVyYW5kLnR5cGVJZCA9PT0gVHlwZXNJZHMuQ0hBUiAmJlxuICAgICAgICAgICAgICAgIHJpZ2h0T3BlcmFuZC50eXBlSWQgPT09IFR5cGVzSWRzLkNIQVIpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBsZWZ0T3BlcmFuZC52YWx1ZS5jaGFyQ29kZUF0KDApIDwgcmlnaHRPcGVyYW5kLnZhbHVlLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYoICBsZWZ0T3BlcmFuZC50eXBlSWQgPT09IFR5cGVzSWRzLkVOVU0gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0T3BlcmFuZC50eXBlSWQgPT09IFR5cGVzSWRzLkVOVU0gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5pcyhsZWZ0T3BlcmFuZC50eXBlLCByaWdodE9wZXJhbmQudHlwZSkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBsZWZ0T3BlcmFuZC5nZXRJbmRleCgpIDwgcmlnaHRPcGVyYW5kLmdldEluZGV4KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGxlZnRPcGVyYW5kLnZhbHVlIDwgcmlnaHRPcGVyYW5kLnZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFNjYWxhclZhcmlhYmxlKHJlc3VsdCwgdHlwZUlkKTtcbiAgICAgICAgfSBlbHNlIGlmIChleHByZXNzaW9uIGluc3RhbmNlb2YgR3JlYXRlck9yRXF1YWwpIHtcbiAgICAgICAgICAgIGxldCBsZWZ0T3BlcmFuZCA9IGF3YWl0IHRoaXMuZXZhbHVhdGVFeHByZXNzaW9uKGV4cHJlc3Npb24ubGVmdCk7XG4gICAgICAgICAgICBsZXQgcmlnaHRPcGVyYW5kID0gYXdhaXQgdGhpcy5ldmFsdWF0ZUV4cHJlc3Npb24oZXhwcmVzc2lvbi5yaWdodCk7XG4gICAgICAgICAgICBsZXQgdHlwZUlkID0gVHlwZXNJZHMuQk9PTEVBTjtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGxlZnRPcGVyYW5kLnR5cGVJZCA9PT0gVHlwZXNJZHMuQ0hBUiAmJlxuICAgICAgICAgICAgICAgIHJpZ2h0T3BlcmFuZC50eXBlSWQgPT09IFR5cGVzSWRzLkNIQVIpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBsZWZ0T3BlcmFuZC52YWx1ZS5jaGFyQ29kZUF0KDApID49IHJpZ2h0T3BlcmFuZC52YWx1ZS5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgfSBlbHNlIGlmKCAgbGVmdE9wZXJhbmQudHlwZUlkID09PSBUeXBlc0lkcy5FTlVNICYmXG4gICAgICAgICAgICAgICAgICAgICAgICByaWdodE9wZXJhbmQudHlwZUlkID09PSBUeXBlc0lkcy5FTlVNICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuaXMobGVmdE9wZXJhbmQudHlwZSwgcmlnaHRPcGVyYW5kLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbGVmdE9wZXJhbmQuZ2V0SW5kZXgoKSA+PSByaWdodE9wZXJhbmQuZ2V0SW5kZXgoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbGVmdE9wZXJhbmQudmFsdWUgPj0gcmlnaHRPcGVyYW5kLnZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFNjYWxhclZhcmlhYmxlKHJlc3VsdCwgdHlwZUlkKTtcbiAgICAgICAgfSBlbHNlIGlmIChleHByZXNzaW9uIGluc3RhbmNlb2YgTGVzc09yRXF1YWwpIHtcbiAgICAgICAgICAgIGxldCBsZWZ0T3BlcmFuZCA9IGF3YWl0IHRoaXMuZXZhbHVhdGVFeHByZXNzaW9uKGV4cHJlc3Npb24ubGVmdCk7XG4gICAgICAgICAgICBsZXQgcmlnaHRPcGVyYW5kID0gYXdhaXQgdGhpcy5ldmFsdWF0ZUV4cHJlc3Npb24oZXhwcmVzc2lvbi5yaWdodCk7XG4gICAgICAgICAgICBsZXQgdHlwZUlkID0gVHlwZXNJZHMuQk9PTEVBTjtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGxlZnRPcGVyYW5kLnR5cGVJZCA9PT0gVHlwZXNJZHMuQ0hBUiAmJlxuICAgICAgICAgICAgICAgIHJpZ2h0T3BlcmFuZC50eXBlSWQgPT09IFR5cGVzSWRzLkNIQVIpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBsZWZ0T3BlcmFuZC52YWx1ZS5jaGFyQ29kZUF0KDApIDw9IHJpZ2h0T3BlcmFuZC52YWx1ZS5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgfSBlbHNlIGlmKCAgbGVmdE9wZXJhbmQudHlwZUlkID09PSBUeXBlc0lkcy5FTlVNICYmXG4gICAgICAgICAgICAgICAgICAgICAgICByaWdodE9wZXJhbmQudHlwZUlkID09PSBUeXBlc0lkcy5FTlVNICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuaXMobGVmdE9wZXJhbmQudHlwZSwgcmlnaHRPcGVyYW5kLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbGVmdE9wZXJhbmQuZ2V0SW5kZXgoKSA8PSByaWdodE9wZXJhbmQuZ2V0SW5kZXgoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbGVmdE9wZXJhbmQudmFsdWUgPD0gcmlnaHRPcGVyYW5kLnZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFNjYWxhclZhcmlhYmxlKHJlc3VsdCwgdHlwZUlkKTtcbiAgICAgICAgfSBlbHNlIGlmIChleHByZXNzaW9uIGluc3RhbmNlb2YgTm90RXF1YWwpIHtcbiAgICAgICAgICAgIGxldCBsZWZ0T3BlcmFuZCA9IGF3YWl0IHRoaXMuZXZhbHVhdGVFeHByZXNzaW9uKGV4cHJlc3Npb24ubGVmdCk7XG4gICAgICAgICAgICBsZXQgcmlnaHRPcGVyYW5kID0gYXdhaXQgdGhpcy5ldmFsdWF0ZUV4cHJlc3Npb24oZXhwcmVzc2lvbi5yaWdodCk7XG4gICAgICAgICAgICBsZXQgdHlwZUlkID0gVHlwZXNJZHMuQk9PTEVBTjtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGxlZnRPcGVyYW5kLnR5cGVJZCA9PT0gVHlwZXNJZHMuRU5VTSAmJlxuICAgICAgICAgICAgICAgIHJpZ2h0T3BlcmFuZC50eXBlSWQgPT09IFR5cGVzSWRzLkVOVU0gJiZcbiAgICAgICAgICAgICAgICBPYmplY3QuaXMobGVmdE9wZXJhbmQudHlwZSwgcmlnaHRPcGVyYW5kLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbGVmdE9wZXJhbmQuZ2V0SW5kZXgoKSAhPT0gcmlnaHRPcGVyYW5kLmdldEluZGV4KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGxlZnRPcGVyYW5kLnZhbHVlICE9PSByaWdodE9wZXJhbmQudmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgU2NhbGFyVmFyaWFibGUocmVzdWx0LCB0eXBlSWQpO1xuICAgICAgICB9IGVsc2UgaWYgKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBJbikge1xuICAgICAgICAgICAgbGV0IGxlZnRPcGVyYW5kID0gYXdhaXQgdGhpcy5ldmFsdWF0ZUV4cHJlc3Npb24oZXhwcmVzc2lvbi5sZWZ0KTtcbiAgICAgICAgICAgIGxldCByaWdodE9wZXJhbmQgPSBhd2FpdCB0aGlzLmV2YWx1YXRlRXhwcmVzc2lvbihleHByZXNzaW9uLnJpZ2h0KTtcbiAgICAgICAgICAgIGxldCB0eXBlSWQgPSBUeXBlc0lkcy5CT09MRUFOO1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGZhbHNlO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFNjYWxhclZhcmlhYmxlKHJlc3VsdCwgdHlwZUlkKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZXZhbHVhdGVTaW1wbGVFeHByZXNzaW9uKGV4cHJlc3Npb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZXZhbHVhdGVTaW1wbGVFeHByZXNzaW9uKGV4cHJlc3Npb24pXG4gICAge1xuICAgICAgICBpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIEFkZGl0aW9uIHx8XG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbiBpbnN0YW5jZW9mIFN1YnRyYWN0aW9uKSB7XG5cbiAgICAgICAgICAgIGxldCBsZWZ0T3BlcmFuZCA9IGF3YWl0IHRoaXMuZXZhbHVhdGVTaW1wbGVFeHByZXNzaW9uKGV4cHJlc3Npb24ubGVmdCk7XG4gICAgICAgICAgICBsZXQgcmlnaHRPcGVyYW5kID0gYXdhaXQgdGhpcy5ldmFsdWF0ZVNpbXBsZUV4cHJlc3Npb24oZXhwcmVzc2lvbi5yaWdodCk7XG4gICAgICAgICAgICBsZXQgdHlwZUlkID0gbGVmdE9wZXJhbmQudHlwZUlkID09PSBUeXBlc0lkcy5SRUFMIHx8XG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0T3BlcmFuZC50eXBlSWQgPT09IFR5cGVzSWRzLlJFQUwgPyBUeXBlc0lkcy5SRUFMIDogVHlwZXNJZHMuSU5URUdFUjtcblxuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIEFkZGl0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbGVmdE9wZXJhbmQudmFsdWUgKyByaWdodE9wZXJhbmQudmFsdWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBTdWJ0cmFjdGlvbikge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGxlZnRPcGVyYW5kLnZhbHVlIC0gcmlnaHRPcGVyYW5kLnZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFNjYWxhclZhcmlhYmxlKHJlc3VsdCwgdHlwZUlkKTtcbiAgICAgICAgfSBlbHNlIGlmIChleHByZXNzaW9uIGluc3RhbmNlb2YgTG9naWNhbE9yKSB7XG4gICAgICAgICAgICBsZXQgbGVmdE9wZXJhbmQgPSBhd2FpdCB0aGlzLmV2YWx1YXRlU2ltcGxlRXhwcmVzc2lvbihleHByZXNzaW9uLmxlZnQpO1xuICAgICAgICAgICAgbGV0IHJpZ2h0T3BlcmFuZCA9IGF3YWl0IHRoaXMuZXZhbHVhdGVTaW1wbGVFeHByZXNzaW9uKGV4cHJlc3Npb24ucmlnaHQpO1xuICAgICAgICAgICAgbGV0IHR5cGVJZCA9IFR5cGVzSWRzLkJPT0xFQU47XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gbGVmdE9wZXJhbmQudmFsdWUgfHwgcmlnaHRPcGVyYW5kLnZhbHVlO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFNjYWxhclZhcmlhYmxlKHJlc3VsdCwgdHlwZUlkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmV2YWx1YXRlVGVybShleHByZXNzaW9uKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGV2YWx1YXRlVGVybShleHByZXNzaW9uKVxuICAgIHtcbiAgICAgICAgaWYgKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBOb3QpIHtcbiAgICAgICAgICAgIGxldCB0ZXJtID0gYXdhaXQgdGhpcy5ldmFsdWF0ZVRlcm0oZXhwcmVzc2lvbi52YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNjYWxhclZhcmlhYmxlKCF0ZXJtLnZhbHVlLCB0ZXJtLnR5cGVJZCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIFVuYXJ5TWludXMpIHtcbiAgICAgICAgICAgIGxldCB0ZXJtID0gYXdhaXQgdGhpcy5ldmFsdWF0ZVRlcm0oZXhwcmVzc2lvbi52YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNjYWxhclZhcmlhYmxlKC10ZXJtLnZhbHVlLCB0ZXJtLnR5cGVJZCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIE11bHRpcGxpY2F0aW9uKSB7XG4gICAgICAgICAgICBsZXQgbGVmdE9wZXJhbmQgPSBhd2FpdCB0aGlzLmV2YWx1YXRlTXVsdGlwbGllcihleHByZXNzaW9uLmxlZnQpO1xuICAgICAgICAgICAgbGV0IHJpZ2h0T3BlcmFuZCA9IGF3YWl0IHRoaXMuZXZhbHVhdGVNdWx0aXBsaWVyKGV4cHJlc3Npb24ucmlnaHQpO1xuICAgICAgICAgICAgbGV0IHR5cGVJZCA9IGxlZnRPcGVyYW5kLnR5cGVJZCA9PT0gVHlwZXNJZHMuUkVBTCB8fFxuICAgICAgICAgICAgICAgICAgICByaWdodE9wZXJhbmQudHlwZUlkID09PSBUeXBlc0lkcy5SRUFMID8gVHlwZXNJZHMuUkVBTCA6IFR5cGVzSWRzLklOVEVHRVI7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gbGVmdE9wZXJhbmQudmFsdWUgKiByaWdodE9wZXJhbmQudmFsdWU7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgU2NhbGFyVmFyaWFibGUocmVzdWx0LCB0eXBlSWQpO1xuICAgICAgICB9IGVsc2UgaWYgKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBEaXZpc2lvbikge1xuICAgICAgICAgICAgbGV0IGxlZnRPcGVyYW5kID0gYXdhaXQgdGhpcy5ldmFsdWF0ZU11bHRpcGxpZXIoZXhwcmVzc2lvbi5sZWZ0KTtcbiAgICAgICAgICAgIGxldCByaWdodE9wZXJhbmQgPSBhd2FpdCB0aGlzLmV2YWx1YXRlTXVsdGlwbGllcihleHByZXNzaW9uLnJpZ2h0KTtcbiAgICAgICAgICAgIGxldCB0eXBlSWQgPSBUeXBlc0lkcy5SRUFMO1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGxlZnRPcGVyYW5kLnZhbHVlIC8gcmlnaHRPcGVyYW5kLnZhbHVlO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFNjYWxhclZhcmlhYmxlKHJlc3VsdCwgdHlwZUlkKTtcbiAgICAgICAgfSBlbHNlIGlmIChleHByZXNzaW9uIGluc3RhbmNlb2YgSW50ZWdlckRpdmlzaW9uKSB7XG4gICAgICAgICAgICBsZXQgbGVmdE9wZXJhbmQgPSBhd2FpdCB0aGlzLmV2YWx1YXRlTXVsdGlwbGllcihleHByZXNzaW9uLmxlZnQpO1xuICAgICAgICAgICAgbGV0IHJpZ2h0T3BlcmFuZCA9IGF3YWl0IHRoaXMuZXZhbHVhdGVNdWx0aXBsaWVyKGV4cHJlc3Npb24ucmlnaHQpO1xuICAgICAgICAgICAgbGV0IHR5cGVJZCA9IFR5cGVzSWRzLklOVEVHRVI7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gTWF0aC50cnVuYyhsZWZ0T3BlcmFuZC52YWx1ZSAvIHJpZ2h0T3BlcmFuZC52YWx1ZSk7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgU2NhbGFyVmFyaWFibGUocmVzdWx0LCB0eXBlSWQpO1xuICAgICAgICB9IGVsc2UgaWYgKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBNb2R1bG8pIHtcbiAgICAgICAgICAgIGxldCBsZWZ0T3BlcmFuZCA9IGF3YWl0IHRoaXMuZXZhbHVhdGVNdWx0aXBsaWVyKGV4cHJlc3Npb24ubGVmdCk7XG4gICAgICAgICAgICBsZXQgcmlnaHRPcGVyYW5kID0gYXdhaXQgdGhpcy5ldmFsdWF0ZU11bHRpcGxpZXIoZXhwcmVzc2lvbi5yaWdodCk7XG4gICAgICAgICAgICBsZXQgdHlwZUlkID0gVHlwZXNJZHMuSU5URUdFUjtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBsZWZ0T3BlcmFuZC52YWx1ZSAlIHJpZ2h0T3BlcmFuZC52YWx1ZTtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTY2FsYXJWYXJpYWJsZShyZXN1bHQsIHR5cGVJZCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIExvZ2ljYWxBbmQpIHtcbiAgICAgICAgICAgIGxldCBsZWZ0T3BlcmFuZCA9IGF3YWl0IHRoaXMuZXZhbHVhdGVNdWx0aXBsaWVyKGV4cHJlc3Npb24ubGVmdCk7XG4gICAgICAgICAgICBsZXQgcmlnaHRPcGVyYW5kID0gYXdhaXQgdGhpcy5ldmFsdWF0ZU11bHRpcGxpZXIoZXhwcmVzc2lvbi5yaWdodCk7XG4gICAgICAgICAgICBsZXQgdHlwZUlkID0gVHlwZXNJZHMuQk9PTEVBTjtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBsZWZ0T3BlcmFuZC52YWx1ZSAmJiByaWdodE9wZXJhbmQudmFsdWU7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgU2NhbGFyVmFyaWFibGUocmVzdWx0LCB0eXBlSWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZXZhbHVhdGVNdWx0aXBsaWVyKGV4cHJlc3Npb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZXZhbHVhdGVNdWx0aXBsaWVyKGV4cHJlc3Npb24pXG4gICAge1xuICAgICAgICBpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIENvbnN0YW50KSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNjYWxhclZhcmlhYmxlKGV4cHJlc3Npb24uc3ltYm9sLnZhbHVlLCBleHByZXNzaW9uLnR5cGVJZCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIEZ1bmN0aW9uQ2FsbCB8fFxuICAgICAgICAgICAgICAgIGV4cHJlc3Npb24gaW5zdGFuY2VvZiBJZGVudGlmaWVyIHx8XG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbiBpbnN0YW5jZW9mIEluZGV4ZWRJZGVudGlmaWVyIHx8XG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbiBpbnN0YW5jZW9mIEdldEJ5UG9pbnRlciB8fFxuICAgICAgICAgICAgICAgIGV4cHJlc3Npb24gaW5zdGFuY2VvZiBUYWtlRmllbGQpIHtcblxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZXZhbHVhdGVJZGVudGlmaWVyQnJhbmNoKGV4cHJlc3Npb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZXZhbHVhdGVFeHByZXNzaW9uKGV4cHJlc3Npb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkRXJyb3IoZXJyb3JDb2RlLCBlcnJvclRleHQgPSBudWxsLCB0cmVlTm9kZSA9IG51bGwpXG4gICAge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRoaXMuZXJyb3JzRGVzY3JpcHRpb24uZ2V0RXJyb3JUZXh0QnlDb2RlKGVycm9yQ29kZSkgK1xuICAgICAgICAgICAgICAgIChlcnJvclRleHQgPT09IG51bGwgPyAnJyA6ICgnLiAnICsgZXJyb3JUZXh0KSk7XG4gICAgICAgIGxldCBjdXJyZW50UG9zaXRpb24gPSB0cmVlTm9kZSA9PT0gbnVsbCA/IG51bGwgOiB0cmVlTm9kZS5zeW1ib2wudGV4dFBvc2l0aW9uO1xuICAgICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yKGVycm9yQ29kZSwgbWVzc2FnZSwgY3VycmVudFBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBhc3luYyBzZXRJZGVudGlmaWVyQnJhbmNoVmFsdWUoaWRlbnRpZmllckJyYW5jaCwgZXhwcmVzc2lvblJlc3VsdClcbiAgICB7XG4gICAgICAgIGxldCBjdXJyZW50U2NvcGUgPSB0aGlzLmdldEN1cnJlbnRTY29wZSgpO1xuXG4gICAgICAgIGlmIChpZGVudGlmaWVyQnJhbmNoIGluc3RhbmNlb2YgVGFrZUZpZWxkKSB7XG4gICAgICAgICAgICBsZXQgcmVjb3JkVmFyaWFibGUgPSBhd2FpdCB0aGlzLmV2YWx1YXRlSWRlbnRpZmllckJyYW5jaChpZGVudGlmaWVyQnJhbmNoLmJhc2VFeHByZXNzaW9uKTtcbiAgICAgICAgICAgIGxldCBwcm9wZXJ0eUlkZW50aWZpZXIgPSBpZGVudGlmaWVyQnJhbmNoLnN1YkZpZWxkO1xuXG4gICAgICAgICAgICBjdXJyZW50U2NvcGUuc2V0UmVjb3JkVmFyaWFibGVQcm9wZXJ0eShyZWNvcmRWYXJpYWJsZSwgcHJvcGVydHlJZGVudGlmaWVyLCBleHByZXNzaW9uUmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpZGVudGlmaWVyQnJhbmNoIGluc3RhbmNlb2YgSW5kZXhlZElkZW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV2YWx1YXRlSW5kZXhSaW5nKGlkZW50aWZpZXJCcmFuY2guaW5kZXhSaW5nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3VycmVudFNjb3BlLnNldFZhcmlhYmxlVmFsdWUoaWRlbnRpZmllckJyYW5jaCwgZXhwcmVzc2lvblJlc3VsdCwgaWRlbnRpZmllckJyYW5jaCk7XG4gICAgICAgIH1cbiAgICB9XG59OyIsIlxuLy9pbXBvcnQgeyBGaWxlSU8gfSBmcm9tICcuLi9JTy9GaWxlSU8uanMnO1xuaW1wb3J0IHsgU3RyaW5nSU8gfSBmcm9tICcuLi9JTy9TdHJpbmdJTy5qcyc7XG5pbXBvcnQgeyBMZXhpY2FsQW5hbHl6ZXIgfSBmcm9tICcuLi9MZXhpY2FsQW5hbHl6ZXIvTGV4aWNhbEFuYWx5emVyLmpzJztcbmltcG9ydCB7IFN5bnRheEFuYWx5emVyIH0gZnJvbSAnLi4vU3ludGF4QW5hbHl6ZXIvU3ludGF4QW5hbHl6ZXIuanMnO1xuaW1wb3J0IHsgRW5naW5lIH0gZnJvbSAnLi4vU2VtYW50aWNzL0VuZ2luZS5qcyc7XG5pbXBvcnQgeyBSdW50aW1lRXJyb3IgfSBmcm9tICcuLi9FcnJvcnMvUnVudGltZUVycm9yLmpzJztcbmltcG9ydCB7IFR5cGVzSWRzIH0gZnJvbSAnLi4vU2VtYW50aWNzL1ZhcmlhYmxlcy9UeXBlc0lkcy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBCcm93c2VyUGFzY2FsSnMge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIEVuZ2luZVxuICAgICAqL1xuICAgIGVuZ2luZTtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIFJ1bnRpbWVFcnJvclxuICAgICAqL1xuICAgIGVycm9yO1xuXG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIH1cblxuICAgIHJ1blN0cmluZyhwcm9ncmFtVGV4dCkge1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgZmlsZUlPID0gbmV3IFN0cmluZ0lPKHByb2dyYW1UZXh0LFxuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLmxpc3RpbmdPdXRwdXRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB2YXIgbGV4aWNhbEFuYWx5emVyID0gbmV3IExleGljYWxBbmFseXplcihmaWxlSU8pO1xuICAgICAgICAgICAgdmFyIHN5bnRheEFuYWx5emVyID0gbmV3IFN5bnRheEFuYWx5emVyKGxleGljYWxBbmFseXplcik7XG4gICAgICAgICAgICB2YXIgdHJlZSA9IHN5bnRheEFuYWx5emVyLmFuYWx5emUoKTtcbiAgICAgICAgICAgIHZhciBlbmdpbmUgPSBuZXcgRW5naW5lKHRyZWUsIHRoaXMuY29uZmlnKTtcbiAgICAgICAgICAgIGVuZ2luZS5ydW4oKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuXG4gICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIFJ1bnRpbWVFcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBlO1xuICAgICAgICAgICAgfSBlbHNlIHRocm93IGU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVuZ2luZSA9IGVuZ2luZTtcbiAgICAgICAgcmV0dXJuIGVuZ2luZTtcbiAgICB9XG5cbiAgICBnZXRWYXIodmFyTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbmdpbmUuZ2V0Q3VycmVudFNjb3BlKCkuaXRlbXNbdmFyTmFtZV07XG4gICAgfVxuXG4gICAgZ2V0VmFyVmFsdWUodmFyTmFtZSkge1xuICAgICAgICBsZXQgdmFyaWFibGUgPSB0aGlzLmdldFZhcih2YXJOYW1lKTtcblxuICAgICAgICBpZiAodmFyaWFibGUudHlwZUlkID09PSBUeXBlc0lkcy5BUlJBWSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFyKHZhck5hbWUpLml0ZW1zO1xuICAgICAgICB9IGVsc2UgIGlmICh2YXJpYWJsZS50eXBlSWQgPT09IFR5cGVzSWRzLkVOVU0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFZhcih2YXJOYW1lKS52YWx1ZS5zeW1ib2wuc3RyaW5nVmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRWYXIodmFyTmFtZSkudmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRFcnJvcigpIHtcbiAgICAgICByZXR1cm4gdGhpcy5lcnJvcjtcbiAgICB9XG59IiwiZXhwb3J0IGZ1bmN0aW9uIGdldE51bWJlck9mRGlnaXRzKG51bWJlcilcbntcbiAgICByZXR1cm4gKG51bWJlciA8IDEwID8gMSA6IE1hdGguZmxvb3IoTWF0aC5sb2cxMChudW1iZXIpKSkgKyAxO1xufSIsImltcG9ydCB7IEJyb3dzZXJQYXNjYWxKcyB9IGZyb20gJy4uL3Bhc2NhbC5qcy9zcmMvUGFzY2FsSnMvQnJvd3NlclBhc2NhbEpzLmpzJztcbmltcG9ydCB7IE9uZVZhck91dHB1dFN0cmVhbSB9IGZyb20gJy4uL3Bhc2NhbC5qcy9zcmMvSU8vT3V0cHV0L09uZVZhck91dHB1dFN0cmVhbS5qcydcbmltcG9ydCB7IFN0cmluZ091dHB1dCB9IGZyb20gJy4uL3Bhc2NhbC5qcy9zcmMvSU8vT3V0cHV0L1N0cmluZ091dHB1dC5qcyc7XG5pbXBvcnQgeyBUZXJtaW5hbCB9IGZyb20gJy4vVGVybWluYWwuanMnO1xuXG5sZXQgdGVybWluYWwgPSBuZXcgVGVybWluYWwoKTtcblxuY29uc3QgY29uZmlnID0gIHtcbiAgICBvdXRwdXRTdHJlYW06IHRlcm1pbmFsLFxuICAgIGxpc3RpbmdPdXRwdXQ6IG5ldyBTdHJpbmdPdXRwdXQoKSxcbiAgICBvdXB1dE5ld0xpbmVTeW1ib2w6ICdcXG4nLFxuICAgIGlucHV0OiB0ZXJtaW5hbCxcbn07XG5cblxubGV0IGVsZW1lbnRMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnZGl2LmRlbHBoaSBkaXYudG9vbGJhciBzcGFuIGEuY29tbWFuZF9oZWxwJyk7XG5cblxubGV0IGRpYWxvZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2RpYWxvZycpO1xuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2Nsb3NlJykub25jbGljayA9IGZ1bmN0aW9uKCkge1xuICAgIGRpYWxvZy5jbG9zZSgpO1xufTtcblxuXG5cblxuZWxlbWVudExpc3QuZm9yRWFjaCgoZWxlbSkgPT4ge1xuICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggJ2NsaWNrJyAsIGFzeW5jIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIGRpYWxvZy5zaG93KCk7XG5cbiAgICAgICAgbGV0IGRpdkRlbHBoaSA9IHRoaXMucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgICAgIGxldCBjb250YWluZXIgPSBkaXZEZWxwaGkucXVlcnlTZWxlY3RvcigndGFibGUgdGJvZHkgdHIgdGQuY29kZSBkaXYuY29udGFpbmVyJyk7XG4gICAgICAgIGxldCBwcm9ncmFtVGV4dCA9IGNvbnRhaW5lci50ZXh0Q29udGVudDtcblxuXG4gICAgICAgIGxldCBwYXNjYWwgPSBuZXcgQnJvd3NlclBhc2NhbEpzKGNvbmZpZyk7XG4gICAgICAgIHBhc2NhbC5ydW5TdHJpbmcocHJvZ3JhbVRleHQpO1xuICAgICAgICBjb25zb2xlLmxvZyhjb25maWcub3V0cHV0U3RyZWFtLnZhbHVlKTtcbiAgICAgICAgY29uZmlnLm91dHB1dFN0cmVhbS52YWx1ZSA9ICcnO1xuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG59KTtcblxuIiwiXG5leHBvcnQgY2xhc3MgVGVybWluYWxcbntcbiAgICBjb25zdHJ1Y3RvcigpXG4gICAge1xuICAgICAgICB0aGlzLnNjcmVlbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zY3JlZW4nKTtcbiAgICAgICAgdGhpcy5sZXR0ZXJzID0gW107XG4gICAgICAgIHRoaXMubGV0dGVyc0NvdW50ZXIgPSAwO1xuICAgIH1cblxuICAgIGdldExpbmUobmV4dExpbmUgPSBmYWxzZSlcbiAgICB7XG4gICAgICAgIGxldCBzY3JlZW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2NyZWVuJyk7XG4gICAgICAgIGxldCBsaW5lcyA9IHNjcmVlbi5xdWVyeVNlbGVjdG9yQWxsKCdkaXYnKTtcblxuICAgICAgICBsZXQgY3VycmVudExpbmUgPSBudWxsO1xuICAgICAgICBpZiAobmV4dExpbmUgfHwgbGluZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBjdXJyZW50TGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgc2NyZWVuLmFwcGVuZENoaWxkKGN1cnJlbnRMaW5lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN1cnJlbnRMaW5lID0gbGluZXNbbGluZXMubGVuZ3RoIC0gMV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY3VycmVudExpbmU7XG4gICAgfVxuXG4gICAgYWRkTGluZSh0ZXh0LCBuZXh0TGluZSA9IGZhbHNlKVxuICAgIHtcbiAgICAgICAgbGV0IGN1cnJlbnRMaW5lID0gdGhpcy5nZXRMaW5lKG5leHRMaW5lKTtcbiAgICAgICAgbGV0IGxpbmVDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG5cbiAgICAgICAgbGluZUNvbnRhaW5lci50ZXh0Q29udGVudCA9IHRleHQ7XG4gICAgICAgIGN1cnJlbnRMaW5lLmFwcGVuZENoaWxkKGxpbmVDb250YWluZXIpO1xuICAgIH1cblxuICAgIHdyaXRlKHRleHQpXG4gICAge1xuICAgICAgICBsZXQgbGluZXMgPSB0ZXh0LnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24oZWxlbSkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW0ucmVwbGFjZSgvIC9nLCAnXFx1MDBhMCcpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmFkZExpbmUobGluZXNbMF0pO1xuICAgICAgICBjb25zb2xlLmxvZyhsaW5lcyk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5hZGRMaW5lKGxpbmVzW2ldLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIHJlYWQobmV4dExpbmUgPSBmYWxzZSlcbiAgICB7XG4gICAgICAgIGxldCBjdXJyZW50TGluZSA9IHRoaXMuZ2V0TGluZShuZXh0TGluZSk7XG4gICAgICAgIGxldCBsaW5lQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICBsaW5lQ29udGFpbmVyLmNvbnRlbnRFZGl0YWJsZSA9ICd0cnVlJztcbiAgICAgICAgY3VycmVudExpbmUuYXBwZW5kQ2hpbGQobGluZUNvbnRhaW5lcik7XG4gICAgICAgIGxldCBzY3JlZW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2NyZWVuJyk7XG5cbiAgICAgICAgbGV0IGtleURvd25MaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVkaXRhYmxlU3BhbiA9IHRoaXMucXVlcnlTZWxlY3Rvcignc3Bhbltjb250ZW50ZWRpdGFibGU9dHJ1ZScpO1xuICAgICAgICAgICAgICAgIGVkaXRhYmxlU3Bhbi5jb250ZW50RWRpdGFibGUgPSAnZmFsc2UnO1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgc2NyZWVuLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywga2V5RG93bkxpc3RlbmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgaW5wdXRQcm9taXNlID0gbmV3IFByb21pc2UoXG4gICAgICAgICAgICBmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsaW5lQ29udGFpbmVyLmNvbnRlbnRFZGl0YWJsZSA9PT0gJ2ZhbHNlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShsaW5lQ29udGFpbmVyLnRleHRDb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIDMwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgc2NyZWVuLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBrZXlEb3duTGlzdGVuZXIpO1xuXG4gICAgICAgIHJldHVybiBpbnB1dFByb21pc2U7XG4vLyAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IGlucHV0UHJvbWlzZTtcbi8vICAgICAgICBjb25zb2xlLmxvZygnaW5wdXQnLCByZXN1bHQpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldENoYXIoKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMubGV0dGVycy5sZW5ndGggPT09IDAgfHwgdGhpcy5sZXR0ZXJzQ291bnRlciA+PSB0aGlzLmxldHRlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBsZXQgd29yZCA9IGF3YWl0IHRoaXMucmVhZCgpICsgJ1xcbic7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnd29yZCcsIHdvcmQpO1xuICAgICAgICAgICAgdGhpcy5sZXR0ZXJzID0gd29yZC5zcGxpdCgnJyk7XG5cbiAgICAgICAgICAgIHRoaXMubGV0dGVyc0NvdW50ZXIgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGN1cnJlbnRDaGFyID0gdGhpcy5sZXR0ZXJzW3RoaXMubGV0dGVyc0NvdW50ZXJdO1xuICAgICAgICB0aGlzLmxldHRlcnNDb3VudGVyKys7XG5cbiAgICAgICAgcmV0dXJuIGN1cnJlbnRDaGFyO1xuLy8gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShcbi8vICAgICAgICAgICAgZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4vLyAgICAgICAgICAgICAgICByZXNvbHZlKGN1cnJlbnRDaGFyKTtcbi8vICAgICAgICAgICAgfVxuLy8gICAgICAgICk7XG5cbiAgICB9XG59IiwiaW1wb3J0IHsgQmFzZU91dHB1dCB9IGZyb20gJy4vQmFzZU91dHB1dC5qcyc7XG5cbmV4cG9ydCBjbGFzcyBTdHJpbmdPdXRwdXQgIGV4dGVuZHMgQmFzZU91dHB1dFxue1xuICAgIGNvbnN0cnVjdG9yKClcbiAgICB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3V0cHV0TGluZXMgPSBbXTtcbiAgICB9XG5cbiAgICBsaXN0TGluZShsaW5lLCBudW1iZXIpXG4gICAge1xuICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5nZXRMaW5lUHJlZml4KG51bWJlciArIDEpICsgbGluZTtcbiAgICAgICAgdGhpcy5vdXRwdXRMaW5lcy5wdXNoKG91dHB1dC5yZXBsYWNlKC9bXFxuXFxyXS9nLCAnJykpO1xuICAgIH1cblxuICAgIGxpc3RFcnJvcihlcnJvcilcbiAgICB7XG4gICAgICAgIHRoaXMub3V0cHV0TGluZXMucHVzaCh0aGlzLmdldEVycm9yVGV4dChlcnJvciwgKyt0aGlzLmVycm9yc0NvdW50ZXIpKTtcbiAgICB9XG59IiwiaW1wb3J0IHtnZXROdW1iZXJPZkRpZ2l0c30gZnJvbSAnLi4vaGVscGVycy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBCYXNlT3V0cHV0XG57XG4gICAgY29uc3RydWN0b3IoKVxuICAgIHtcbiAgICAgICAgdGhpcy5lcnJvcnNDb3VudGVyID0gMDtcbiAgICB9XG5cbiAgICBsaXN0RXJyb3JzKGVycm9ycylcbiAgICB7XG4gICAgICAgIGVycm9ycy5mb3JFYWNoKGVsZW0gPT4gdGhpcy5saXN0RXJyb3IoZWxlbSkpO1xuICAgIH1cblxuICAgIGdldExpbmVQcmVmaXgobGluZU51bWJlcilcbiAgICB7XG4gICAgICAgIHJldHVybiAnICAnICsgKCBsaW5lTnVtYmVyIDwgMTAgPyAnMCcgOiAnJyApICsgbGluZU51bWJlciArICcgICAgJztcbiAgICB9XG5cbiAgICBnZXRFcnJvclRleHQoZXJyb3IsIGVycm9yTnVtYmVyKVxuICAgIHtcbiAgICAgICAgdmFyIGxpbmVOdW1iZXIgPSBlcnJvci50ZXh0UG9zaXRpb24ubGluZU51bWJlcjtcbiAgICAgICAgdmFyIGxpbmVOdW1iZXJEaWdpdHMgPSBnZXROdW1iZXJPZkRpZ2l0cyhsaW5lTnVtYmVyKTtcbiAgICAgICAgdmFyIGVycm9yTnVtYmVyRGlnaXRzID0gZ2V0TnVtYmVyT2ZEaWdpdHMoZXJyb3JOdW1iZXIpO1xuICAgICAgICB2YXIgZGlmZmVyZW5jZSA9IGxpbmVOdW1iZXJEaWdpdHMgLSBlcnJvck51bWJlckRpZ2l0cztcblxuICAgICAgICB2YXIgemVyb2VzTnVtYmVyID0gZGlmZmVyZW5jZSA+IDAgPyBkaWZmZXJlbmNlIDogMDtcbiAgICAgICAgdmFyIGdhcHNOdW1iZXIgPSBkaWZmZXJlbmNlIDwgMCA/IDIgKyBkaWZmZXJlbmNlIDogMjtcbiAgICAgICAgdmFyIHN0YXJzTnVtYmVyID0gbGluZU51bWJlckRpZ2l0cyArIDQ7XG5cbiAgICAgICAgcmV0dXJuICAnKionICsgKCBlcnJvck51bWJlciA8IDEwID8gJzAnIDogJycgKSArICcwJy5yZXBlYXQoemVyb2VzTnVtYmVyKSArIGVycm9yTnVtYmVyICsgJyonLnJlcGVhdChnYXBzTnVtYmVyKSArXG4gICAgICAgICAgICAgICAgJyAnLnJlcGVhdChlcnJvci50ZXh0UG9zaXRpb24uY2hhck51bWJlciArIDEpICsgJ14gRXJyb3IgQ29kZSAnICsgZXJyb3IuZXJyb3JDb2RlICsgJ1xcbicgK1xuICAgICAgICAgICAgICAgICcqJy5yZXBlYXQoc3RhcnNOdW1iZXIpICsgJyAgJyArIGVycm9yLmVycm9yVGV4dDtcbiAgICB9XG5cbiAgICBsaXN0RXJyb3IoZXJyb3IpXG4gICAge1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmdldEVycm9yVGV4dChlcnJvciwgKyt0aGlzLmVycm9yc0NvdW50ZXIpKTtcbiAgICB9XG59Il0sIm5hbWVzIjpbIlRleHRQb3NpdGlvbiIsImNvbnN0cnVjdG9yIiwibGluZU51bWJlciIsImNoYXJOdW1iZXIiLCJ0aGlzIiwiRXJyb3JzQ29kZXMiLCJpbmFkbWlzc2libGVTeW1ib2wiLCJmb3JiaWRkZW5DaGFyYWN0ZXIiLCJuYW1lTm90RGVzY3JpYmVkIiwiYnJlYWtPdXRPZkxvb3AiLCJpZGVudGlmaWVyQWxyZWFkeVVzZWQiLCJ2YXJpYWJsZU5vdERlY2xhcmVkIiwiY29uc3RhbnRPclZhcmlhYmxlTm90RGVjbGFyZWQiLCJ0eXBlc01pc21hdGNoIiwidHlwZU5vdERlY2xhcmVkIiwiaW5kZXhJc091dE9mUmFuZ2UiLCJpZGVudGlmaWVyRXhwZWN0ZWQiLCJlbGVtZW50SXNOb3RJbml0aWFsaXplZCIsIm5vdENhbGxhYmxlRWxlbWVudCIsImFycmF5RXhwZWN0ZWQiLCJyZWNvcmRQcm9wZXJ0eUlzTm90RGVmaW5lZCIsIkVycm9yc0Rlc2NyaXB0aW9uIiwiZXJyb3JDb2RlTWFwcGVyIiwiTWFwIiwiZ2V0RXJyb3JUZXh0QnlDb2RlIiwiZXJyb3JDb2RlIiwiaGFzIiwiZ2V0IiwiUnVudGltZUVycm9yIiwiRXJyb3IiLCJlcnJvclRleHQiLCJ0ZXh0UG9zaXRpb24iLCJzdXBlciIsIlN0cmluZ0lPIiwicHJpbnRlciIsInJlYWRlciIsImVycm9yc0Rlc2NyaXB0aW9uIiwicG9zaXRpb25Ob3ciLCJjdXJyZW50TGluZSIsImN1cnJlbnRMaW5lRXJyb3JzIiwibGluZXMiLCJsaW5lUG9pbnRlciIsImVuZE9mRmlsZSIsInNldExpbmVzIiwicHJvZ3JhbVRleHQiLCJzcGxpdCIsInJlYWROZXh0TGluZSIsImdldEN1cnJlbnRQb3NpdGlvbiIsIm5leHRDaCIsImxlbmd0aCIsImxpc3RFcnJvcnMiLCJwdXNoIiwiYWRkRXJyb3IiLCJtZXNzYWdlIiwiY3VycmVudFBvc2l0aW9uIiwicHJpbnRMaXN0aW5nIiwiZXJyb3IiLCJpIiwibGlzdExpbmUiLCJsaXN0RXJyb3IiLCJyZWFkV29yZHMiLCJleHBlY3RlZE51bWJlck9mV29yZHMiLCJTeW1ib2xzQ29kZXMiLCJzdGFyIiwic2xhc2giLCJlcXVhbCIsImNvbW1hIiwic2VtaWNvbG9uIiwiY29sb24iLCJwb2ludCIsImFycm93IiwibGVmdFBhciIsInJpZ2h0UGFyIiwibEJyYWNrZXQiLCJyQnJhY2tldCIsImZsUGFyIiwiZnJQYXIiLCJsYXRlciIsImdyZWF0ZXIiLCJsYXRlckVxdWFsIiwiZ3JlYXRlckVxdWFsIiwibGF0ZXJHcmVhdGVyIiwicGx1cyIsIm1pbnVzIiwibENvbW1lbnQiLCJyQ29tbWVudCIsImFzc2lnbiIsInR3b1BvaW50cyIsImF0IiwiaWRlbnQiLCJmbG9hdEMiLCJpbnRDIiwiY2hhckMiLCJzdHJpbmdDIiwiYm9vbGVhbkMiLCJjYXNlU3kiLCJlbHNlU3kiLCJmaWxlU3kiLCJnb3RvU3kiLCJ0aGVuU3kiLCJ1bnRpbFN5IiwiZG9TeSIsIndpdGhTeSIsImlmU3kiLCJvZlN5Iiwib3JTeSIsImluU3kiLCJ0b1N5IiwiZW5kU3kiLCJ2YXJTeSIsImRpdlN5IiwiYW5kU3kiLCJub3RTeSIsImZvclN5IiwibW9kU3kiLCJuaWxTeSIsInNldFN5IiwidHlwZVN5IiwicmVhbFN5IiwiY2hhclN5IiwiYmVnaW5TeSIsIndoaWxlU3kiLCJhcnJheVN5IiwiY29uc3RTeSIsImxhYmVsU3kiLCJkb3dudG9TeSIsInN0cmluZ1N5IiwicGFja2VkU3kiLCJyZWNvcmRTeSIsInJlcGVhdFN5IiwiaW50ZWdlclN5IiwiYm9vbGVhblN5IiwicHJvZ3JhbVN5IiwiZnVuY3Rpb25TeSIsInByb2NlZHVyZVN5IiwiYnJlYWtTeSIsInRydWVTeSIsImZhbHNlU3kiLCJLZXlXb3JkcyIsImtleVdvcmRzQ29kZXMiLCJnZXRTeW1ib2xDb2RlQnlLZXlXb3JkIiwia2V5V29yZCIsImxvd2VyQ2FzZSIsInRvTG93ZXJDYXNlIiwiU3ltYm9sQmFzZSIsInN5bWJvbENvZGUiLCJzdHJpbmdWYWx1ZSIsInZhbHVlIiwiU3ltYm9sIiwiTm1iRmxvYXQiLCJwYXJzZUZsb2F0IiwiTm1iSW50IiwiTnVtYmVyIiwicGFyc2VJbnQiLCJPbmVTeW1ib2wiLCJyZXBsYWNlIiwiU3RyaW5nQ29uc3RhbnQiLCJCb29sQ29uc3RhbnQiLCJMZXhpY2FsQW5hbHl6ZXIiLCJmaWxlSU8iLCJlcnJvcnNDb2RlcyIsInRva2VuIiwiY3VycmVudFdvcmQiLCJjaGFyIiwic3ltYm9sIiwiTUFYX0lERU5UIiwia2V5V29yZHMiLCJ3b3JkQnVmZmVyIiwibmV4dFN5bSIsInNraXBXaGl0ZVNwYWNlcyIsInNjYW5TeW1ib2wiLCJleGVjIiwiZ2V0U3ltYm9sIiwicG9pbnRQcmVzZW5jZSIsInByZXZpb3VzQ2hhciIsImN1cnJlbnRDaGFyIiwiYWRkRm9yYmlkZGVuQ2hhcmFjdGVyRXJyb3IiLCJ3cyIsImNoYXJhY3RlciIsIlN5bWJvbHNEZXNjcmlwdGlvbiIsInN5bWJvbENvZGVNYXBwZXIiLCJnZXRTeW1ib2xUZXh0QnlDb2RlIiwiVHJlZU5vZGVCYXNlIiwiQXNzaWduYXRpb24iLCJkZXN0aW5hdGlvbiIsInNvdXJjZUV4cHJlc3Npb24iLCJJbmRleGVkSWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJpbmRleFJpbmciLCJJbmRleFJpbmciLCJpbmRleEV4cHJlc3Npb24iLCJldmFsdWF0ZWRJbmRleEV4cHJlc3Npb24iLCJhcHBlbmRJbmRleFJpbmciLCJHZXRCeVBvaW50ZXIiLCJwb2ludGVyIiwiR2V0UG9pbnRlciIsIlRha2VGaWVsZCIsImJhc2VFeHByZXNzaW9uIiwic3ViRmllbGQiLCJCaW5hcnlPcGVyYXRpb24iLCJsZWZ0IiwicmlnaHQiLCJNdWx0aXBsaWNhdGlvbiIsIkRpdmlzaW9uIiwiQWRkaXRpb24iLCJTdWJ0cmFjdGlvbiIsIkNvbnN0YW50IiwidHlwZUlkIiwiSWRlbnRpZmllciIsIkZ1bmN0aW9uQ2FsbCIsImlkZW50aWZpZXJCcmFuY2giLCJwYXJhbWV0ZXJzIiwiVHlwZUJhc2UiLCJTY2FsYXJUeXBlIiwidG9TdHJpbmciLCJSZWNvcmRUeXBlIiwidHlwZXNBcnJheSIsInNlbGYiLCJ0eXBlc0xpc3QiLCJmb3JFYWNoIiwiZWxlbSIsInR5cGUiLCJpZGVudGlmaWVycyIsInByb3BlcnR5TmFtZSIsInByb3BlcnRpZXMiLCJqb2luIiwiQXBwbGllZE5hbWVkVHlwZSIsIlZhcmlhYmxlc0RlY2xhcmF0aW9uIiwidmFyaWFibGVzVHlwZSIsImluaXRpYWxWYWx1ZSIsIkNvbnN0YW50RGVjbGFyYXRpb24iLCJUeXBlRGVjbGFyYXRpb24iLCJDb21wb3VuZE9wZXJhdG9yIiwic2VudGVuY2VzIiwiSW1wbGljYXRpb24iLCJjb25kaXRpb24iLCJJbnRlZ2VyRGl2aXNpb24iLCJNb2R1bG8iLCJMb2dpY2FsQW5kIiwiTG9naWNhbE9yIiwiVW5hcnlNaW51cyIsIk5vdCIsIlByb2dyYW1CYXNlIiwibmFtZSIsInZhcnMiLCJwcm9jZWR1cmVzIiwiZnVuY3Rpb25zIiwidHlwZXMiLCJnZXRUeXBlIiwiUHJvZ3JhbSIsIlByb2NlZHVyZSIsIkZ1bmN0aW9uIiwiSW4iLCJFcXVhbCIsIk5vdEVxdWFsIiwiTGVzcyIsIkdyZWF0ZXIiLCJHcmVhdGVyT3JFcXVhbCIsIkxlc3NPckVxdWFsIiwiRnVuY3Rpb25UeXBlIiwic2lnbmF0dXJlIiwicmV0dXJuVHlwZSIsInNpZ25hdHVyZVRleHRzIiwiaW5kZXgiLCJpZGVudHMiLCJtYXAiLCJQcm9jZWR1cmVUeXBlIiwiVHlwZUFwcGxpZWQiLCJieVJlZmVyZW5jZSIsIkVudW1UeXBlIiwiaXRlbXMiLCJBcnJheVR5cGUiLCJsZWZ0SW5kZXgiLCJyaWdodEluZGV4IiwidHlwZU9mRWxlbWVudHMiLCJQb2ludGVyVHlwZSIsIldoaWxlQ3ljbGUiLCJib2R5IiwiUmVwZWF0Q3ljbGUiLCJTd2l0Y2giLCJzd2l0Y2hFeHByZXNzaW9uIiwiY2FzZXMiLCJlbHNlU2VudGVuY2UiLCJDYXNlIiwiY29uc3RhbnRzIiwib3BlcmF0b3IiLCJGb3JDeWNsZSIsInZhcmlhYmxlSWRlbnRpZmllciIsImluaXRFeHByZXNzaW9uIiwibGFzdEV4cHJlc3Npb24iLCJjb3VudERvd24iLCJCcmVhayIsIlN5bnRheEFuYWx5emVyIiwibGV4aWNhbEFuYWx5emVyIiwic3ltYm9sc0Rlc2NyaXB0aW9uIiwidHJlZSIsInRyZWVzIiwidHJlZXNDb3VudGVyIiwiZXJyb3JEZXRlY3RlZCIsImFub3RoZXJTeW1ib2xFeHBlY3RlZCIsImV4cGVjdGVkU3ltYm9sIiwiYWNjZXB0IiwiZXhwZWN0ZWRTeW1ib2xDb2RlIiwiZ29Ub0VuZCIsImFuYWx5emUiLCJzY2FuUHJvZ3JhbW1lIiwic2NhbkJsb2NrIiwibGFiZWxQYXJ0IiwiY29uc3RQYXJ0IiwidHlwZVBhcnQiLCJ2YXJQYXJ0IiwicHJvY0Z1bmNQYXJ0Iiwic3RhdGVtZW50UGFydCIsImlkZW50U3ltYm9sIiwic2NhblR5cGUiLCJlcXVhbFN5bWJvbCIsInNjYW5Db25zdGFudCIsImNvbnN0YW50RGVjbGFyYXRpb24iLCJ0eXBlRGVjbGFyYXRpb24iLCJzY2FuVmFyRGVjbGFyYXRpb24iLCJzY2FuTGlzdEFycmF5VHlwZSIsInR5cGVTeW1ib2wiLCJlbGVtc1R5cGUiLCJ0YXJnZXRUeXBlIiwiZW51bVR5cGUiLCJmdW5jdGlvblR5cGUiLCJzY2FuUGFyYW1ldGVyc0xpc3QiLCJwcm9jZWR1cmVUeXBlIiwicmVjb3JkU3ltYm9sIiwicmVjb3JkRWxlbXMiLCJzY2FuUHJvY2VkdXJlIiwic2NhbkZ1bmN0aW9uIiwicHJvY2VkdXJlU3ltYm9sIiwicHJvY2VkdXJlTmFtZSIsImZ1bmN0aW9uU3ltYm9sIiwiZnVuY3Rpb25OYW1lIiwicGFyYW1ldGVyc0xpc3QiLCJzZW50ZW5jZSIsInNjYW5TZW50ZW5jZSIsInNjYW5JZGVudGlmaWVyQnJhbmNoIiwiYXNzaWduU3ltYm9sIiwic2NhbkV4cHJlc3Npb24iLCJzY2FuQ29tcG91bmRPcGVyYXRvciIsImlmU3ltYm9sIiwid2hpbGVTeW1ib2wiLCJyZXBlYXRTeW1ib2wiLCJjb21wb3VuZE9wZXJhdG9yIiwiZm9yU3ltYm9sIiwidmFyaWFibGUiLCJzY2FuU2ltcGxlRXhwcmVzc2lvbiIsImJyZWFrU3ltYm9sIiwiY2FzZVN5bWJvbCIsInN3aXRjaEl0ZW0iLCJjYXNlSXRlbSIsImNvbW1hRm9sbG93cyIsInNjYW5JbmRpY2VzQnJhY2tldHMiLCJpbmRleFN5bWJvbCIsInJvb3RJbmRleFJpbmciLCJjb21tYVN5bWJvbCIsImN1cnJlbnRJbmRleFJpbmciLCJzY2FuSW5kaWNlcyIsImxCcmFja2V0U3ltYm9sIiwiaW5wdXRFeHByZXNzaW9uIiwibGVmdFBhclN5bWJvbCIsInNjYW5QYXJhbWV0ZXJzIiwiYXRTeW1ib2wiLCJzaW1wbGVFeHByZXNzaW9uIiwidW5hcnlNaW51cyIsIm5vdCIsInRlcm0iLCJ1bmFyeU9wZXJhdGlvblN5bWJvbCIsInNjYW5UZXJtIiwibXVsdGlwbGllciIsInNjYW5NdWx0aXBsaWVyIiwiaW5jbHVkZXMiLCJzY2FuVW5zaWduZWRDb25zdGFudCIsImVtYmVkZGVkRXhwcmVzc2lvbiIsImNvbnN0YW50Iiwic2lnblN5bWJvbCIsIkJhc2VWYXJpYWJsZSIsIlNjYWxhclZhcmlhYmxlIiwiY2xvbmUiLCJFbnVtVmFyaWFibGUiLCJnZXRJbmRleCIsImxlbiIsIkFycmF5VmFyaWFibGUiLCJzY29wZSIsImxlZnRJbnRlZ2VySW5kZXgiLCJyaWdodEludGVnZXJJbmRleCIsIm9mZnNldCIsImFycmF5TGVuZ3RoIiwic2V0VmFsdWUiLCJnZXRJbnRlZ2VyVmFsdWVPZkluZGV4VmFyaWFibGUiLCJjcmVhdGVWYXJpYWJsZSIsIml0ZW0iLCJnZXRCeUluZGV4UmluZyIsImNyZWF0ZURlZmF1bHRWYXJpYWJsZSIsImZvdW5kSXRlbSIsImNvcHlBcnJheVZhcmlhYmxlIiwicGFyZW50QXJyYXkiLCJQb2ludGVyVmFyaWFibGUiLCJSZWNvcmRWYXJpYWJsZSIsInNldFByb3BlcnR5QnlQcm9wZXJ0eUlkZW50aWZpZXIiLCJwcm9wZXJ0eUlkZW50aWZpZXIiLCJoYXNPd25Qcm9wZXJ0eSIsImdldEJ5UHJvcGVydHlJZGVudGlmaWVyIiwicHJvcGVydHlUeXBlIiwiY29weVJlY29yZFZhcmlhYmxlIiwicHJvcGVydHkiLCJDYWxsYWJsZVZhcmlhYmxlIiwiUHJvY2VkdXJlSXRlbSIsImFzeW5jIiwiRnVuY3Rpb25JdGVtIiwiU2NvcGUiLCJwYXJlbnRTY29wZSIsImVudW1zSXRlbXMiLCJjeWNsZURlcHRoIiwiY2FsbGFibGVOYW1lIiwiYWRkVmFyaWFibGUiLCJ0cmVlTm9kZSIsImxvd2VyQ2FzZU5hbWUiLCJyZXNvbHZlZFR5cGUiLCJyZXNvbHZlTmFtZWRUeXBlIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY3JlYXRlQXJyYXlWYXJpYWJsZSIsImdldEludGVnZXJWYWx1ZU9mSW5kZXhDb25zdGFudCIsImNoYXJDb2RlQXQiLCJnZXRFbnVtRWxlbWVudCIsInZhbHVlRXhwcmVzc2lvbiIsIm1pbkludGVnZXJJbmRleCIsIk1hdGgiLCJtaW4iLCJtYXhJbnRlZ2VySW5kZXgiLCJtYXgiLCJyZWZUeXBlIiwic2FtZVR5cGUiLCJhZGRUeXBlTWlzbWF0Y2hFcnJvciIsImRlc3RpbmF0aW9uVHlwZSIsInNldFZhcmlhYmxlT2JqZWN0IiwiZ2V0RGVzdGluYXRpb25UeXBlIiwic2V0VmFyaWFibGVWYWx1ZSIsInNldFJlY29yZFZhcmlhYmxlUHJvcGVydHkiLCJyZWNvcmRWYXJpYWJsZSIsImRlc3RpbmF0aW9uSWRlbnRpZmllciIsInNvdXJjZVR5cGUiLCJpc0ludGVnZXIiLCJhcnJheVR5cGUiLCJnZXRWYXJpYWJsZSIsImdldEVsZW1lbnRCeUlkZW50aWZpZXIiLCJ0eXBlQSIsInR5cGVCIiwiT2JqZWN0IiwiaXMiLCJhUGFyYW1zIiwiZ2V0UGFyYW1ldGVyc0FycmF5IiwiYlBhcmFtcyIsInNhbWVTZXQiLCJrZXlzIiwiY2FsbGFibGVUeXBlIiwicGFyYW1ldGVyc0FycmF5IiwiY291bnRlciIsImlkZW50TGVuZ3RoIiwiaiIsImFkZFR5cGUiLCJlbnVtSXRlbSIsImdldFBhcmFtZXRlcnNMaXN0Iiwic2V0UGFyYW1ldGVyc0xpc3QiLCJQYXJhbWV0ZXJzTGlzdCIsImFkZENvbnN0YW50IiwiZ2V0VmFyaWFibGVCeVJlZmVyZW5jZSIsImFkZFZhcmlhYmxlQnlSZWZlcmVuY2UiLCJwYXJhbWV0ZXJJZGVudGlmaWVyIiwidHlwZU9iamVjdCIsImRlZmF1bHRWYWx1ZSIsInByb2NlZHVyZUl0ZW0iLCJmdW5jdGlvbkl0ZW0iLCJQcm9jZWR1cmVDYWxsIiwiVW5ib3VuZGVkUGFyYW1ldGVyc0xpc3QiLCJXcml0ZUxuIiwib3V0cHV0U3RyZWFtIiwib3VwdXROZXdMaW5lU3ltYm9sIiwid3JpdGUiLCJXcml0ZSIsIlJlYWRMbiIsImlucHV0IiwiZW5naW5lIiwicGFyYW1ldGVyc1R5cGVzIiwicGFyYW1ldGVyc1R5cGVzSWRzIiwicGFyYW1ldGVyIiwiZXZhbHVhdGVkUGFyYW1ldGVyIiwiZXZhbHVhdGVJZGVudGlmaWVyQnJhbmNoIiwid29yZHMiLCJnZXRXb3JkcyIsIndvcmQiLCJpc05hTiIsInNjYWxhclZhcmlhYmxlIiwic2V0SWRlbnRpZmllckJyYW5jaFZhbHVlIiwicmVzIiwiZ2V0V29yZCIsImdldENoYXIiLCJuZXh0Q2hhciIsImNoYXJQciIsIlByb2NlZHVyZXNTdG9yZSIsIndyaXRlbG4iLCJyZWFkbG4iLCJhZGRQcm9jZWR1cmUiLCJwcm9jZWR1cmUiLCJnZXRQcm9jZWR1cmUiLCJPcmQiLCJjb2RlIiwiQ2hyIiwiRnVuY3Rpb25zU3RvcmUiLCJjaHIiLCJvcmQiLCJhZGRGdW5jdGlvbiIsImdldEZ1bmN0aW9uIiwiRW5naW5lIiwiY29uZmlnIiwic2NvcGVzIiwiY3VycmVudFNjb3BlSWQiLCJwcm9jZWR1cmVzU3RvcmUiLCJmdW5jdGlvbnNTdG9yZSIsImdldEN1cnJlbnRTY29wZSIsInNldENvbnN0YW50cyIsInNldFR5cGVzIiwic2V0VmFyaWFibGVzIiwiZXZhbHVhdGVTZW50ZW5jZSIsImN1cnJlbnRTY29wZSIsInZhcmlhYmxlc0RlY2xhcmF0aW9uIiwiZXZhbHVhdGVFeHByZXNzaW9uIiwiZXZhbHVhdGVJbmRleFJpbmciLCJpZGVudGlmaWVyQnJhbmNoRXhwcmVzc2lvbiIsInJlc3VsdCIsImNhbGxlZEZ1bmN0aW9uIiwiYXJyYXlWYXJpYWJsZSIsInJldHVybmVkRWxlbSIsImNhbGxlZEVsZW0iLCJwcm9jZWR1cmVJZGVudGlmaWVyIiwiYWRkUGFyYW1ldGVyc1RvU2NvcGUiLCJydW4iLCJpbm5lclJ1biIsImV4cHJlc3Npb25SZXN1bHQiLCJzZW50ZW5jZXNOdW1iZXIiLCJjdXJyZW50VmFsdWUiLCJsYXN0VmFsdWUiLCJpbmNyZW1lbnQiLCJjb21wYXJhdGlvbiIsImxlZnRFbGVtIiwicmlnaHRFbGVtIiwicHJldmlvdXNWYWwiLCJjYW5Db250aW51ZSIsInN3aXRjaFZhbHVlIiwiY2FzZUZvdW5kIiwicGFyYW1ldGVyc1ZhbHVlcyIsIlByb21pc2UiLCJhbGwiLCJwYXJhbWV0ZXJzQ291bnRlciIsImFwcGxpZWRUeXBlIiwiZXhwcmVzc2lvbiIsImluZGVudGlmaWVyQnJhbmNoIiwiaWRlbnRpZmllckJyYW5jaFJlc3VsdCIsImxlZnRPcGVyYW5kIiwicmlnaHRPcGVyYW5kIiwiZXZhbHVhdGVTaW1wbGVFeHByZXNzaW9uIiwiZXZhbHVhdGVUZXJtIiwiZXZhbHVhdGVNdWx0aXBsaWVyIiwidHJ1bmMiLCJCcm93c2VyUGFzY2FsSnMiLCJydW5TdHJpbmciLCJsaXN0aW5nT3V0cHV0IiwiZSIsImdldFZhciIsInZhck5hbWUiLCJnZXRWYXJWYWx1ZSIsImdldEVycm9yIiwiZ2V0TnVtYmVyT2ZEaWdpdHMiLCJudW1iZXIiLCJmbG9vciIsImxvZzEwIiwidGVybWluYWwiLCJzY3JlZW4iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJsZXR0ZXJzIiwibGV0dGVyc0NvdW50ZXIiLCJnZXRMaW5lIiwibmV4dExpbmUiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZENoaWxkIiwiYWRkTGluZSIsInRleHQiLCJsaW5lQ29udGFpbmVyIiwidGV4dENvbnRlbnQiLCJjb25zb2xlIiwibG9nIiwiY29udGVudEVkaXRhYmxlIiwia2V5RG93bkxpc3RlbmVyIiwiZXZlbnQiLCJrZXkiLCJwcmV2ZW50RGVmYXVsdCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpbnB1dFByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwic2V0SW50ZXJ2YWwiLCJhZGRFdmVudExpc3RlbmVyIiwicmVhZCIsImVycm9yc0NvdW50ZXIiLCJlcnJvcnMiLCJnZXRMaW5lUHJlZml4IiwiZ2V0RXJyb3JUZXh0IiwiZXJyb3JOdW1iZXIiLCJsaW5lTnVtYmVyRGlnaXRzIiwiZGlmZmVyZW5jZSIsImdhcHNOdW1iZXIiLCJzdGFyc051bWJlciIsInJlcGVhdCIsIm91dHB1dExpbmVzIiwibGluZSIsIm91dHB1dCIsImVsZW1lbnRMaXN0IiwiZGlhbG9nIiwib25jbGljayIsImNsb3NlIiwic2hvdyIsInBhcmVudE5vZGUiXSwic291cmNlUm9vdCI6IiJ9