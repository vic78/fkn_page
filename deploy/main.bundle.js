(()=>{"use strict";class e{constructor(e=0,t=0){this.lineNumber=e,this.charNumber=t}}const t={inadmissibleSymbol:3,forbiddenCharacter:6,nameNotDescribed:104,breakOutOfLoop:105,identifierAlreadyUsed:106,variableNotDeclared:107,constantOrVariableNotDeclared:108,typesMismatch:109,typeNotDeclared:110,indexIsOutOfRange:111,identifierExpected:112,elementIsNotInitialized:113,notCallableElement:114,arrayExpected:115,recordPropertyIsNotDefined:116};class s{constructor(){this.errorCodeMapper=new Map([[1,"An error in primitive type"],[2,"Name expected"],[t.inadmissibleSymbol,"Inadmissible Symbol"],[t.forbiddenCharacter,"Forbidden character"],[t.nameNotDescribed,"Name is not described"],[t.breakOutOfLoop,"'break' is out of loop"],[t.identifierAlreadyUsed,"Identifier already used"],[t.variableNotDeclared,"Variable not declared"],[t.constantOrVariableNotDeclared,"Constant or variable not declared"],[t.typesMismatch,"Types mismatch"],[t.identifierExpected,"Identifier expected"],[t.indexIsOutOfRange,"Index is out of range"],[t.elementIsNotInitialized,"Element is not initialized"]])}getErrorTextByCode(e){return this.errorCodeMapper.has(e)?this.errorCodeMapper.get(e):null}}class n extends Error{constructor(e,t,s){super(t+` // line ${s.lineNumber} `+` column ${s.charNumber} `),this.errorCode=e,this.errorText=t,this.textPosition=s}}class i extends class{constructor(t,n){this.errorsDescription=new s,this.positionNow=new e,this.printer=t,this.reader=n,this.currentLine,this.currentLineErrors=[],this.lines=[],this.linePointer=0,this.currentLine,this.endOfFile=!1}setLines(e){this.lines=e.split(/\r?\n/),this.readNextLine()}getCurrentPosition(){return new e(this.positionNow.lineNumber,this.positionNow.charNumber)}nextCh(){return this.endOfFile&&this.positionNow.charNumber>=this.currentLine.length?null:(this.positionNow.charNumber===this.currentLine.length&&(this.currentLineErrors.length>0&&this.printer.listErrors(this.currentLineErrors),this.readNextLine(),this.currentLineErrors=[],this.positionNow.lineNumber++,this.positionNow.charNumber=0),this.currentLine[this.positionNow.charNumber++])}readNextLine(){var e=this.lines[this.linePointer++];this.currentLine=e.split(""),this.currentLine.push("\n"),this.endOfFile=this.linePointer===this.lines.length}addError(e,t=null,s=null){let i=this.errorsDescription.getErrorTextByCode(e)+(null===t?"":". "+t),r=null===s?this.getCurrentPosition():s;throw new n(e,i,r)}printListing(e=null){let t=e.textPosition.lineNumber;for(let e=0;e<=t;e++)this.printer.listLine(this.lines[e],e);this.printer.listError(e);for(let e=t+1;e<=this.lines.length-1;e++)this.printer.listLine(this.lines[e],e)}readWords(e){this.reader.readWords(e)}}{constructor(e,t,s=null){super(t,s),this.setLines(e)}}const r={star:21,slash:60,equal:16,comma:20,semicolon:14,colon:5,point:61,arrow:62,leftPar:9,rightPar:4,lBracket:11,rBracket:12,flPar:63,frPar:64,later:65,greater:66,laterEqual:67,greaterEqual:68,laterGreater:69,plus:70,minus:71,lComment:72,rComment:73,assign:51,twoPoints:74,at:75,ident:2,floatC:82,intC:15,charC:83,stringC:84,booleanC:85,caseSy:31,elseSy:32,fileSy:57,gotoSy:33,thenSy:52,untilSy:53,doSy:54,withSy:37,ifSy:56,ofSy:102,orSy:103,inSy:104,toSy:105,endSy:106,varSy:107,divSy:108,andSy:109,notSy:110,forSy:111,modSy:112,nilSy:113,setSy:114,typeSy:120,realSy:121,charSy:122,beginSy:123,whileSy:124,arraySy:125,constSy:126,labelSy:127,downtoSy:128,stringSy:129,packedSy:130,recordSy:131,repeatSy:132,integerSy:133,booleanSy:134,programSy:135,functionSy:136,procedureSy:137,breakSy:138,trueSy:139,falseSy:140,plusAssign:141,minusAssign:142,slashAssign:143,starAssign:144};class a{constructor(){this.keyWordsCodes=new Map([["if",r.ifSy],["do",r.doSy],["of",r.ofSy],["or",r.orSy],["in",r.inSy],["to",r.toSy],["end",r.endSy],["var",r.varSy],["div",r.divSy],["and",r.andSy],["not",r.notSy],["for",r.forSy],["mod",r.modSy],["nil",r.nilSy],["set",r.setSy],["then",r.thenSy],["else",r.elseSy],["case",r.caseSy],["file",r.fileSy],["goto",r.gotoSy],["type",r.typeSy],["with",r.withSy],["real",r.realSy],["char",r.charSy],["true",r.trueSy],["begin",r.beginSy],["break",r.breakSy],["while",r.whileSy],["array",r.arraySy],["const",r.constSy],["label",r.labelSy],["until",r.untilSy],["false",r.falseSy],["downto",r.downtoSy],["string",r.stringSy],["packed",r.packedSy],["record",r.recordSy],["repeat",r.repeatSy],["program",r.programSy],["integer",r.integerSy],["boolean",r.booleanSy],["function",r.functionSy],["procedure",r.procedureSy]])}getSymbolCodeByKeyWord(e){let t=e.toLowerCase();return this.keyWordsCodes.has(t)?this.keyWordsCodes.get(t):r.ident}}class l{constructor(e,t,s,n){this.textPosition=e,this.symbolCode=t,this.stringValue=s,this.value=n}}class o extends l{constructor(e,t,s){super(e,t,s,s)}}class h extends l{constructor(e,t,s){super(e,t,s,parseFloat(s))}}class c extends l{constructor(e,t,s){super(e,t,s,Number.parseInt(s))}}class u extends l{constructor(e,t,s){super(e,t,s,s.replace(/'/g,""))}}class y extends l{constructor(e,t,s){super(e,t,s,s.replace(/'/g,""))}}class d extends l{constructor(e,t,s){super(e,t,s,"true"===s.toLowerCase())}}class p{constructor(e){this.fileIO=e,this.errorsCodes=t,this.token=null,this.currentWord=null,this.char=" ",this.symbol=null,this.MAX_IDENT=64,this.keyWords=new a,this.wordBuffer=null}nextSym(){return null===this.char?null:(this.skipWhiteSpaces(),this.token=this.fileIO.getCurrentPosition(),this.scanSymbol())}scanSymbol(){if(null===this.char)return null;if(null===this.wordBuffer?this.currentWord="":(this.currentWord=this.wordBuffer,this.wordBuffer=null),null!==/[a-z]/i.exec(this.char)){for(;null!==/\w/i.exec(this.char);)this.currentWord+=this.char,this.char=this.fileIO.nextCh();return this.getSymbol(this.keyWords.getSymbolCodeByKeyWord(this.currentWord))}if(null!==/[\d.]/.exec(this.char)){if(this.currentWord+=this.char,this.char=this.fileIO.nextCh(),".."===this.currentWord)return this.symbol=r.twoPoints,this.getSymbol(this.symbol);if("."===this.currentWord&&"."===this.char)return this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(r.twoPoints);if("."===this.currentWord&&null===/\d/.exec(this.char))return this.symbol=r.point,this.getSymbol(this.symbol);{let e="."===this.currentWord,t=null;for(;null!==/[\d.]/.exec(this.char);){if("."===this.char){if(e){if("."===t)return this.wordBuffer=".",new c(this.token,r.intC,this.currentWord);break}e=!0}t=this.char,this.currentWord+=this.char,this.char=this.fileIO.nextCh()}return e?new h(this.token,r.floatC,this.currentWord):new c(this.token,r.intC,this.currentWord)}}switch(this.currentWord+=this.char,this.char){case":":return this.char=this.fileIO.nextCh(),"="===this.char?(this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(r.assign)):this.getSymbol(r.colon);case"<":switch(this.char=this.fileIO.nextCh(),this.char){case"=":return this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(r.laterEqual);case">":return this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(r.laterGreater);default:return this.getSymbol(r.later)}case">":return this.char=this.fileIO.nextCh(),"="===this.char?(this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(r.greaterEqual)):this.getSymbol(r.greater);case"-":return this.char=this.fileIO.nextCh(),"="===this.char?(this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(r.minusAssign)):this.getSymbol(r.minus);case"+":return this.char=this.fileIO.nextCh(),"="===this.char?(this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(r.plusAssign)):this.getSymbol(r.plus);case"*":return this.char=this.fileIO.nextCh(),"="===this.char?(this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(r.starAssign)):this.getSymbol(r.star);case"/":if(this.char=this.fileIO.nextCh(),"="===this.char)return this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(r.slashAssign);{let e=null;if("/"===this.char){do{e=this.fileIO.nextCh()}while("\n"!==e);return this.char=this.fileIO.nextCh(),this.skipWhiteSpaces(),this.scanSymbol()}return this.getSymbol(r.slash)}case"=":return this.char=this.fileIO.nextCh(),this.getSymbol(r.equal);case",":return this.char=this.fileIO.nextCh(),this.getSymbol(r.comma);case";":return this.char=this.fileIO.nextCh(),this.getSymbol(r.semicolon);case"^":return this.char=this.fileIO.nextCh(),this.getSymbol(r.arrow);case"(":this.char=this.fileIO.nextCh();var e=null,t=this.currentWord;if("*"===this.char){do{e=t,t=this.fileIO.nextCh()}while("*"!==e||")"!==t);return this.char=this.fileIO.nextCh(),this.skipWhiteSpaces(),this.scanSymbol()}return this.getSymbol(r.leftPar);case")":return this.char=this.fileIO.nextCh(),this.getSymbol(r.rightPar);case"[":return this.char=this.fileIO.nextCh(),this.getSymbol(r.lBracket);case"]":return this.char=this.fileIO.nextCh(),this.getSymbol(r.rBracket);case"{":let s=null;do{s=this.fileIO.nextCh()}while("}"!==s);return this.char=this.fileIO.nextCh(),this.skipWhiteSpaces(),this.scanSymbol();case"}":return this.char=this.fileIO.nextCh(),this.getSymbol(r.frPar);case"<":return this.char=this.fileIO.nextCh(),this.getSymbol(r.later);case">":return this.char=this.fileIO.nextCh(),this.getSymbol(r.greater);case"@":return this.char=this.fileIO.nextCh(),this.getSymbol(r.at);case"'":do{this.char=this.fileIO.nextCh(),this.currentWord+=this.char}while("'"!==this.char);return this.char=this.fileIO.nextCh(),3===this.currentWord.length?new u(this.token,r.charC,this.currentWord):new y(this.token,r.stringC,this.currentWord)}return this.addForbiddenCharacterError(this.char),this.char=this.fileIO.nextCh(),null}getSymbol(e){return e===r.trueSy||e===r.falseSy?new d(this.token,r.booleanC,this.currentWord):new o(this.token,e,this.currentWord)}skipWhiteSpaces(){for(var e=/\s/;null!==e.exec(this.char);)this.char=this.fileIO.nextCh()}addForbiddenCharacterError(e){this.fileIO.addError(this.errorsCodes.forbiddenCharacter,` '${e}'`,this.token)}}class m{constructor(){this.symbolCodeMapper=new Map([[r.star,"*"],[r.slash,"/"],[r.equal,"="],[r.comma,","],[r.semicolon,";"],[r.colon,":"],[r.point,"."],[r.arrow,"^"],[r.leftPar,"("],[r.rightPar,")"],[r.lBracket,"["],[r.rBracket,"]"],[r.flPar,"{"],[r.frPar,"}"],[r.later,"<"],[r.greater,">"],[r.laterEqual,"<="],[r.greaterEqual,">="],[r.laterGreater,"<>"],[r.plus,"+ "],[r.minus,"- "],[r.lComment,"(*"],[r.rComment,"*)"],[r.assign,":="],[r.twoPoints,".."],[r.ident,"Identifier"],[r.floatC,"Float Constant"],[r.intC,"Integer Constant"],[r.charC,"Character Constant"],[r.caseSy,"case"],[r.elseSy,"else"],[r.fileSy,"file"],[r.gotoSy,"goto"],[r.thenSy,"then"],[r.untilSy,"until"],[r.doSy,"do"],[r.withSy,"with"],[r.ifSy,"if"],[r.ofSy,"of"],[r.orSy,"or"],[r.inSy,"in"],[r.toSy,"to"],[r.endSy,"end"],[r.varSy,"var"],[r.divSy,"div"],[r.andSy,"and"],[r.notSy,"not"],[r.forSy,"for"],[r.modSy,"mod"],[r.nilSy,"nil"],[r.setSy,"set"],[r.typeSy,"type"],[r.realSy,"real"],[r.charSy,"char"],[r.beginSy,"begin"],[r.whileSy,"while"],[r.arraySy,"array"],[r.constSy,"const"],[r.labelSy,"label"],[r.downtoSy,"downto"],[r.stringSy,"string"],[r.packedSy,"packed"],[r.recordSy,"record"],[r.repeatSy,"repeat"],[r.integerSy,"integer"],[r.programSy,"program"],[r.functionSy,"function"],[r.procedureSy,"procedure"]])}getSymbolTextByCode(e){return this.symbolCodeMapper.has(e)?this.symbolCodeMapper.get(e):null}}class f{constructor(e){this.symbol=e}}class b extends f{constructor(e,t,s){super(e),this.destination=t,this.sourceExpression=s}}class g extends f{constructor(e,t,s){super(e),this.identifier=t,this.indexRing=s}}class w extends f{constructor(e,t,s=null){super(e),this.indexExpression=t,this.indexRing=s,this.evaluatedIndexExpression=null}appendIndexRing(e){null===this.indexRing?this.indexRing=e:this.indexRing.appendIndexRing(e)}}class S extends f{constructor(e,t){super(e),this.pointer=t}}class x extends f{constructor(e,t){super(e),this.identifier=t}}class C extends f{constructor(e,t,s){super(e),this.baseExpression=t,this.subField=s}}class v extends f{constructor(e,t,s){super(e),this.left=t,this.right=s}}class I extends v{constructor(e,t,s){super(e,t,s)}}class E extends v{constructor(e,t,s){super(e,t,s)}}class T extends v{constructor(e,t,s){super(e,t,s)}}class k extends v{constructor(e,t,s){super(e,t,s)}}class O extends f{constructor(e,t){super(e),this.typeId=t}}class L extends O{constructor(e,t){super(e,t)}toString(){switch(this.typeId){case 6:return"boolean";case 2:return"char";case 0:return"integer";case 1:return"real";case 7:return"string"}}}class V extends L{constructor(e=null){super(e,6)}}class P extends L{constructor(e=null){super(e,2)}}class N extends L{constructor(e,t){super(e,t)}}class A extends N{constructor(e=null){super(e,0)}}class B extends N{constructor(e=null){super(e,1)}}class R extends L{constructor(e=null){super(e,7)}}class M extends f{constructor(e){switch(super(e),e.symbolCode){case r.intC:this.type=new A(null),this.typeId=0;break;case r.floatC:this.type=new B(null),this.typeId=1;break;case r.charC:this.type=new P(null),this.typeId=2;break;case r.stringC:this.type=new R(null),this.typeId=7;break;case r.booleanC:this.type=new V(null),this.typeId=6;break;case r.ident:this.typeId=5}}}class D extends f{constructor(e){super(e)}}class W extends f{constructor(e,t,s=[]){super(e),this.identifierBranch=t,this.parameters=s}}class $ extends O{constructor(e,t){super(e,4);let s=this;this.typesList={},t.forEach((e=>{let t=e.type;e.identifiers.forEach((e=>{let n=e.symbol.value;s.typesList[n]=t}))}))}toString(){let e=[],t=null;for(t in this.typesList)e.push(`${t}: `+this.typesList[t].toString());return`record(${e.join(", ")})`}}class F extends O{constructor(e){super(e,9)}toString(){return this.symbol.stringValue}}class q extends f{constructor(e,t,s,n){super(e),this.identifiers=t,this.variablesType=s,this.initialValue=n}}class j extends f{constructor(e,t,s,n=null){super(e),this.identifier=t,this.value=s,this.type=n}}class z extends f{constructor(e,t,s){super(e),this.identifier=t,this.type=s}}class U extends f{constructor(e){super(e),this.sentences=[]}}class G extends f{constructor(e,t,s,n){super(e),this.condition=t,this.left=s,this.right=n}}class _ extends v{constructor(e,t,s){super(e,t,s)}}class K extends v{constructor(e,t,s){super(e,t,s)}}class X extends v{constructor(e,t,s){super(e,t,s)}}class H extends v{constructor(e,t,s){super(e,t,s)}}class J extends f{constructor(e,t){super(e),this.value=t}}class Q extends f{constructor(e,t){super(e),this.value=t}}class Y extends O{constructor(e,t=null,s=null){super(e,11),this.returnType=s,this.signature=t}toString(){let e=[];return this.signature.length>0&&this.signature.forEach((function(t,s){let n=t.identifiers.map((e=>e.symbol.stringValue)).join(", ");e[s]=n+": "+t.type.toString()})),`function(${e.join("; ")}): ${this.returnType.toString()}`}}class Z{constructor(e=!1){this.byReference=e}}class ee{constructor(e=null){this.parentFunctionsStore=e,this.items={}}addFunction(e,t){let s=e.toLowerCase();if(this.items.hasOwnProperty(s))if(Array.isArray(this.items[s]))this.items[s].push(t);else{let e=this.items[s];this.items[s]=[e,t]}else this.items[s]=t}getFunction(e,t,s=null,n=null){let i=[];if(null===s&&n instanceof Y){let e=n.signature;n=n.returnType,s=[];for(let t=0;t<e.length;t++)for(let n=0;n<e[t].identifiers.length;n++)s[t+n]=e[t].type,i[t+n]=e[t].byReference}let r=e.toLowerCase(),a=null;if(!this.items.hasOwnProperty(r))return this.parentFunctionsStore?this.parentFunctionsStore.getFunction(e,t,s):null;if(a=this.items[r],!a||Array.isArray(a)||a.type.signature instanceof Z||null===s||(a=[a]),Array.isArray(a)){let r=a.filter((e=>{let r=e.type.signature,a=e.type.returnType;if(r.map((e=>e.identifiers.length)).reduce(((e,t)=>e+t),0)!==(null===s?0:s.length))return!1;let l=[],o=[];for(let e=0;e<r.length;e++)for(let t=0;t<r[e].identifiers.length;t++)l[e+t]=r[e].type,o[e+t]=r[e].byReference;if(null!==a&&null!==n&&!t.checkType(a,n))return!1;for(let e=0;e<l.length;e++)if(!t.checkType(l[e],s[e])||o.length>0&&i.length>0&&o[e]!==i[e])return!1;return!0}));return r.length>0?r[0]:this.parentFunctionStore?this.parentFunctionsStore.getFunction(e,t,s):null}return a}}class te extends f{constructor(e,t=null){super(e),this.name=null,this.vars=[],this.functionsStore=new ee(t instanceof te?t.functionsStore:null),this.sentences=[],this.types=[],this.constants=[],this.parentFunction=t}getType(){return this.type}}class se extends te{constructor(e){super(e)}}class ne extends te{constructor(e,t=null,s=null){super(e,s),this.type=t}}class ie extends te{constructor(e,t=null,s=null){super(e,s),this.type=t}}class re extends v{constructor(e,t,s){super(e,t,s)}}class ae extends v{constructor(e,t,s){super(e,t,s)}}class le extends v{constructor(e,t,s){super(e,t,s)}}class oe extends v{constructor(e,t,s){super(e,t,s)}}class he extends v{constructor(e,t,s){super(e,t,s)}}class ce extends v{constructor(e,t,s){super(e,t,s)}}class ue extends v{constructor(e,t,s){super(e,t,s)}}class ye extends O{constructor(e,t,s){super(e,10),this.identifiers=s,this.signature=t}toString(){let e=[];return this.signature.length>0&&this.signature.forEach((function(t,s){let n=t.identifiers.map((e=>e.symbol.stringValue)).join(", ");e[s]=n+": "+t.type.toString()})),`procedure(${e.join("; ")})`}}class de extends f{constructor(e,t=!1,s=null,n=[]){super(e),this.byReference=t,this.type=s,this.identifiers=n}}class pe extends O{constructor(e){super(e,5),this.items=[]}toString(){return`enum(${this.items.map((e=>e.symbol.stringValue)).join(", ")})`}}class me extends O{constructor(e,t=null,s=null,n=null){super(e,3),this.typeOfElements=n,this.leftIndex=t,this.rightIndex=s}toString(){return`array [${this.leftIndex.symbol.value}..${this.rightIndex.symbol.value}] of ${this.typeOfElements}`}}class fe extends O{constructor(e,t){super(e,8),this.type=t}toString(){return`^${this.type}`}}class be extends f{constructor(e,t,s){super(e),this.condition=t,this.body=s}}class ge extends f{constructor(e,t,s){super(e),this.condition=t,this.body=s}}class we extends f{constructor(e,t=null,s=[],n=null){super(e),this.switchExpression=t,this.cases=s,this.elseSentence=n}}class Se extends f{constructor(e,t=[],s=null){super(e),this.constants=t,this.operator=s}}class xe extends f{constructor(e,t,s,n,i,r){super(e),this.variableIdentifier=t,this.initExpression=s,this.lastExpression=n,this.countDown=i,this.body=r}}class Ce extends f{constructor(e){super(e)}}class ve{constructor(e){this.lexicalAnalyzer=e,this.symbolsDescription=new m,this.symbol=null,this.tree=null,this.trees=[],this.treesCounter=0,this.errorDetected=!1}nextSym(){this.symbol=this.lexicalAnalyzer.nextSym()}anotherSymbolExpected(e){let s=`'${this.symbolsDescription.getSymbolTextByCode(e)}' expected but '${this.symbol.stringValue}' found.`;this.lexicalAnalyzer.fileIO.addError(t.inadmissibleSymbol,s,this.symbol.textPosition)}accept(e){if(null===this.symbol)return null;this.symbol.symbolCode===e?this.nextSym():(this.errorDetected=!0,this.anotherSymbolExpected(e),this.goToEnd())}analyze(){return this.tree=new se(this.symbol),this.trees[this.treesCounter]=this.tree,this.nextSym(),this.scanProgramme(),this.tree}scanProgramme(){this.symbol.symbolCode===r.programSy&&(this.nextSym(),this.tree.name=this.symbol.stringValue,this.accept(r.ident),this.accept(r.semicolon)),this.scanBlock(),this.accept(r.point)}scanBlock(){for(;this.symbol.symbolCode!==r.beginSy;)switch(this.symbol.symbolCode){case r.constSy:this.constPart();break;case r.typeSy:this.typePart();break;case r.varSy:this.varPart();break;case r.procedureSy:this.scanProcedure();break;case r.functionSy:this.scanFunction();break;default:let e=`Symbol 'begin' expecsted but '${this.symbol.stringValue}' found.`;this.addError(t.inadmissibleSymbol,e,this.symbol)}this.statementPart()}constPart(){if(this.symbol.symbolCode===r.constSy){this.nextSym();do{let e=this.symbol;this.accept(r.ident);let t=null;this.symbol.symbolCode===r.colon&&(this.nextSym(),t=this.scanType());let s=this.symbol;this.accept(r.equal);let n=this.scanConstant(),i=new j(s,new D(e),n,t);this.tree.constants.push(i),this.accept(r.semicolon)}while(this.symbol.symbolCode===r.ident)}}typePart(){if(this.symbol.symbolCode===r.typeSy){this.nextSym();do{let e=this.symbol;this.accept(r.ident);let t=this.symbol;this.accept(r.equal);let s=this.scanType(),n=new z(t,new D(e),s);this.tree.types.push(n),this.accept(r.semicolon)}while(this.symbol.symbolCode===r.ident)}}varPart(){if(this.symbol.symbolCode===r.varSy){this.nextSym();do{this.tree.vars.push(this.scanVarDeclaration()),this.accept(r.semicolon)}while(!this.errorDetected&&this.symbol.symbolCode===r.ident)}}scanVarDeclaration(){let e=[],t=null,s=!1;do{t=new D(this.symbol),this.accept(r.ident),e.push(t),s=this.symbol.symbolCode===r.comma,s&&this.nextSym()}while(!this.errorDetected&&s);let n=this.symbol;this.accept(r.colon);let i=this.scanType(),a=null;return this.symbol.symbolCode===r.equal&&(this.nextSym(),a=this.scanConstant()),new q(n,e,i,a)}scanListArrayType(e){let t=null,s=this.scanConstant();this.accept(r.twoPoints);let n=this.scanConstant();return this.symbol.symbolCode===r.comma?(e=this.symbol,this.nextSym(),t=this.scanListArrayType()):(this.accept(r.rBracket),this.accept(r.ofSy),t=this.scanType()),new me(e,s,n,t)}scanType(){let e=null;if(this.symbol.symbolCode===r.arrow){e=this.symbol,this.nextSym();let t=this.scanType();return new fe(e,t)}if(this.symbol.symbolCode===r.integerSy||this.symbol.symbolCode===r.booleanSy||this.symbol.symbolCode===r.realSy||this.symbol.symbolCode===r.stringSy||this.symbol.symbolCode===r.charSy){e=this.symbol,this.nextSym();let t=null;switch(e.symbolCode){case r.charSy:t=2;break;case r.integerSy:t=0;break;case r.stringSy:t=7;break;case r.realSy:t=1;break;case r.booleanSy:t=6}return new L(e,t)}if(this.symbol.symbolCode===r.ident)return e=this.symbol,this.nextSym(),new F(e);if(this.symbol.symbolCode===r.arraySy)return e=this.symbol,this.nextSym(),this.accept(r.lBracket),this.scanListArrayType(e);if(this.symbol.symbolCode===r.leftPar){let e=new pe(this.symbol),t=null;do{this.nextSym(),t=new D(this.symbol),e.items.push(t),this.accept(r.ident)}while(this.symbol.symbolCode===r.comma);return this.accept(r.rightPar),e}if(this.symbol.symbolCode===r.functionSy){let e=new Y(this.symbol);return this.nextSym(),e.signature=this.scanParametersList(),this.accept(r.colon),e.returnType=this.scanType(),e}if(this.symbol.symbolCode===r.procedureSy){let e=new ye(this.symbol);return this.nextSym(),e.signature=this.scanParametersList(),e}if(this.symbol.symbolCode===r.recordSy){let e=this.symbol;this.nextSym();let t=[];do{if(t.length>0&&(this.symbol.symbolCode===r.semicolon&&this.nextSym(),this.symbol.symbolCode===r.endSy))break;let e=new de(this.symbol),s=[];do{s.length>0&&this.symbol.symbolCode===r.comma&&this.nextSym(),s.push(new D(this.symbol)),this.accept(r.ident)}while(this.symbol.symbolCode===r.comma);this.accept(r.colon),e.identifiers=s,e.type=this.scanType(),t.push(e)}while(this.symbol.symbolCode===r.semicolon);return this.accept(r.endSy),new $(e,t)}}scanProcedure(){let e=this.symbol;this.accept(r.procedureSy);let t=new D(this.symbol);this.accept(r.ident);let s=new ye(e);s.signature=this.scanParametersList();let n=this.tree;this.treesCounter++,this.tree=new ne(e,s,n),this.trees[this.treesCounter]=this.tree,this.tree.name=t;let i=this.tree.name.symbol.value.toLowerCase();this.tree.signature=this.scanParametersList(),this.accept(r.semicolon),this.scanBlock(),this.accept(r.semicolon),this.trees[this.treesCounter-1].functionsStore.addFunction(i,this.tree),this.treesCounter--,this.tree=this.trees[this.treesCounter]}scanFunction(){let e=this.symbol;this.accept(r.functionSy);let t=new D(this.symbol);this.accept(r.ident);let s=new Y(e);s.signature=this.scanParametersList(),this.accept(r.colon),s.returnType=this.scanType();let n=this.tree;this.treesCounter++,this.tree=new ie(e,s,n),this.trees[this.treesCounter]=this.tree,this.tree.name=t;let i=this.tree.name.symbol.value.toLowerCase();this.accept(r.semicolon),this.scanBlock(),this.accept(r.semicolon),this.trees[this.treesCounter-1].functionsStore.addFunction(i,this.tree),this.treesCounter--,this.tree=this.trees[this.treesCounter]}scanParametersList(){let e=[];if(this.symbol.symbolCode===r.leftPar){if(this.nextSym(),this.symbol.symbolCode!==r.rightPar)do{e.length>0&&this.symbol.symbolCode===r.semicolon&&this.nextSym();let t=!1;this.symbol.symbolCode===r.varSy&&(t=!0,this.nextSym());let s=new de(this.symbol,t),n=[];do{n.length>0&&this.symbol.symbolCode===r.comma&&this.nextSym(),n.push(new D(this.symbol)),this.accept(r.ident)}while(this.symbol.symbolCode===r.comma);this.accept(r.colon),s.identifiers=n,s.type=this.scanType(),e.push(s)}while(this.symbol.symbolCode===r.semicolon);this.accept(r.rightPar)}return e}statementPart(){for(this.accept(r.beginSy);null!==this.symbol&&this.symbol.symbolCode!==r.endSy;){let e=this.scanSentence();this.tree.sentences.push(e),this.symbol.symbolCode!==r.endSy&&this.accept(r.semicolon)}this.accept(r.endSy)}goToEnd(){do{this.nextSym()}while(null!==this.symbol)}scanSentence(){if(this.symbol.symbolCode===r.ident){let e=this.scanIdentifierBranch();if(this.symbol.symbolCode===r.assign||this.symbol.symbolCode===r.plusAssign||this.symbol.symbolCode===r.minusAssign||this.symbol.symbolCode===r.starAssign||this.symbol.symbolCode===r.slashAssign){let t=this.symbol;return this.nextSym(),new b(t,e,this.scanExpression())}return e}if(this.symbol.symbolCode===r.beginSy)return this.scanCompoundOperator();if(this.symbol.symbolCode===r.ifSy){let e=this.symbol;this.nextSym();let t=this.scanExpression();this.accept(r.thenSy);let s=this.scanSentence(),n=null;return this.symbol.symbolCode===r.elseSy&&(this.nextSym(),n=this.scanSentence()),new G(e,t,s,n)}if(this.symbol.symbolCode===r.whileSy){let e=this.symbol;this.nextSym();let t=this.scanExpression();this.accept(r.doSy);let s=this.scanSentence();return new be(e,t,s)}if(this.symbol.symbolCode===r.repeatSy){let e=this.symbol,t=new U(e);for(this.nextSym();null!==this.symbol&&this.symbol.symbolCode!==r.untilSy;){let e=this.scanSentence();t.sentences.push(e),this.symbol.symbolCode!==r.untilSy&&this.accept(r.semicolon)}this.accept(r.untilSy);let s=t,n=this.scanExpression();return new ge(e,n,s)}if(this.symbol.symbolCode===r.forSy){let e=this.symbol;this.nextSym();let s=this.symbol;this.accept(r.ident);let n=new D(s);this.symbol,this.accept(r.assign);let i=this.scanSimpleExpression(),a=!1;switch(this.symbol.symbolCode){case r.downtoSy:a=!0;break;case r.toSy:a=!1;break;default:let e=`Symbols 'to' or 'downto' expected but '${this.symbol.stringValue}' found.`;this.addError(t.inadmissibleSymbol,e,this.symbol)}this.nextSym();let l=this.scanSimpleExpression();this.accept(r.doSy);let o=this.scanSentence();return new xe(e,n,i,l,a,o)}if(this.symbol.symbolCode===r.breakSy){let e=this.symbol;return this.nextSym(),new Ce(e)}if(this.symbol.symbolCode===r.caseSy){let e=this.symbol;this.nextSym();let t=this.scanExpression();this.accept(r.ofSy);let s=new we(e,t);do{let e=new Se(this.symbol),t=null;do{e.constants.push(this.scanConstant()),t=this.symbol.symbolCode===r.comma,t&&this.nextSym()}while(t);this.accept(r.colon),e.operator=this.scanSentence(),s.cases.push(e),this.symbol.symbolCode!==r.endSy&&this.symbol.symbolCode!==r.elseSy?this.accept(r.semicolon):this.symbol.symbolCode===r.semicolon&&this.nextSym()}while(this.symbol.symbolCode!==r.endSy&&this.symbol.symbolCode!==r.elseSy);return this.symbol.symbolCode===r.elseSy&&(this.nextSym(),s.elseSentence=this.scanSentence(),this.symbol.symbolCode===r.semicolon&&this.accept(r.semicolon)),this.accept(r.endSy),s}}scanCompoundOperator(){let e=new U(this.symbol);for(this.accept(r.beginSy);null!==this.symbol&&this.symbol.symbolCode!==r.endSy;){let t=this.scanSentence();e.sentences.push(t),this.symbol.symbolCode!==r.endSy&&this.accept(r.semicolon)}return this.accept(r.endSy),e}scanIndicesBrackets(e){this.accept(r.lBracket);let t=new w(e,this.scanExpression());for(;this.symbol.symbolCode===r.comma;){let e=this.symbol;this.nextSym();let s=new w(e,this.scanExpression());t.appendIndexRing(s)}return this.accept(r.rBracket),t}scanIndices(e){this.symbol;let t=this.scanIndicesBrackets(this.symbol);for(;this.symbol.symbolCode===r.lBracket;){let e=this.symbol,s=this.scanIndicesBrackets(e);t.appendIndexRing(s)}return t}scanIdentifierBranch(e=null){let t=null;if(null===e){let e=this.symbol;this.nextSym(),t=new D(e)}else t=e;switch(this.symbol.symbolCode){case r.leftPar:let e=this.symbol;this.nextSym();let s=this.scanParameters();return this.scanIdentifierBranch(new W(e,t,s));case r.lBracket:let n=this.symbol;return this.scanIdentifierBranch(new g(n,t,this.scanIndices()));case r.point:let i=this.symbol;this.nextSym();let a=new D(this.symbol);return this.accept(r.ident),this.scanIdentifierBranch(new C(i,t,a));case r.arrow:let l=this.symbol;return this.nextSym(),this.scanIdentifierBranch(new S(l,t));default:return t}}scanExpression(){if(this.symbol.symbolCode===r.at){let e=this.symbol;this.nextSym();let t=this.symbol;this.accept(r.ident);let s=new D(t),n=this.scanIdentifierBranch(s);return new x(e,n)}let e=this.scanSimpleExpression();switch(this.symbol.symbolCode){case r.equal:return this.nextSym(),new ae(this.symbol,e,this.scanSimpleExpression());case r.later:return this.nextSym(),new oe(this.symbol,e,this.scanSimpleExpression());case r.greater:return this.nextSym(),new he(this.symbol,e,this.scanSimpleExpression());case r.laterGreater:return this.nextSym(),new le(this.symbol,e,this.scanSimpleExpression());case r.laterEqual:return this.nextSym(),new ue(this.symbol,e,this.scanSimpleExpression());case r.greaterEqual:return this.nextSym(),new ce(this.symbol,e,this.scanSimpleExpression());case r.inSy:return this.nextSym(),new re(this.symbol,e,this.scanSimpleExpression());default:return e}}scanSimpleExpression(){let e=!1,t=!1,s=null,n=null;switch(this.symbol.symbolCode){case r.minus:e=!0;case r.plus:n=this.symbol,this.nextSym();break;case r.notSy:t=!0,n=this.symbol,this.nextSym()}for(s=this.scanTerm(),e&&(s=new J(n,s)),t&&(s=new Q(n,s));null!==this.symbol&&(this.symbol.symbolCode===r.plus||this.symbol.symbolCode===r.minus||this.symbol.symbolCode===r.orSy);)switch(this.symbol.symbolCode){case r.plus:this.nextSym(),s=new T(this.symbol,s,this.scanTerm());break;case r.minus:this.nextSym(),s=new k(this.symbol,s,this.scanTerm());break;case r.orSy:this.nextSym(),s=new H(this.symbol,s,this.scanTerm())}return s}scanTerm(){let e=this.scanMultiplier(),t=null;for(;[r.star,r.slash,r.divSy,r.modSy,r.andSy].includes(this.symbol.symbolCode);)switch(t=this.symbol.symbolCode,this.nextSym(),t){case r.star:e=new I(this.symbol,e,this.scanMultiplier());break;case r.slash:e=new E(this.symbol,e,this.scanMultiplier());break;case r.divSy:e=new _(this.symbol,e,this.scanMultiplier());break;case r.modSy:e=new K(this.symbol,e,this.scanMultiplier());break;case r.andSy:e=new X(this.symbol,e,this.scanMultiplier())}return e}scanMultiplier(){if(this.symbol.symbolCode===r.ident)return this.scanIdentifierBranch();if(this.symbol.symbolCode===r.floatC||this.symbol.symbolCode===r.intC||this.symbol.symbolCode===r.stringC||this.symbol.symbolCode===r.charC||this.symbol.symbolCode===r.booleanC)return this.scanUnsignedConstant();if(this.symbol.symbolCode===r.leftPar){this.nextSym();let e=this.scanExpression();return this.accept(r.rightPar),e}}scanParameters(){let e=[];if(this.symbol.symbolCode!==r.rightPar)do{e.length>0&&this.symbol.symbolCode===r.comma&&this.nextSym(),e.push(this.scanExpression())}while(this.symbol.symbolCode===r.comma);return this.accept(r.rightPar),e}scanUnsignedConstant(){let e=null;switch(this.symbol.symbolCode){case r.floatC:case r.intC:case r.charC:case r.stringC:case r.booleanC:e=new M(this.symbol),this.nextSym()}return e}scanConstant(){let e=!1,t=null;switch(this.symbol.symbolCode){case r.minus:t=this.symbol,this.nextSym(),e=!0;break;case r.plus:t=this.symbol,this.nextSym()}let s=null;switch(this.symbol.symbolCode){case r.floatC:case r.intC:case r.charC:case r.stringC:case r.booleanC:case r.ident:s=new M(this.symbol),this.nextSym()}return e&&(s=new J(t,s)),s}addError(e,t=null,s){this.lexicalAnalyzer.fileIO.addError(e,t,s.textPosition)}}class Ie{constructor(){this.type=null,this.typeId=null}getType(){return this.type?this.type:this.typeId}}class Ee extends Ie{constructor(e,t){if(super(),this.value=e,this.typeId=t,t instanceof L)this.type=t;else switch(t){case 6:this.type=new V(null);break;case 2:this.type=new P(null);break;case 0:this.type=new A(null);break;case 1:this.type=new B(null);break;case 7:this.type=new R(null)}}clone(){return new Ee(this.value,this.typeId)}}class Te extends Ie{constructor(e,t=null){super(),this.typeId=12,this.variableType=e,this.valueType=t,this.type=e}clone(){return new Te(this.valueType,this.type.type)}}class ke extends Ie{constructor(e,t){super(),this.value=e,this.typeId=5,this.type=t}getIndex(){let e=this.type.items.length;for(let t=0;t<e;t++)if(this.type.items[t].symbol.stringValue.toLowerCase()===this.value.symbol.stringValue.toLowerCase())return t}clone(){return new ke(this.value,this.type)}}class Oe extends Ie{constructor(e,t){super(),this.typeId=3,this.type=e,this.scope=t,this.items=[],this.leftIntegerIndex=0,this.rightIntegerIndex=null,this.offset=null,this.arrayLength=null}setValue(e,s,n){let i=e.evaluatedIndexExpression,r=this.scope.getIntegerValueOfIndexVariable(i)+this.offset;r<0||r>=this.arrayLength?this.scope.addError(t.indexIsOutOfRange,"",e):void 0===this.items[r]&&(this.items[r]=this.scope.createVariable(this.type.typeOfElements,n));let a=this.items[r];null===e.indexRing?a.value=n.value:e.indexRing instanceof w&&a.setValue(e.indexRing,s,n)}getByIndexRing(e){let s=e.evaluatedIndexExpression,n=this.scope.getIntegerValueOfIndexVariable(s)+this.offset;if(!(n<0||n>=this.arrayLength)){void 0===this.items[n]&&(this.items[n]=this.scope.createDefaultVariable(this.type.typeOfElements));let t=this.items[n];return e.indexRing instanceof w?t.getByIndexRing(e.indexRing):t}this.scope.addError(t.indexIsOutOfRange,"",e)}clone(){let e=new Oe(this.type,this.scope);return e.rightIntegerIndex=this.rightIntegerIndex,e.offset=this.offset,e.arrayLength=this.arrayLength,e.parentArray=this.parentArray,this.items.forEach(((t,s)=>{e.items[s]=t.clone()})),e}}class Le extends Ie{constructor(e,t){super(),this.typeId=8,this.type=new fe(null,t),this.variable=e}clone(){return new Le(this.variable,this.type)}}class Ve extends Ie{constructor(e,t){super(),this.typeId=4,this.type=e,this.items={},this.scope=t}setPropertyByPropertyIdentifier(e,s){let n=e.symbol.value;this.type.typesList.hasOwnProperty(n)?this.items[n]=s:this.scope.addError(t.indexIsOutOfRange,`Property ${n} is not defined.`,e)}getByPropertyIdentifier(e){let s=e.symbol.value;if(this.type.typesList.hasOwnProperty(s)){if(!this.items.hasOwnProperty(s)){let e=this.type.typesList[s];this.items[s]=this.scope.createDefaultVariable(e)}return this.items[s]}this.scope.addError(t.indexIsOutOfRange,`Property ${s} is not defined.`,e)}clone(){let e=new Ve(this.type,this.scope),t=null;for(t in this.items)e.items[t]=this.items[t].clone(this.scope);return e}}class Pe extends Ie{constructor(e,t=null){super(),this.type=e,this.typeId=e.typeId,this.value=t}clone(){return new Pe(this.type,this.value)}}class Ne extends te{constructor(e=null){super(e),this.vars=[],this.signature=[],this.sentences=[],this.name=null}async innerRun(){}}class Ae extends Ne{constructor(e=null){super(),this.name=e}}class Be extends f{constructor(e=null,t=null){super(e),this.typeId=t}}class Re{constructor(e=null){this.type=e}}class Me extends Be{constructor(e=null){super(null,null)}}class De extends Be{constructor(){super(null,null)}}class We{constructor(e=null){this.parentScope=e,this.items={},this.constants={},this.enumsItems={},this.types={},this.cycleDepth=0,this.errorsDescription=new s,this.parametersList=null,this.callableName=null}addVariable(e,s,n=null,i=null,r=!1){let a=(e instanceof D?e.symbol.value:e).toLowerCase();if(this.constants.hasOwnProperty(a))this.addError(t.identifierAlreadyUsed,`Constant '${a}' declared.`,null===i?s:i);else if(this.items.hasOwnProperty(a))this.addError(t.identifierAlreadyUsed,`Variable '${a}' already declared.`,null===i?s:i);else{let e=this.createVariable(s,n);this.items[a]=e,r&&(this.items.result=e)}}createVariable(e,t=null){let s=this.resolveNamedType(e);if(s instanceof L){if(null===t)switch(s.typeId){case 0:case 1:t=0;break;case 2:t=String.fromCharCode(0);break;case 7:t=""}return new Ee(t,s.typeId)}if(s instanceof pe)return null===t&&(t=s.items[0]),new ke(t,s);if(s instanceof me)return this.createArrayVariable(t,e);if(s instanceof fe){let s=this.resolveNamedType(e.type);return new Le(t,s)}return s instanceof Y||s instanceof ye||s instanceof $?this.createDefaultVariable(s):s instanceof Re?new Te(s.type,t):void 0}getIntegerValueOfIndexConstant(e){if(e instanceof M)switch(e.typeId){case 0:return e.symbol.value;case 2:return e.symbol.value.charCodeAt(0);case 5:return this.getEnumElement(e).getIndex()}else if(e instanceof J){let s=e.value;if(s instanceof M&&0===s.typeId)return-s.symbol.value;this.addError(t.typesMismatch,"Integer constant expected after unary minus.",s)}}getIntegerValueOfIndexVariable(e){switch(e.typeId){case 0:return e.value;case 2:return e.value.charCodeAt(0);case 5:return this.getEnumElement(e.value).getIndex()}}createArrayVariable(e,t){let s=this.resolveNamedType(t),n=new Oe(s,this);n.parentArray=e;let i=s.leftIndex,r=s.rightIndex,a=this.getIntegerValueOfIndexConstant(i),l=this.getIntegerValueOfIndexConstant(r),o=Math.min(a,l),h=Math.max(a,l),c=-o;return n.offset=c,n.arrayLength=h-o+1,n.leftIntegerIndex=0,n.rightIntegerIndex=h,n.rightIntegerIndex=h,n}resolveNamedType(e){if(e instanceof F){let t=e.symbol.stringValue,s=this.getType(t);return this.resolveNamedType(s)}return e}setValue(e,s,n,i=null){let r=n instanceof Ee||n instanceof ke||n instanceof Pe?n.value:n,a=null;e instanceof D?a=e:e instanceof g&&(a=e.identifier);let l=a.symbol.stringValue.toLowerCase();if(this.items.hasOwnProperty(l)){let n=this.items[l];if(n instanceof Ee||n instanceof ke||n instanceof Pe)this.sameType(n.getType(),s)?this.items[l].value=r:this.addTypeMismatchError(s,n,i);else if(n instanceof Oe){let t=null;if(e instanceof D)t=n.type,this.sameType(s,t)?this.setVariableObject(e,r.clone()):this.addTypeMismatchError(s,n,i);else if(e instanceof g){let a=e.indexRing;t=this.getDestinationType(n.type,a),this.sameType(s,t)?(r instanceof Oe&&(r=r.clone()),n.setValue(a,s,r)):this.addTypeMismatchError(s,n,i)}}else n instanceof Le&&s instanceof fe?this.sameType(n.type,s)?n.variable=r.variable:this.addTypeMismatchError(s,n,i):n instanceof Te&&s instanceof Re?this.typeIncluded(n.variableType,r.valueType)?n.valueType=r.valueType:this.addTypeMismatchError(n.variableType,r,i):this.addError(t.typesMismatch,null,i)}else this.parentScope?this.parentScope.setValue(e,s,r,i):this.addError(t.variableNotDeclared,`Variable '${l}' not declared.`,i)}setVariableValue(e,s,n=null){let i=s.getType(),r=null;e instanceof D?r=e:e instanceof g&&(r=e.identifier);let a=r.symbol.stringValue.toLowerCase();if(this.items.hasOwnProperty(a)){let r=this.items[a];if((r instanceof Ee||r instanceof ke||r instanceof Pe||r instanceof Oe&&e instanceof D||r instanceof Ve)&&(this.sameType(r.getType(),i)||this.addTypeMismatchError(i,r,n)),r instanceof Ee||r instanceof ke||r instanceof Pe)this.items[a].value=s.value;else if(r instanceof Oe){if(e instanceof D)this.setVariableObject(e,s.clone());else if(e instanceof g){let t=e.indexRing,a=this.getDestinationType(r.type,t);this.sameType(i,a)?(s=s.clone(),r.setValue(t,i,s)):this.addTypeMismatchError(i,r,n)}}else r instanceof Ve?this.setVariableObject(e,s.clone()):r instanceof Le&&i instanceof fe?this.sameType(r.type,i)?r.variable=s.variable:this.addTypeMismatchError(i,r,n):this.addError(t.typesMismatch,null,n)}else this.parentScope?this.parentScope.setVariableValue(e,s,n):this.addError(t.variableNotDeclared,`Variable '${a}' not declared.`,n)}setRecordVariableProperty(e,s,n){let i=n.getType(),r=e.getByPropertyIdentifier(s);this.sameType(r.getType(),i)||this.addTypeMismatchError(i,r,s),r instanceof Ee||r instanceof ke||r instanceof Pe?r.value=n.value:r instanceof Oe||r instanceof Ve?e.setPropertyByPropertyIdentifier(s,n.clone()):this.addError(t.typesMismatch,null,s)}setVariableObject(e,t){let s=e.symbol.stringValue.toLowerCase();this.items[s]=t}addTypeMismatchError(e,s,n){let i=Number.isInteger(e)?new L(null,e):e,r=!1===s.type?new L(null,s.typeId):s.type;this.addError(t.typesMismatch,`Type ${r} expected but ${i} found.`,n)}getDestinationType(e,t){return e instanceof me&&t&&null!==t?this.getDestinationType(e.typeOfElements,t.indexRing):e}getVariable(e){let t=e.toLowerCase();return this.items.hasOwnProperty(t)?this.items[t]:this.parentScope?this.parentScope.getVariable(e):null}getElementByIdentifier(e){if(e instanceof D){let t=e.symbol.value.toLowerCase();if(this.types.hasOwnProperty(t)){let e=this.types[t];return new Te(e,e)}return this.constants.hasOwnProperty(t)?this.constants[t]:this.items.hasOwnProperty(t)?this.items[t]:this.enumsItems.hasOwnProperty(t)?this.enumsItems[t]:this.parentScope?this.parentScope.getElementByIdentifier(e):null}}getEnumElement(e){let s=e.symbol.value.toLowerCase();if(this.enumsItems.hasOwnProperty(s))return this.enumsItems[s];this.addError(t.variableNotDeclared,`Enum element '${s}' not declared.`,e)}sameType(e,t){let s=e instanceof F?this.resolveNamedType(e):e,n=t instanceof F?this.resolveNamedType(t):t;if(s instanceof L)return s.typeId===n.typeId;if(s.constructor!==n.constructor)return!1;if(s instanceof pe)return Object.is(s,n);if(s instanceof Y||s instanceof ye){let e=this.getParametersArray(s),t=this.getParametersArray(n);return e.length===t.length&&(!(s instanceof Y)||this.sameType(s.returnType,n.returnType))}if(s instanceof me)return this.sameType(s.typeOfElements,n.typeOfElements)&&s.leftIndex.symbol.value===n.leftIndex.symbol.value&&s.rightIndex.symbol.value===n.rightIndex.symbol.value;if(s instanceof fe)return this.sameType(s.type,n.type);if(s instanceof $){let e=Object.keys(s.typesList).length===Object.keys(n.typesList).length,t=null;for(t in s.typesList){if(!e)return!1;e=e&&n.typesList.hasOwnProperty(t)&&this.sameType(s.typesList[t],n.typesList[t])}return e}}getParametersArray(e){let t=[],s=0,n=e.signature.length;for(let i=0;i<n;i++){let n=e.signature[i],r=n.identifiers.length;for(let e=0;e<r;e++)t[s++]=n}return t}addError(e,t=null,s=null){let i=this.errorsDescription.getErrorTextByCode(e)+(null===t?"":". "+t),r=null===s?null:s.symbol.textPosition;throw new n(e,i,r)}addType(e){let s=e.identifier.symbol.stringValue.toLowerCase();if(this.types.hasOwnProperty(s))this.addError(t.identifierAlreadyUsed,`Type '${s}' already declared.`,e);else if(this.types[s]=e.type,e.type instanceof pe){let s=this;e.type.items.forEach((function(n){let i=n.symbol.stringValue.toLowerCase();s.enumsItems.hasOwnProperty(i)&&s.addError(t.identifierAlreadyUsed,`Enumeration item '${i}' already declared.`,n),s.enumsItems[i]=new ke(n,e.type)}))}}getType(e,s=null){let n=e.toLowerCase();return this.types.hasOwnProperty(n)?this.types[n]:this.parentScope?this.parentScope.getType(e,s):void this.addError(t.typeNotDeclared,`Type '${n}' not declared.`,s)}getParametersList(){return this.parametersList}setParametersList(e){this.parametersList=e}addConstant(e){let s=e.identifier.symbol.stringValue,n=e.type,i=e.value,r=s.toLowerCase();if(this.constants.hasOwnProperty(r))this.addError(t.identifierAlreadyUsed,`Constant '${r}' already declared.`,e);else{let e=null,t=this.resolveNamedType(n);(null===t||t instanceof L)&&(e=new Ee(i.symbol.value,n?t.typeId:i.typeId)),this.constants[r]=e}}getVariableByReference(e){let s=e.symbol.value.toLowerCase();if(this.items.hasOwnProperty(s))return this.items[s];{let n=this.parentScope.getVariableByReference(e);if(n)return n;this.addError(t.variableNotDeclared,`Variable '${s}' not declared.`,e)}}addVariableByReference(e,t){let s=t.symbol.value.toLowerCase(),n=this.parentScope.getVariableByReference(e);this.items[s]=n}createDefaultVariable(e){if(e instanceof L){let t=null;switch(e.typeId){case 6:t=!1;break;case 2:t=String.fromCharCode(0);break;case 0:case 1:t=0;break;case 7:t=""}return new Ee(t,e.typeId)}if(e instanceof $)return new Ve(e,this);if(e instanceof ye){let t=new Ne;return t.signature=e.signature,t.type=e,new Pe(e,t)}if(e instanceof fe)return new Le(null,e);if(e instanceof Y){let t=new Ae;return t.signature=e.signature,t.returnType=e.returnType,t.name=new D({value:"outputValue"}),t.type=e,new Pe(e,t)}if(e instanceof me){let t=this.resolveNamedType(e),s=new Oe(t,this),n=t.leftIndex,i=t.rightIndex,r=this.getIntegerValueOfIndexConstant(n),a=this.getIntegerValueOfIndexConstant(i),l=Math.min(r,a),o=Math.max(r,a),h=-l;return s.offset=h,s.arrayLength=o-l+1,s.leftIntegerIndex=0,s.rightIntegerIndex=o,s.rightIntegerIndex=o,s}}typeIncluded(e,t){return e instanceof Me?t instanceof V||t instanceof P||t instanceof A||t instanceof pe:e instanceof De?t instanceof me:this.sameType(e,t)}checkType(e,t){return!(e instanceof Be&&!this.typeIncluded(e,t)||e instanceof O&&!this.sameType(e,t)||e instanceof Re&&!this.typeIncluded(e.type,t))}}class $e extends f{constructor(e,t,s=[]){super(e),this.identifier=t,this.parameters=s}}class Fe extends Ae{constructor(){super()}async innerRun(e){let t=e.getParametersList()[0].value.charCodeAt(0),s="ord";e.addVariable(s,this.type.returnType,null,null,!0),e.callableName=s,e.setValue(new Identifier(new Symbol(null,null,s)),new CharType,t)}}class qe extends Ae{constructor(){super()}async innerRun(e){let t=e.getParametersList()[0].value,s=String.fromCharCode(t),n="chr";e.addVariable(n,this.type.returnType,null,null,!0),e.callableName=n,e.setValue(new Identifier(new Symbol(null,null,n)),new P,s)}}class je extends Ae{constructor(){super("low"),this.type=new Y(null,[new de(null,!1,new De,[new D(new o(null,null,"array"))])],new Me)}async innerRun(e){let t=e.getVariable("array").type.leftIndex,s=null,n=t.typeId,i=t.symbol.value;switch(n){case 6:s=new V(null);break;case 2:s=new P(null);break;case 0:s=new A(null)}e.addVariable("low",s,i,null,!0),e.callableName="low"}}class ze extends Ae{constructor(){super("low"),this.type=new Y(null,[new de(null,!1,new Re(new De),[new D(new o(null,null,"array"))])],new Me)}async innerRun(e){let t=e.getVariable("array").valueType.leftIndex,s=null,n=t.typeId,i=t.symbol.value;switch(n){case 6:s=new V(null);break;case 2:s=new P(null);break;case 0:s=new A(null)}e.addVariable("low",s,i,null,!0),e.callableName="low"}}class Ue extends Ae{constructor(){super("high"),this.type=new Y(null,[new de(null,!1,new De,[new D(new o(null,null,"array"))])],new Me)}async innerRun(e){let t=e.getVariable("array").type.rightIndex,s=null,n=t.typeId,i=t.symbol.value;switch(n){case 6:s=new V(null);break;case 2:s=new P(null);break;case 0:s=new A(null)}let r="high";e.addVariable(r,s,i,null,!0),e.callableName=r}}class Ge extends Ae{constructor(){super("high"),this.type=new Y(null,[new de(null,!1,new Re(new De),[new D(new o(null,null,"array"))])],new Me)}async innerRun(e){let t=e.getVariable("array").valueType.rightIndex,s=null,n=t.typeId,i=t.symbol.value;switch(n){case 6:s=new V(null);break;case 2:s=new P(null);break;case 0:s=new A(null)}let r="high";e.addVariable(r,s,i,null,!0),e.callableName=r}}class _e extends Ae{constructor(){super("random"),this.type=new Y(null,[new de(null,!1,new A,[new D(new o(null,null,"limit"))])],new A)}async innerRun(e){let t=e.getVariable("limit"),s=Math.sign(t.value),n=Math.abs(t.value),i=Math.floor(Math.random()*n),r="random";e.addVariable(r,this.type.returnType,null,null,!0),e.callableName=r,e.setValue(new D(new o(null,null,r)),this.type.returnType,0===i?0:s*i)}}class Ke extends Ae{constructor(){super("random"),this.type=new Y(null,[],new B)}async innerRun(e){let t=Math.random(),s="random";e.addVariable(s,this.type.returnType,null,null,!0),e.callableName=s,e.setValue(new D(new o(null,null,s)),this.type.returnType,t)}}class Xe extends Ne{constructor(e,t){super(),this.outputStream=e,this.ouputNewLineSymbol=t,this.type=new ye(null,new Z,null)}async innerRun(e){let t=e.getParametersList();this.outputStream.write(t.map((function(e){return e instanceof ke?e.value.symbol.stringValue:e instanceof Ee?e.value:void 0})).join("")+this.ouputNewLineSymbol)}}class He extends Ne{constructor(e){super(),this.outputStream=e,this.type=new ye(null,new Z,null)}async innerRun(e){let t=e.getParametersList();this.outputStream.write(t.map((function(e){return e instanceof ke?e.value.symbol.stringValue:e instanceof Ee?e.value:void 0})).join(""))}}class Je extends Ne{constructor(e,t,s){super(),this.input=e,this.outputStream=t,this.ouputNewLineSymbol=s,this.type=new ye(null,new Z(!0),null),this.char=null}async innerRun(e,s){let n=e.getParametersList(),i=[],r=[];await n.forEach((async function(e){let t=await s.evaluateIdentifierBranch(e);r.push(t.typeId),i.push(t.type)}));let a=await this.getWords(r,this.ouputNewLineSymbol);await a.forEach((async function(a,l){let o=null;switch(r[l]){case 0:o=Number.parseInt(a),isNaN(o)&&e.addError(t.typesMismatch,`Integer value expected, but '${a}' found.`,n[l]);break;case 1:o=parseFloat(a),isNaN(o)&&e.addError(t.typesMismatch,`Float value expected, but '${a}' found.`,n[l]);break;case 2:case 7:o=a;break;default:let s=i[l];s||(s=new L(null,r[l])),e.addError(t.typesMismatch,`Cannot input value of this type: ${s}`,n[l])}let h=new Ee(o,r[l]);await s.setIdentifierBranchValue(n[l],h)}))}async getWords(e){let t=[];for(let s=0;s<e.length;s++){let n=await this.getWord(e[0]);t[s]=n}return t}async getWord(e){let t="";switch(e){case 2:null===this.char?t=await this.input.getChar():(t=this.char,this.char=null);break;case 0:case 1:for(;null===this.char||null!==/[\r\n\s\t]/.exec(this.char);)await this.nextChar();do{t+=this.char,await this.nextChar()}while(null===/[\r\n\s\t]/.exec(this.char));break;default:for(null===this.char&&await this.nextChar();this.char!==this.ouputNewLineSymbol;)t+=this.char,await this.nextChar()}return t}async nextChar(){let e=await this.input.getChar();this.char=e}}class Qe extends Ne{constructor(e,t,s){super(),this.input=e,this.outputStream=t,this.ouputNewLineSymbol=s,this.type=new ye(null,new Z(!0),null),this.char=null}async innerRun(e,s){let n=e.getParametersList(),i=[],r=[];await n.forEach((async function(e){let t=await s.evaluateIdentifierBranch(e);r.push(t.typeId),i.push(t.type)}));let a=await this.getWords(r,this.ouputNewLineSymbol);await a.forEach((async function(a,l){let o=null;switch(r[l]){case 0:o=Number.parseInt(a),isNaN(o)&&e.addError(t.typesMismatch,`Integer value expected, but '${a}' found.`,n[l]);break;case 1:o=parseFloat(a),isNaN(o)&&e.addError(t.typesMismatch,`Float value expected, but '${a}' found.`,n[l]);break;case 2:case 7:o=a;break;default:let s=i[l];s||(s=new L(null,r[l])),e.addError(t.typesMismatch,`Cannot input value of this type: ${s}`,n[l])}let h=new Ee(o,r[l]);await s.setIdentifierBranchValue(n[l],h)}))}async getWords(e){let t=[];for(let s=0;s<e.length;s++){let n=await this.getWord(e[0]);t[s]=n}return t}async getWord(e){let t="";switch(e){case 2:null===this.char?t=await this.input.getChar():(t=this.char,this.char=null);break;case 0:case 1:for(;null===this.char||null!==/[\r\n\s\t]/.exec(this.char);)await this.nextChar();do{t+=this.char,await this.nextChar()}while(null===/[\r\n\s\t]/.exec(this.char));break;default:for(null===this.char&&await this.nextChar();this.char!==this.ouputNewLineSymbol;)t+=this.char,await this.nextChar()}return t}async nextChar(){let e=await this.input.getChar();this.char=e}}class Ye extends Ne{constructor(){super(),this.type=new ye(null,[],null)}async innerRun(e){}}class Ze extends ee{constructor(e,t,s){super(),this.items.chr=new qe,this.items.ord=new Fe,this.items.random=[new _e,new Ke],this.items.low=[new je,new ze],this.items.high=[new Ue,new Ge],this.items.writeln=new Xe(t,s),this.items.write=new He(t),this.items.readln=new Je(e,t,s),this.items.read=new Qe(e,t,s),this.items.randomize=new Ye}addFunction(e,t){this.items[e.toLowerCase()]=t}}class et{constructor(e,t){this.tree=e,this.trees=[this.tree],this.treesCounter=0,this.scopes=[],this.currentScopeId=0,this.scopes[this.currentScopeId]=new We,this.functionsStore=new Ze(t.input,t.outputStream,t.ouputNewLineSymbol),this.errorsDescription=new s}getCurrentScope(){return this.scopes[this.currentScopeId]}async run(){if(this.setConstants(),this.setTypes(),this.setVariables(),this.tree.sentences)for(let e=0;e<this.tree.sentences.length;e++)await this.evaluateSentence(this.tree.sentences[e])}setVariables(){let e=this.getCurrentScope();this.tree.vars&&this.tree.vars.forEach((function(t){if(!(t instanceof q))throw"VariablesDeclaration object must be here!";t.variablesType,t.identifiers.forEach((function(s){if(!(s instanceof D))throw"Identifier must be here!";{e.addVariable(s,t.variablesType,null,s);let n=t.initialValue;n instanceof M&&e.setValue(s,n.type,n.symbol.value,n)}}))}))}setTypes(){let e=this.getCurrentScope();this.tree.types&&this.tree.types.forEach((function(t){if(!(t instanceof z))throw"TypeDeclaration object must be here!";e.addType(t)}))}setConstants(){let e=this.getCurrentScope();this.tree.constants&&this.tree.constants.forEach((function(t){if(!(t instanceof j))throw"ConstantDeclaration object must be here!";e.addConstant(t)}))}async evaluateIndexRing(e){return e.evaluatedIndexExpression=await this.evaluateExpression(e.indexExpression),e.indexRing instanceof w&&await this.evaluateIndexRing(e.indexRing),e}async evaluateIdentifierBranchRunner(e,t=null,s=null){let n=await this.evaluateIdentifierBranch(e,t,s);for(;n instanceof Pe;){let e=this.getCurrentScope(),t=n.value,i=t.type,r=i.returnType;if(!(Array.isArray(i.signature)&&0===i.signature.length&&null===s||!e.checkType(s,i)&&(i instanceof ye||e.checkType(s,r))))break;{let s=new We(e),i=null;if(t instanceof ie){let e=t.name;i=e.symbol.value.toLowerCase(),s.addVariable(e,t.type.returnType,null,null,!0),s.callableName=t.name.symbol.value}else t instanceof Ae&&(i=t.name);this.treesCounter++,this.tree=t,this.trees[this.treesCounter]=this.tree,this.currentScopeId++,this.scopes[this.currentScopeId]=s,await this.run(),"function"==typeof t.innerRun&&await t.innerRun(s,this);let r=null;(t instanceof Ae||t instanceof ie)&&(r=s.getVariable(i)),delete this.scopes[this.currentScopeId],this.currentScopeId--,this.treesCounter--,this.tree=this.trees[this.treesCounter],n=r}}return n}async evaluateIdentifierBranch(e,s=null,n=null){if(e instanceof D){let i=this.getCurrentScope(),r=e.symbol.value,a=i.getElementByIdentifier(e);if(null!==a)return a;let l=r.toLowerCase(),o=this.tree.functionsStore.getFunction(l,i,s,n)||this.functionsStore.getFunction(l,i,s,n);if(null!==o)return new Pe(Array.isArray(o)?new Y(null):o.type,o);this.addError(t.variableNotDeclared,`Element '${r}' not declared.`,e)}else{if(e instanceof g){this.getCurrentScope();let n=await this.evaluateIdentifierBranch(e.identifier,s);return n instanceof Oe||this.addError(t.arrayExpected,"Array expected",e),e.indexRing=await this.evaluateIndexRing(e.indexRing),n.getByIndexRing(e.indexRing)}if(e instanceof W){let t=e.parameters,s=await Promise.all(t.map((async e=>await this.evaluateExpression(e)))),n=[];Array.isArray(s)&&(n=s.map((e=>e.type)));let i=await this.evaluateIdentifierBranch(e.identifierBranch,n),r=i instanceof Pe?i.value:i,a=this.getCurrentScope(),l=new We(a),o=null;if(r instanceof ie){let e=r.name;o=e.symbol.value.toLowerCase(),l.addVariable(e,r.type.returnType,null,null,!0),l.callableName=r.name.symbol.value}else r instanceof Ae&&(o=r.name);await this.addParametersToScope(e.parameters,s,r.type.signature,l),this.treesCounter++,this.tree=r,this.trees[this.treesCounter]=this.tree,this.currentScopeId++,this.scopes[this.currentScopeId]=l,await this.run(),"function"==typeof r.innerRun&&await r.innerRun(l,this);let h=null;return(r instanceof Ae||r instanceof ie)&&(h=l.getVariable(o)),delete this.scopes[this.currentScopeId],this.currentScopeId--,this.treesCounter--,this.tree=this.trees[this.treesCounter],h}if(e instanceof S)return(await this.evaluateIdentifierBranch(e.pointer,s)).variable;if(e instanceof C){let t=await this.evaluateIdentifierBranch(e.baseExpression,s),n=e.subField;return t.getByPropertyIdentifier(n)}this.addError(t.typesMismatch,"Identifier branch expected.",e)}}async evaluateSentence(e){let s=this.getCurrentScope();if(e instanceof b){let n=e.destination,i=await this.evaluateIdentifierBranch(n),a=i.type,l=e.sourceExpression,o=await this.evaluateExpression(l,a),h=o.getType(),c=e.symbol.symbolCode;switch(c){case r.plusAssign:case r.minusAssign:case r.slashAssign:case r.starAssign:let s=i.getType(),n=s.typeId,a=h.typeId;switch(a){case 1:case 0:break;default:this.addError(t.typesMismatch,"Non-numeric source for assign operator",e)}switch(s.typeId){case 1:break;case 0:1!==a.typeId&&c!==r.slashAssign||this.addError(t.typesMismatch,"Cannot assign floating point value to an integer variable",e);break;default:this.addError(t.typesMismatch,"Non-numeric destination for assign operator",e)}let l=null;switch(c){case r.plusAssign:l=i.value+o.value;break;case r.minusAssign:l=i.value-o.value;break;case r.slashAssign:l=i.value/o.value;break;case r.starAssign:l=i.value*o.value}o=new Ee(l,n);default:case r.assign:}if(n instanceof C){let e=await this.evaluateIdentifierBranch(n.baseExpression),t=n.subField;s.setRecordVariableProperty(e,t,o)}else n instanceof g&&(n.indexRing=await this.evaluateIndexRing(n.indexRing)),s.setVariableValue(n,o,e.destination)}else if(e instanceof U){if(e.sentences){let t=e.sentences,s=t.length;for(let e=0;e<s;e++){let s=await this.evaluateSentence(t[e]);if(s instanceof Ce)return s}}}else{if(e instanceof G)return!0===(await this.evaluateExpression(e.condition)).value?await this.evaluateSentence(e.left):await this.evaluateSentence(e.right);if(e instanceof W||e instanceof $e)return await this.evaluateIdentifierBranch(e);if(e instanceof be){let t=this.getCurrentScope();for(t.cycleDepth++;!0===(await this.evaluateExpression(e.condition)).value&&!(await this.evaluateSentence(e.body)instanceof Ce););t.cycleDepth--}else if(e instanceof ge){let t=this.getCurrentScope();t.cycleDepth++;do{if(await this.evaluateSentence(e.body)instanceof Ce)break}while(!0!==(await this.evaluateExpression(e.condition)).value);t.cycleDepth--}else if(e instanceof xe){let t=this.getCurrentScope(),s=e.variableIdentifier,n=await this.evaluateExpression(e.initExpression),i=await this.evaluateExpression(e.lastExpression),r=null,a=null,l=n.typeId,o=n.type;if(t.setValue(s,o,n.value,s),e.countDown)switch(l){case 0:r=function(e){return e.value--,e},a=(e,t)=>e.value>=t.value;break;case 2:r=function(e){let t=e.value.charCodeAt(0);return t--,e.value=String.fromCharCode(t),e},a=(e,t)=>e.value.charCodeAt(0)>=t.value.charCodeAt(0);break;case 5:r=function(e){let t=e.type.items,s=t.length,n=e.getIndex();return n--,e.value=t[(n+s)%s],e},a=(e,t)=>e.getIndex()>=t.getIndex()}else switch(l){case 0:r=function(e){return e.value++,e},a=(e,t)=>e.value<=t.value;break;case 2:r=function(e){let t=e.value.charCodeAt(0);return t++,e.value=String.fromCharCode(t),e},a=(e,t)=>e.value.charCodeAt(0)<=t.value.charCodeAt(0);break;case 5:r=function(e){let t=e.type.items,s=t.length,n=e.getIndex();return n++,e.value=t[n%s],e},a=(e,t)=>e.getIndex()<=t.getIndex()}t.cycleDepth++;let h=5===l?new ke(n.value,o):new Ee(n.value,o),c=!0;for(;a(n,i)&&c&&!(await this.evaluateSentence(e.body)instanceof Ce);)h.value=n.value,n=r(n),t.setValue(s,o,n.value),c=a(h,n);t.cycleDepth--}else if(e instanceof Ce){if(!(this.getCurrentScope().cycleDepth<=0))return e;this.addError(t.breakOutOfLoop,null,e)}else if(e instanceof we){let s=await this.evaluateExpression(e.switchExpression),n=!1;this.getCurrentScope();for(let i=0;i<e.cases.length;i++){let r=e.cases[i];for(let e=0;e<r.constants.length;e++){let i=r.constants[e];if(i.typeId!==s.type.typeId&&this.addError(t.typesMismatch,"The constant and the switch expression have different types",i),i.symbol.value===s.value){n=!0,this.evaluateSentence(r.operator);break}}if(n)break}n||null===e.elseSentence||this.evaluateSentence(e.elseSentence)}else e instanceof D&&await this.evaluateIdentifierBranchRunner(e)}}async addParametersToScope(e,s,n,i){if(n instanceof Z)n.byReference?i.setParametersList(e):i.setParametersList(s);else{let r=0;for(let a=0;a<n.length;a++){let l=n[a],o=l.identifiers,h=l.byReference;for(let n=0;n<o.length;n++){let a=o[n],c=l.type,u=e[r];if(h)u instanceof D||this.addError(t.identifierExpected,"Cannot use other expressions here",u),i.addVariableByReference(u,a);else{let e=s[r];c instanceof Be&&(c=e.type),i.addVariable(a,c),i.setValue(a,c,e,a)}r++}}}}async evaluateExpression(e,t=null){if(e instanceof x){let t=e.identifier,s=await this.evaluateIdentifierBranch(t),n=s.getType();return new Le(s,n)}if(e instanceof ae){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),n=6,i=null;return i=5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()===s.getIndex():t.value===s.value,new Ee(i,n)}if(e instanceof he){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),n=6,i=null;return i=2===t.typeId&&2===s.typeId?t.value.charCodeAt(0)>s.value.charCodeAt(0):5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()>s.getIndex():t.value>s.value,new Ee(i,n)}if(e instanceof oe){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),n=6,i=null;return i=2===t.typeId&&2===s.typeId?t.value.charCodeAt(0)<s.value.charCodeAt(0):5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()<s.getIndex():t.value<s.value,new Ee(i,n)}if(e instanceof ce){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),n=6,i=null;return i=2===t.typeId&&2===s.typeId?t.value.charCodeAt(0)>=s.value.charCodeAt(0):5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()>=s.getIndex():t.value>=s.value,new Ee(i,n)}if(e instanceof ue){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),n=6,i=null;return i=2===t.typeId&&2===s.typeId?t.value.charCodeAt(0)<=s.value.charCodeAt(0):5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()<=s.getIndex():t.value<=s.value,new Ee(i,n)}if(e instanceof le){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),n=6,i=null;return i=5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()!==s.getIndex():t.value!==s.value,new Ee(i,n)}return e instanceof re?(await this.evaluateExpression(e.left),await this.evaluateExpression(e.right),new Ee(!1,6)):await this.evaluateSimpleExpression(e,t)}async evaluateSimpleExpression(e,t=null){if(e instanceof T||e instanceof k){let t=await this.evaluateSimpleExpression(e.left),s=await this.evaluateSimpleExpression(e.right),n=1===t.typeId||1===s.typeId?1:0,i=null;return e instanceof T?i=t.value+s.value:e instanceof k&&(i=t.value-s.value),new Ee(i,n)}if(e instanceof H){let t=await this.evaluateSimpleExpression(e.left),s=await this.evaluateSimpleExpression(e.right),n=6,i=t.value||s.value;return new Ee(i,n)}return await this.evaluateTerm(e,t)}async evaluateTerm(e,t=null){if(e instanceof Q){let t=await this.evaluateTerm(e.value);return new Ee(!t.value,t.typeId)}if(e instanceof J){let t=await this.evaluateTerm(e.value);return new Ee(-t.value,t.typeId)}if(e instanceof I){let t=await this.evaluateMultiplier(e.left),s=await this.evaluateMultiplier(e.right),n=1===t.typeId||1===s.typeId?1:0,i=t.value*s.value;return new Ee(i,n)}if(e instanceof E){let t=await this.evaluateMultiplier(e.left),s=await this.evaluateMultiplier(e.right),n=1,i=t.value/s.value;return new Ee(i,n)}if(e instanceof _){let t=await this.evaluateMultiplier(e.left),s=await this.evaluateMultiplier(e.right),n=0,i=Math.trunc(t.value/s.value);return new Ee(i,n)}if(e instanceof K){let t=await this.evaluateMultiplier(e.left),s=await this.evaluateMultiplier(e.right),n=0,i=t.value%s.value;return new Ee(i,n)}if(e instanceof X){let t=await this.evaluateMultiplier(e.left),s=await this.evaluateMultiplier(e.right),n=6,i=t.value&&s.value;return new Ee(i,n)}return await this.evaluateMultiplier(e,t)}async evaluateMultiplier(e,t=null){return e instanceof M?new Ee(e.symbol.value,e.typeId):e instanceof W||e instanceof D||e instanceof g||e instanceof S||e instanceof C?await this.evaluateIdentifierBranchRunner(e,null,t):await this.evaluateExpression(e)}addError(e,t=null,s=null){let i=this.errorsDescription.getErrorTextByCode(e)+(null===t?"":". "+t),r=null===s?null:s.symbol.textPosition;throw new n(e,i,r)}async setIdentifierBranchValue(e,t){let s=this.getCurrentScope();if(e instanceof C){let n=await this.evaluateIdentifierBranch(e.baseExpression),i=e.subField;s.setRecordVariableProperty(n,i,t)}else e instanceof g&&this.evaluateIndexRing(e.indexRing),s.setVariableValue(e,t,e)}}class tt{engine;error;constructor(e){this.config=e}async runString(e){let t=e=>{if(!(e instanceof n))throw e;{s.printListing(e);let t=this.config.listingOutput.outputLines;for(let e=0;e<t.length;e++)this.config.outputStream.addLine(t[e],!0);this.error=e}};try{var s=new i(e,this.config.listingOutput),r=new p(s),a=new ve(r).analyze(),l=new et(a,this.config);await l.run().catch(t)}catch(e){t(e)}return this.engine=l,l}getVar(e){return this.engine.getCurrentScope().items[e]}getVarValue(e){let t=this.getVar(e);return 3===t.typeId?this.getVar(e).items:5===t.typeId?this.getVar(e).value.symbol.stringValue:this.getVar(e).value}getError(){return this.error}}function st(e){return(e<10?1:Math.floor(Math.log10(e)))+1}class nt extends class{constructor(){this.errorsCounter=0}listErrors(e){e.forEach((e=>this.listError(e)))}getLinePrefix(e){return"  "+(e<10?"0":"")+e+"    "}getErrorText(e,t){var s=st(e.textPosition.lineNumber),n=s-st(t),i=n<0?2+n:2,r=s+4;return"**"+(t<10?"0":"")+"0".repeat(n>0?n:0)+t+"*".repeat(i)+" ".repeat(e.textPosition.charNumber+1)+"^ Error Code "+e.errorCode+"\n"+"*".repeat(r)+"  "+e.errorText}listError(e){console.log(this.getErrorText(e,++this.errorsCounter))}}{constructor(){super(),this.outputLines=[]}listLine(e,t){var s=this.getLinePrefix(t+1)+e;this.outputLines.push(s.replace(/[\n\r]/g,""))}listError(e){this.outputLines.push(this.getErrorText(e,++this.errorsCounter))}}class it{constructor(){this.screen=document.querySelector(".screen"),this.letters=[],this.lettersCounter=0}getLine(e=!1){let t=document.querySelector(".screen"),s=t.querySelectorAll("div"),n=null;return e||0===s.length?(n=document.createElement("div"),t.appendChild(n)):n=s[s.length-1],n}addLine(e,t=!1){let s=this.getLine(t),n=document.createElement("span");n.textContent=e.replace(/ /g," "),s.appendChild(n)}write(e){let t=e.split("\n");this.addLine(t[0]);for(let e=1;e<t.length;e++)this.addLine(t[e],!0)}async read(e=!1){let t=this.getLine(e),s=document.createElement("span");s.contentEditable="true",t.appendChild(s);let n=document.querySelector(".screen"),i=this,r=function(e){if("Enter"===e.key){let t=this.querySelector("span[contenteditable=true");t&&(t.contentEditable="false",i.addLine("",!0),e.preventDefault(),n.removeEventListener("click",r))}},a=new Promise((function(e,t){setInterval((()=>{"false"===s.contentEditable&&e(s.textContent)}),300)}));return n.addEventListener("keydown",r),a}async getChar(){if(0===this.letters.length||this.lettersCounter>=this.letters.length){let e=await this.read()+"\n";this.letters=e.split(""),this.lettersCounter=0}let e=this.letters[this.lettersCounter];return this.lettersCounter++,e}}function rt(e){let t=document.querySelector("div.screen div span[contenteditable=true]");if(e.preventDefault(),t){let e=document.createRange(),s=window.getSelection();0===t.childNodes.length&&t.appendChild(document.createTextNode(""));let n=t.childNodes[0].length;s.anchorOffset!==n&&0!==n||(e.setStart(t.childNodes[0],n),e.collapse(!0),s.removeAllRanges(),s.addRange(e))}}document.addEventListener("DOMContentLoaded",(()=>{let e=document.createElement("dialog"),t=document.createElement("div");t.classList.add("screen");let s=document.createElement("button");s.id="close",s.textContent="Закрыть",e.appendChild(t),e.appendChild(s),document.querySelector("body").appendChild(e),t.addEventListener("click",rt);let n=new it;const i={outputStream:n,listingOutput:new nt,ouputNewLineSymbol:"\n",input:n};let r=document.querySelectorAll("div.delphi");document.querySelector("#close").onclick=function(){e.close()},r.forEach((t=>{t.querySelector("div.toolbar span a.command_help");let s=document.createElement("div");s.classList.add("run_button"),s.textContent="▶";let n=t.parentNode;n.prepend(s),s.addEventListener("click",(async function(t){e.show();let s=n.querySelector("table tbody tr td.code div.container").querySelectorAll("div.line"),r=[];for(let e=0;e<s.length;e++){let t=[...s[e].childNodes];for(let e=0;e<t.length;e++){let s=t[e];r.push(s.tagName&&"BR"===s.tagName?"\n":t[e].textContent)}r.push("\n")}let a=r.join(""),l=new tt(i);try{await l.runString(a)}catch(e){}i.outputStream.value="",t.preventDefault()}))}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,