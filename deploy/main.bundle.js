(()=>{"use strict";class e{constructor(e=0,t=0){this.lineNumber=e,this.charNumber=t}}const t={inadmissibleSymbol:3,forbiddenCharacter:6,nameNotDescribed:104,breakOutOfLoop:105,identifierAlreadyUsed:106,variableNotDeclared:107,constantOrVariableNotDeclared:108,typesMismatch:109,typeNotDeclared:110,indexIsOutOfRange:111,identifierExpected:112,elementIsNotInitialized:113,notCallableElement:114,arrayExpected:115,recordPropertyIsNotDefined:116};class s{constructor(){this.errorCodeMapper=new Map([[1,"An error in primitive type"],[2,"Name expected"],[t.inadmissibleSymbol,"Inadmissible Symbol"],[t.forbiddenCharacter,"Forbidden character"],[t.nameNotDescribed,"Name is not described"],[t.breakOutOfLoop,"'break' is out of loop"],[t.identifierAlreadyUsed,"Identifier already used"],[t.variableNotDeclared,"Variable not declared"],[t.constantOrVariableNotDeclared,"Constant or variable not declared"],[t.typesMismatch,"Types mismatch"],[t.identifierExpected,"Identifier expected"],[t.indexIsOutOfRange,"Index is out of range"],[t.elementIsNotInitialized,"Element is not initialized"]])}getErrorTextByCode(e){return this.errorCodeMapper.has(e)?this.errorCodeMapper.get(e):null}}class i extends Error{constructor(e,t,s){super(t+` // line ${s.lineNumber} `+` column ${s.charNumber} `),this.errorCode=e,this.errorText=t,this.textPosition=s}}class n extends class{constructor(t,i){this.errorsDescription=new s,this.positionNow=new e,this.printer=t,this.reader=i,this.currentLine,this.currentLineErrors=[],this.lines=[],this.linePointer=0,this.currentLine,this.endOfFile=!1}setLines(e){this.lines=e.split(/\r?\n/),this.readNextLine()}getCurrentPosition(){return new e(this.positionNow.lineNumber,this.positionNow.charNumber)}nextCh(){return this.endOfFile&&this.positionNow.charNumber>=this.currentLine.length?null:(this.positionNow.charNumber===this.currentLine.length&&(this.currentLineErrors.length>0&&this.printer.listErrors(this.currentLineErrors),this.readNextLine(),this.currentLineErrors=[],this.positionNow.lineNumber++,this.positionNow.charNumber=0),this.currentLine[this.positionNow.charNumber++])}readNextLine(){var e=this.lines[this.linePointer++];this.currentLine=e.split(""),this.currentLine.push("\n"),this.endOfFile=this.linePointer===this.lines.length}addError(e,t=null,s=null){let n=this.errorsDescription.getErrorTextByCode(e)+(null===t?"":". "+t),r=null===s?this.getCurrentPosition():s;throw new i(e,n,r)}printListing(e=null){let t=e.textPosition.lineNumber;for(let e=0;e<=t;e++)this.printer.listLine(this.lines[e],e);this.printer.listError(e);for(let e=t+1;e<=this.lines.length-1;e++)this.printer.listLine(this.lines[e],e)}readWords(e){this.reader.readWords(e)}}{constructor(e,t,s=null){super(t,s),this.setLines(e)}}const r={star:21,slash:60,equal:16,comma:20,semicolon:14,colon:5,point:61,arrow:62,leftPar:9,rightPar:4,lBracket:11,rBracket:12,flPar:63,frPar:64,later:65,greater:66,laterEqual:67,greaterEqual:68,laterGreater:69,plus:70,minus:71,lComment:72,rComment:73,assign:51,twoPoints:74,at:75,ident:2,floatC:82,intC:15,charC:83,stringC:84,booleanC:85,caseSy:31,elseSy:32,fileSy:57,gotoSy:33,thenSy:52,untilSy:53,doSy:54,withSy:37,ifSy:56,ofSy:102,orSy:103,inSy:104,toSy:105,endSy:106,varSy:107,divSy:108,andSy:109,notSy:110,forSy:111,modSy:112,nilSy:113,setSy:114,typeSy:120,realSy:121,charSy:122,beginSy:123,whileSy:124,arraySy:125,constSy:126,labelSy:127,downtoSy:128,stringSy:129,packedSy:130,recordSy:131,repeatSy:132,integerSy:133,booleanSy:134,programSy:135,functionSy:136,procedureSy:137,breakSy:138,trueSy:139,falseSy:140};class a{constructor(){this.keyWordsCodes=new Map([["if",r.ifSy],["do",r.doSy],["of",r.ofSy],["or",r.orSy],["in",r.inSy],["to",r.toSy],["end",r.endSy],["var",r.varSy],["div",r.divSy],["and",r.andSy],["not",r.notSy],["for",r.forSy],["mod",r.modSy],["nil",r.nilSy],["set",r.setSy],["then",r.thenSy],["else",r.elseSy],["case",r.caseSy],["file",r.fileSy],["goto",r.gotoSy],["type",r.typeSy],["with",r.withSy],["real",r.realSy],["char",r.charSy],["true",r.trueSy],["begin",r.beginSy],["break",r.breakSy],["while",r.whileSy],["array",r.arraySy],["const",r.constSy],["label",r.labelSy],["until",r.untilSy],["false",r.falseSy],["downto",r.downtoSy],["string",r.stringSy],["packed",r.packedSy],["record",r.recordSy],["repeat",r.repeatSy],["program",r.programSy],["integer",r.integerSy],["boolean",r.booleanSy],["function",r.functionSy],["procedure",r.procedureSy]])}getSymbolCodeByKeyWord(e){let t=e.toLowerCase();return this.keyWordsCodes.has(t)?this.keyWordsCodes.get(t):r.ident}}class l{constructor(e,t,s,i){this.textPosition=e,this.symbolCode=t,this.stringValue=s,this.value=i}}class o extends l{constructor(e,t,s){super(e,t,s,s)}}class h extends l{constructor(e,t,s){super(e,t,s,parseFloat(s))}}class c extends l{constructor(e,t,s){super(e,t,s,Number.parseInt(s))}}class u extends l{constructor(e,t,s){super(e,t,s,s.replace(/'/g,""))}}class y extends l{constructor(e,t,s){super(e,t,s,s.replace(/'/g,""))}}class d extends l{constructor(e,t,s){super(e,t,s,"true"===s.toLowerCase())}}class p{constructor(e){this.fileIO=e,this.errorsCodes=t,this.token=null,this.currentWord=null,this.char=" ",this.symbol=null,this.MAX_IDENT=64,this.keyWords=new a,this.wordBuffer=null}nextSym(){return null===this.char?null:(this.skipWhiteSpaces(),this.token=this.fileIO.getCurrentPosition(),this.scanSymbol())}scanSymbol(){if(null===this.char)return null;if(null===this.wordBuffer?this.currentWord="":(this.currentWord=this.wordBuffer,this.wordBuffer=null),null!==/[a-z]/i.exec(this.char)){for(;null!==/\w/i.exec(this.char);)this.currentWord+=this.char,this.char=this.fileIO.nextCh();return this.getSymbol(this.keyWords.getSymbolCodeByKeyWord(this.currentWord))}if(null!==/[\d.]/.exec(this.char)){if(this.currentWord+=this.char,this.char=this.fileIO.nextCh(),".."===this.currentWord)return this.symbol=r.twoPoints,this.getSymbol(this.symbol);if("."===this.currentWord&&"."===this.char)return this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(r.twoPoints);if("."===this.currentWord&&null===/\d/.exec(this.char))return this.symbol=r.point,this.getSymbol(this.symbol);{let e="."===this.currentWord,t=null;for(;null!==/[\d.]/.exec(this.char);){if("."===this.char){if(e){if("."===t)return this.wordBuffer=".",new c(this.token,r.intC,this.currentWord);break}e=!0}t=this.char,this.currentWord+=this.char,this.char=this.fileIO.nextCh()}return e?new h(this.token,r.floatC,this.currentWord):new c(this.token,r.intC,this.currentWord)}}switch(this.currentWord+=this.char,this.char){case":":return this.char=this.fileIO.nextCh(),"="===this.char?(this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(r.assign)):this.getSymbol(r.colon);case"<":switch(this.char=this.fileIO.nextCh(),this.char){case"=":return this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(r.laterEqual);case">":return this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(r.laterGreater);default:return this.getSymbol(r.later)}case">":return this.char=this.fileIO.nextCh(),"="===this.char?(this.currentWord+=this.char,this.char=this.fileIO.nextCh(),this.getSymbol(r.greaterEqual)):this.getSymbol(r.greater);case"-":return this.char=this.fileIO.nextCh(),this.getSymbol(r.minus);case"+":return this.char=this.fileIO.nextCh(),this.getSymbol(r.plus);case"*":return this.char=this.fileIO.nextCh(),this.getSymbol(r.star);case"/":return this.char=this.fileIO.nextCh(),this.getSymbol(r.slash);case"=":return this.char=this.fileIO.nextCh(),this.getSymbol(r.equal);case",":return this.char=this.fileIO.nextCh(),this.getSymbol(r.comma);case";":return this.char=this.fileIO.nextCh(),this.getSymbol(r.semicolon);case"^":return this.char=this.fileIO.nextCh(),this.getSymbol(r.arrow);case"(":this.char=this.fileIO.nextCh();var e=null,t=this.currentWord;if("*"===this.char){do{e=t,t=this.fileIO.nextCh()}while("*"!==e||")"!==t);return this.char=this.fileIO.nextCh(),this.skipWhiteSpaces(),this.scanSymbol()}return this.getSymbol(r.leftPar);case")":return this.char=this.fileIO.nextCh(),this.getSymbol(r.rightPar);case"[":return this.char=this.fileIO.nextCh(),this.getSymbol(r.lBracket);case"]":return this.char=this.fileIO.nextCh(),this.getSymbol(r.rBracket);case"{":return this.char=this.fileIO.nextCh(),this.getSymbol(r.flPar);case"}":return this.char=this.fileIO.nextCh(),this.getSymbol(r.frPar);case"<":return this.char=this.fileIO.nextCh(),this.getSymbol(r.later);case">":return this.char=this.fileIO.nextCh(),this.getSymbol(r.greater);case"@":return this.char=this.fileIO.nextCh(),this.getSymbol(r.at);case"'":do{this.char=this.fileIO.nextCh(),this.currentWord+=this.char}while("'"!==this.char);return this.char=this.fileIO.nextCh(),3===this.currentWord.length?new u(this.token,r.charC,this.currentWord):new y(this.token,r.stringC,this.currentWord)}return this.addForbiddenCharacterError(this.char),this.char=this.fileIO.nextCh(),null}getSymbol(e){return e===r.trueSy||e===r.falseSy?new d(this.token,r.booleanC,this.currentWord):new o(this.token,e,this.currentWord)}skipWhiteSpaces(){for(var e=/\s/;null!==e.exec(this.char);)this.char=this.fileIO.nextCh()}addForbiddenCharacterError(e){this.fileIO.addError(this.errorsCodes.forbiddenCharacter,` '${e}'`,this.token)}}class m{constructor(){this.symbolCodeMapper=new Map([[r.star,"*"],[r.slash,"/"],[r.equal,"="],[r.comma,","],[r.semicolon,";"],[r.colon,":"],[r.point,"."],[r.arrow,"^"],[r.leftPar,"("],[r.rightPar,")"],[r.lBracket,"["],[r.rBracket,"]"],[r.flPar,"{"],[r.frPar,"}"],[r.later,"<"],[r.greater,">"],[r.laterEqual,"<="],[r.greaterEqual,">="],[r.laterGreater,"<>"],[r.plus,"+ "],[r.minus,"- "],[r.lComment,"(*"],[r.rComment,"*)"],[r.assign,":="],[r.twoPoints,".."],[r.ident,"Identifier"],[r.floatC,"Float Constant"],[r.intC,"Integer Constant"],[r.charC,"Character Constant"],[r.caseSy,"case"],[r.elseSy,"else"],[r.fileSy,"file"],[r.gotoSy,"goto"],[r.thenSy,"then"],[r.untilSy,"until"],[r.doSy,"do"],[r.withSy,"with"],[r.ifSy,"if"],[r.ofSy,"of"],[r.orSy,"or"],[r.inSy,"in"],[r.toSy,"to"],[r.endSy,"end"],[r.varSy,"var"],[r.divSy,"div"],[r.andSy,"and"],[r.notSy,"not"],[r.forSy,"for"],[r.modSy,"mod"],[r.nilSy,"nil"],[r.setSy,"set"],[r.typeSy,"type"],[r.realSy,"real"],[r.charSy,"char"],[r.beginSy,"begin"],[r.whileSy,"while"],[r.arraySy,"array"],[r.constSy,"const"],[r.labelSy,"label"],[r.downtoSy,"downto"],[r.stringSy,"string"],[r.packedSy,"packed"],[r.recordSy,"record"],[r.repeatSy,"repeat"],[r.integerSy,"integer"],[r.programSy,"program"],[r.functionSy,"function"],[r.procedureSy,"procedure"]])}getSymbolTextByCode(e){return this.symbolCodeMapper.has(e)?this.symbolCodeMapper.get(e):null}}class f{constructor(e){this.symbol=e}}class b extends f{constructor(e,t,s){super(e),this.destination=t,this.sourceExpression=s}}class g extends f{constructor(e,t,s){super(e),this.identifier=t,this.indexRing=s}}class S extends f{constructor(e,t,s=null){super(e),this.indexExpression=t,this.indexRing=s,this.evaluatedIndexExpression=null}appendIndexRing(e){null===this.indexRing?this.indexRing=e:this.indexRing.appendIndexRing(e)}}class x extends f{constructor(e,t){super(e),this.pointer=t}}class w extends f{constructor(e,t){super(e),this.identifier=t}}class C extends f{constructor(e,t,s){super(e),this.baseExpression=t,this.subField=s}}class v extends f{constructor(e,t,s){super(e),this.left=t,this.right=s}}class I extends v{constructor(e,t,s){super(e,t,s)}}class E extends v{constructor(e,t,s){super(e,t,s)}}class L extends v{constructor(e,t,s){super(e,t,s)}}class O extends v{constructor(e,t,s){super(e,t,s)}}class P extends f{constructor(e){super(e);let t=null;switch(e.symbolCode){case r.intC:t=0;break;case r.floatC:t=1;break;case r.charC:t=2;break;case r.stringC:t=7;break;case r.booleanC:t=6;break;case r.ident:t=5}this.typeId=t}}class T extends f{constructor(e){super(e)}}class V extends f{constructor(e,t,s=[]){super(e),this.identifierBranch=t,this.parameters=s}}class k extends f{constructor(e,t){super(e),this.typeId=t}}class N extends k{constructor(e,t){super(e,t)}toString(){switch(this.typeId){case 6:return"boolean";case 2:return"char";case 0:return"integer";case 1:return"real";case 7:return"string"}}}class B extends k{constructor(e,t){super(e,4);let s=this;this.typesList={},t.forEach((e=>{let t=e.type;e.identifiers.forEach((e=>{let i=e.symbol.value;s.typesList[i]=t}))}))}toString(){let e=[],t=null;for(t in this.typesList)e.push(`${t}: `+this.typesList[t].toString());return`record(${e.join(", ")})`}}class R extends k{constructor(e){super(e,9)}toString(){return this.symbol.stringValue}}class M extends f{constructor(e,t,s,i){super(e),this.identifiers=t,this.variablesType=s,this.initialValue=i}}class D extends f{constructor(e,t,s,i=null){super(e),this.identifier=t,this.value=s,this.type=i}}class W extends f{constructor(e,t,s){super(e),this.identifier=t,this.type=s}}class A extends f{constructor(e){super(e),this.sentences=[]}}class $ extends f{constructor(e,t,s,i){super(e),this.condition=t,this.left=s,this.right=i}}class F extends v{constructor(e,t,s){super(e,t,s)}}class q extends v{constructor(e,t,s){super(e,t,s)}}class j extends v{constructor(e,t,s){super(e,t,s)}}class z extends v{constructor(e,t,s){super(e,t,s)}}class U extends f{constructor(e,t){super(e),this.value=t}}class G extends f{constructor(e,t){super(e),this.value=t}}class _{constructor(e=null){this.parentFunctionsStore=e,this.items={}}addFunction(e,t){this.items[e.toLowerCase()]=t}getFunction(e){let t=e.toLowerCase();return this.items.hasOwnProperty(t)?this.items[t]:this.parentFunctionsStore?this.parentFunctionsStore.getFunction(e):null}}class K extends f{constructor(e,t=null){super(e),this.name=null,this.vars=[],this.functionsStore=new _(t instanceof K?t.functionsStore:null),this.sentences=[],this.types=[],this.parentFunction=t}getType(){return this.type}}class X extends K{constructor(e){super(e)}}class H extends K{constructor(e,t=null,s=null){super(e,s),this.type=t}}class J extends K{constructor(e,t=null,s=null){super(e,s),this.type=t}}class Q extends v{constructor(e,t,s){super(e,t,s)}}class Y extends v{constructor(e,t,s){super(e,t,s)}}class Z extends v{constructor(e,t,s){super(e,t,s)}}class ee extends v{constructor(e,t,s){super(e,t,s)}}class te extends v{constructor(e,t,s){super(e,t,s)}}class se extends v{constructor(e,t,s){super(e,t,s)}}class ie extends v{constructor(e,t,s){super(e,t,s)}}class ne extends k{constructor(e,t=null,s=null){super(e,11),this.returnType=s,this.signature=t}toString(){let e=[];return this.signature.length>0&&this.signature.forEach((function(t,s){let i=t.identifiers.map((e=>e.symbol.stringValue)).join(", ");e[s]=i+": "+t.type.toString()})),`function(${e.join("; ")}): ${this.returnType.toString()}`}}class re extends k{constructor(e,t,s){super(e,10),this.identifiers=s,this.signature=t}toString(){let e=[];return this.signature.length>0&&this.signature.forEach((function(t,s){let i=t.identifiers.map((e=>e.symbol.stringValue)).join(", ");e[s]=i+": "+t.type.toString()})),`procedure(${e.join("; ")})`}}class ae extends f{constructor(e,t=!1,s=null,i=[]){super(e),this.type=s,this.identifiers=i,this.byReference=t}}class le extends k{constructor(e){super(e,5),this.items=[]}toString(){return`enum(${this.items.map((e=>e.symbol.stringValue)).join(", ")})`}}class oe extends k{constructor(e,t=null,s=null,i=null){super(e,3),this.typeOfElements=i,this.leftIndex=t,this.rightIndex=s}toString(){return`array [${this.leftIndex.symbol.value}..${this.rightIndex.symbol.value}] of ${this.typeOfElements}`}}class he extends k{constructor(e,t){super(e,8),this.type=t}toString(){return`^${this.type}`}}class ce extends f{constructor(e,t,s){super(e),this.condition=t,this.body=s}}class ue extends f{constructor(e,t,s){super(e),this.condition=t,this.body=s}}class ye extends f{constructor(e,t=null,s=[],i=null){super(e),this.switchExpression=t,this.cases=s,this.elseSentence=i}}class de extends f{constructor(e,t=[],s=null){super(e),this.constants=t,this.operator=s}}class pe extends f{constructor(e,t,s,i,n,r){super(e),this.variableIdentifier=t,this.initExpression=s,this.lastExpression=i,this.countDown=n,this.body=r}}class me extends f{constructor(e){super(e)}}class fe{constructor(e){this.lexicalAnalyzer=e,this.symbolsDescription=new m,this.symbol=null,this.tree=null,this.trees=[],this.treesCounter=0,this.errorDetected=!1}nextSym(){this.symbol=this.lexicalAnalyzer.nextSym()}anotherSymbolExpected(e){let s=`'${this.symbolsDescription.getSymbolTextByCode(e)}' expected but '${this.symbol.stringValue}' found.`;this.lexicalAnalyzer.fileIO.addError(t.inadmissibleSymbol,s,this.symbol.textPosition)}accept(e){if(null===this.symbol)return null;this.symbol.symbolCode===e?this.nextSym():(this.errorDetected=!0,this.anotherSymbolExpected(e),this.goToEnd())}analyze(){return this.tree=new X(this.symbol),this.trees[this.treesCounter]=this.tree,this.nextSym(),this.scanProgramme(),this.tree}scanProgramme(){this.symbol.symbolCode===r.programSy&&(this.nextSym(),this.tree.name=this.symbol.stringValue,this.accept(r.ident),this.accept(r.semicolon)),this.scanBlock(),this.accept(r.point)}scanBlock(){this.labelPart(),this.constPart(),this.typePart(),this.varPart(),this.procFuncPart(),this.statementPart()}labelPart(){}constPart(){if(this.symbol.symbolCode===r.constSy){this.tree.constants=[],this.nextSym();do{let e=this.symbol;this.accept(r.ident);let t=null;this.symbol.symbolCode===r.colon&&(this.nextSym(),t=this.scanType());let s=this.symbol;this.accept(r.equal);let i=this.scanConstant(),n=new D(s,new T(e),i,t);this.tree.constants.push(n),this.accept(r.semicolon)}while(this.symbol.symbolCode===r.ident)}}typePart(){if(this.tree.types=[],this.symbol.symbolCode===r.typeSy){this.nextSym();do{let e=this.symbol;this.accept(r.ident);let t=this.symbol;this.accept(r.equal);let s=this.scanType(),i=new W(t,new T(e),s);this.tree.types.push(i),this.accept(r.semicolon)}while(this.symbol.symbolCode===r.ident)}}varPart(){if(this.symbol.symbolCode===r.varSy){this.nextSym();do{this.tree.vars.push(this.scanVarDeclaration()),this.accept(r.semicolon)}while(!this.errorDetected&&this.symbol.symbolCode===r.ident)}}scanVarDeclaration(){let e=[],t=null,s=!1;do{t=new T(this.symbol),this.accept(r.ident),e.push(t),s=this.symbol.symbolCode===r.comma,s&&this.nextSym()}while(!this.errorDetected&&s);let i=this.symbol;this.accept(r.colon);let n=this.scanType(),a=null;return this.symbol.symbolCode===r.equal&&(this.nextSym(),a=this.scanConstant()),new M(i,e,n,a)}scanListArrayType(e){let t=null,s=this.scanConstant();this.accept(r.twoPoints);let i=this.scanConstant();return this.symbol.symbolCode===r.comma?(e=this.symbol,this.nextSym(),t=this.scanListArrayType()):(this.accept(r.rBracket),this.accept(r.ofSy),t=this.scanType()),new oe(e,s,i,t)}scanType(){let e=null;if(this.symbol.symbolCode===r.arrow){e=this.symbol,this.nextSym();let t=this.scanType();return new he(e,t)}if(this.symbol.symbolCode===r.integerSy||this.symbol.symbolCode===r.booleanSy||this.symbol.symbolCode===r.realSy||this.symbol.symbolCode===r.stringSy||this.symbol.symbolCode===r.charSy){e=this.symbol,this.nextSym();let t=null;switch(e.symbolCode){case r.charSy:t=2;break;case r.integerSy:t=0;break;case r.stringSy:t=7;break;case r.realSy:t=1;break;case r.booleanSy:t=6}return new N(e,t)}if(this.symbol.symbolCode===r.ident)return e=this.symbol,this.nextSym(),new R(e);if(this.symbol.symbolCode===r.arraySy)return e=this.symbol,this.nextSym(),this.accept(r.lBracket),this.scanListArrayType(e);if(this.symbol.symbolCode===r.leftPar){let e=new le(this.symbol),t=null;do{this.nextSym(),t=new T(this.symbol),e.items.push(t),this.accept(r.ident)}while(this.symbol.symbolCode===r.comma);return this.accept(r.rightPar),e}if(this.symbol.symbolCode===r.functionSy){let e=new ne(this.symbol);return this.nextSym(),e.signature=this.scanParametersList(),this.accept(r.colon),e.returnType=this.scanType(),e}if(this.symbol.symbolCode===r.procedureSy){let e=new re(this.symbol);return this.nextSym(),e.signature=this.scanParametersList(),e}if(this.symbol.symbolCode===r.recordSy){let e=this.symbol;this.nextSym();let t=[];do{if(t.length>0&&(this.symbol.symbolCode===r.semicolon&&this.nextSym(),this.symbol.symbolCode===r.endSy))break;let e=new ae(this.symbol),s=[];do{s.length>0&&this.symbol.symbolCode===r.comma&&this.nextSym(),s.push(new T(this.symbol)),this.accept(r.ident)}while(this.symbol.symbolCode===r.comma);this.accept(r.colon),e.identifiers=s,e.type=this.scanType(),t.push(e)}while(this.symbol.symbolCode===r.semicolon);return this.accept(r.endSy),new B(e,t)}}procFuncPart(){for(;this.symbol.symbolCode===r.procedureSy||this.symbol.symbolCode===r.functionSy;)switch(this.symbol.symbolCode){case r.procedureSy:this.scanProcedure();break;case r.functionSy:this.scanFunction()}}scanProcedure(){let e=this.symbol;this.accept(r.procedureSy);let t=new T(this.symbol);this.accept(r.ident);let s=new re(e);s.signature=this.scanParametersList();let i=this.tree;this.treesCounter++,this.tree=new H(e,s,i),this.trees[this.treesCounter]=this.tree,this.tree.name=t;let n=this.tree.name.symbol.value.toLowerCase();this.tree.signature=this.scanParametersList(),this.accept(r.semicolon),this.scanBlock(),this.accept(r.semicolon),this.trees[this.treesCounter-1].functionsStore.addFunction(n,this.tree),this.treesCounter--,this.tree=this.trees[this.treesCounter]}scanFunction(){let e=this.symbol;this.accept(r.functionSy);let t=new T(this.symbol);this.accept(r.ident);let s=new ne(e);s.signature=this.scanParametersList(),this.accept(r.colon),s.returnType=this.scanType();let i=this.tree;this.treesCounter++,this.tree=new J(e,s,i),this.trees[this.treesCounter]=this.tree,this.tree.name=t;let n=this.tree.name.symbol.value.toLowerCase();this.accept(r.semicolon),this.scanBlock(),this.accept(r.semicolon),this.trees[this.treesCounter-1].functionsStore.addFunction(n,this.tree),this.treesCounter--,this.tree=this.trees[this.treesCounter]}scanParametersList(){let e=[];if(this.symbol.symbolCode===r.leftPar){if(this.nextSym(),this.symbol.symbolCode!==r.rightPar)do{e.length>0&&this.symbol.symbolCode===r.semicolon&&this.nextSym();let t=!1;this.symbol.symbolCode===r.varSy&&(t=!0,this.nextSym());let s=new ae(this.symbol,t),i=[];do{i.length>0&&this.symbol.symbolCode===r.comma&&this.nextSym(),i.push(new T(this.symbol)),this.accept(r.ident)}while(this.symbol.symbolCode===r.comma);this.accept(r.colon),s.identifiers=i,s.type=this.scanType(),e.push(s)}while(this.symbol.symbolCode===r.semicolon);this.accept(r.rightPar)}return e}statementPart(){for(this.accept(r.beginSy);null!==this.symbol&&this.symbol.symbolCode!==r.endSy;){let e=this.scanSentence();this.tree.sentences.push(e),this.symbol.symbolCode!==r.endSy&&this.accept(r.semicolon)}this.accept(r.endSy)}goToEnd(){do{this.nextSym()}while(null!==this.symbol)}scanSentence(){if(this.symbol.symbolCode===r.ident){let e=this.scanIdentifierBranch();if(this.symbol.symbolCode===r.assign){let t=this.symbol;return this.nextSym(),new b(t,e,this.scanExpression())}return e}if(this.symbol.symbolCode===r.beginSy)return this.scanCompoundOperator();if(this.symbol.symbolCode===r.ifSy){let e=this.symbol;this.nextSym();let t=this.scanExpression();this.accept(r.thenSy);let s=this.scanSentence(),i=null;return this.symbol.symbolCode===r.elseSy&&(this.nextSym(),i=this.scanSentence()),new $(e,t,s,i)}if(this.symbol.symbolCode===r.whileSy){let e=this.symbol;this.nextSym();let t=this.scanExpression();this.accept(r.doSy);let s=this.scanSentence();return new ce(e,t,s)}if(this.symbol.symbolCode===r.repeatSy){let e=this.symbol,t=new A(e);for(this.nextSym();null!==this.symbol&&this.symbol.symbolCode!==r.untilSy;){let e=this.scanSentence();t.sentences.push(e),this.accept(r.semicolon)}this.accept(r.untilSy);let s=t,i=this.scanExpression();return new ue(e,i,s)}if(this.symbol.symbolCode===r.forSy){let e=this.symbol;this.nextSym();let s=this.symbol;this.accept(r.ident);let i=new T(s);this.symbol,this.accept(r.assign);let n=this.scanSimpleExpression(),a=!1;switch(this.symbol.symbolCode){case r.downtoSy:a=!0;break;case r.toSy:a=!1;break;default:let e=`Symbols 'to' or 'downto' expected but '${this.symbol.stringValue}' found.`;this.addError(t.inadmissibleSymbol,e,this.symbol)}this.nextSym();let l=this.scanSimpleExpression();this.accept(r.doSy);let o=this.scanSentence();return new pe(e,i,n,l,a,o)}if(this.symbol.symbolCode===r.breakSy){let e=this.symbol;return this.nextSym(),new me(e)}if(this.symbol.symbolCode===r.caseSy){let e=this.symbol;this.nextSym();let t=this.scanExpression();this.accept(r.ofSy);let s=new ye(e,t);do{let e=new de(this.symbol),t=null;do{e.constants.push(this.scanConstant()),t=this.symbol.symbolCode===r.comma,t&&this.nextSym()}while(t);this.accept(r.colon),e.operator=this.scanSentence(),s.cases.push(e),this.symbol.symbolCode!==r.endSy&&this.symbol.symbolCode!==r.elseSy?this.accept(r.semicolon):this.symbol.symbolCode===r.semicolon&&this.nextSym()}while(this.symbol.symbolCode!==r.endSy&&this.symbol.symbolCode!==r.elseSy);return this.symbol.symbolCode===r.elseSy&&(this.nextSym(),s.elseSentence=this.scanSentence(),this.symbol.symbolCode===r.semicolon&&this.accept(r.semicolon)),this.accept(r.endSy),s}}scanCompoundOperator(){let e=new A(this.symbol);for(this.accept(r.beginSy);null!==this.symbol&&this.symbol.symbolCode!==r.endSy;){let t=this.scanSentence();e.sentences.push(t),this.symbol.symbolCode!==r.endSy&&this.accept(r.semicolon)}return this.accept(r.endSy),e}scanIndicesBrackets(e){this.accept(r.lBracket);let t=new S(e,this.scanExpression());for(;this.symbol.symbolCode===r.comma;){let e=this.symbol;this.nextSym();let s=new S(e,this.scanExpression());t.appendIndexRing(s)}return this.accept(r.rBracket),t}scanIndices(e){this.symbol;let t=this.scanIndicesBrackets(this.symbol);for(;this.symbol.symbolCode===r.lBracket;){let e=this.symbol,s=this.scanIndicesBrackets(e);t.appendIndexRing(s)}return t}scanIdentifierBranch(e=null){let t=null;if(null===e){let e=this.symbol;this.nextSym(),t=new T(e)}else t=e;switch(this.symbol.symbolCode){case r.leftPar:let e=this.symbol;this.nextSym();let s=this.scanParameters();return this.scanIdentifierBranch(new V(e,t,s));case r.lBracket:let i=this.symbol;return this.scanIdentifierBranch(new g(i,t,this.scanIndices()));case r.point:let n=this.symbol;this.nextSym();let a=new T(this.symbol);return this.accept(r.ident),this.scanIdentifierBranch(new C(n,t,a));case r.arrow:let l=this.symbol;return this.nextSym(),this.scanIdentifierBranch(new x(l,t));default:return t}}scanExpression(){if(this.symbol.symbolCode===r.at){let e=this.symbol;this.nextSym();let t=this.symbol;this.accept(r.ident);let s=new T(t),i=this.scanIdentifierBranch(s);return new w(e,i)}let e=this.scanSimpleExpression();switch(this.symbol.symbolCode){case r.equal:return this.nextSym(),new Y(this.symbol,e,this.scanSimpleExpression());case r.later:return this.nextSym(),new ee(this.symbol,e,this.scanSimpleExpression());case r.greater:return this.nextSym(),new te(this.symbol,e,this.scanSimpleExpression());case r.laterGreater:return this.nextSym(),new Z(this.symbol,e,this.scanSimpleExpression());case r.laterEqual:return this.nextSym(),new ie(this.symbol,e,this.scanSimpleExpression());case r.greaterEqual:return this.nextSym(),new se(this.symbol,e,this.scanSimpleExpression());case r.inSy:return this.nextSym(),new Q(this.symbol,e,this.scanSimpleExpression());default:return e}}scanSimpleExpression(){let e=!1,t=!1,s=null,i=null;switch(this.symbol.symbolCode){case r.minus:e=!0;case r.plus:i=this.symbol,this.nextSym();break;case r.notSy:t=!0,i=this.symbol,this.nextSym()}for(s=this.scanTerm(),e&&(s=new U(i,s)),t&&(s=new G(i,s));null!==this.symbol&&(this.symbol.symbolCode===r.plus||this.symbol.symbolCode===r.minus||this.symbol.symbolCode===r.orSy);)switch(this.symbol.symbolCode){case r.plus:this.nextSym(),s=new L(this.symbol,s,this.scanTerm());break;case r.minus:this.nextSym(),s=new O(this.symbol,s,this.scanTerm());break;case r.orSy:this.nextSym(),s=new z(this.symbol,s,this.scanTerm())}return s}scanTerm(){let e=this.scanMultiplier(),t=null;for(;[r.star,r.slash,r.divSy,r.modSy,r.andSy].includes(this.symbol.symbolCode);)switch(t=this.symbol.symbolCode,this.nextSym(),t){case r.star:e=new I(this.symbol,e,this.scanMultiplier());break;case r.slash:e=new E(this.symbol,e,this.scanMultiplier());break;case r.divSy:e=new F(this.symbol,e,this.scanMultiplier());break;case r.modSy:e=new q(this.symbol,e,this.scanMultiplier());break;case r.andSy:e=new j(this.symbol,e,this.scanMultiplier())}return e}scanMultiplier(){if(this.symbol.symbolCode===r.ident)return this.scanIdentifierBranch();if(this.symbol.symbolCode===r.floatC||this.symbol.symbolCode===r.intC||this.symbol.symbolCode===r.stringC||this.symbol.symbolCode===r.charC||this.symbol.symbolCode===r.booleanC)return this.scanUnsignedConstant();if(this.symbol.symbolCode===r.leftPar){this.nextSym();let e=this.scanExpression();return this.accept(r.rightPar),e}}scanParameters(){let e=[];if(this.symbol.symbolCode!==r.rightPar)do{e.length>0&&this.symbol.symbolCode===r.comma&&this.nextSym(),e.push(this.scanExpression())}while(this.symbol.symbolCode===r.comma);return this.accept(r.rightPar),e}scanUnsignedConstant(){let e=null;switch(this.symbol.symbolCode){case r.floatC:case r.intC:case r.charC:case r.stringC:case r.booleanC:e=new P(this.symbol),this.nextSym()}return e}scanConstant(){let e=!1,t=null;switch(this.symbol.symbolCode){case r.minus:t=this.symbol,this.nextSym(),e=!0;break;case r.plus:t=this.symbol,this.nextSym()}let s=null;switch(this.symbol.symbolCode){case r.floatC:case r.intC:case r.charC:case r.stringC:case r.booleanC:case r.ident:s=new P(this.symbol),this.nextSym()}return e&&(s=new U(t,s)),s}addError(e,t=null,s){this.lexicalAnalyzer.fileIO.addError(e,t,s.textPosition)}}class be{constructor(){this.type=null,this.typeId=null}getType(){return this.type?this.type:this.typeId}}class ge extends be{constructor(e,t){super(),this.value=e,this.typeId=t,this.type=!1}clone(){return new ge(this.value,this.typeId)}}class Se extends be{constructor(e,t){super(),this.value=e,this.typeId=5,this.type=t}getIndex(){let e=this.type.items.length;for(let t=0;t<e;t++)if(this.type.items[t].symbol.stringValue.toLowerCase()===this.value.symbol.stringValue.toLowerCase())return t}clone(){return new Se(this.value,this.type)}}class xe extends be{constructor(e,t){super(),this.typeId=3,this.type=e,this.scope=t,this.items=[],this.leftIntegerIndex=0,this.rightIntegerIndex=null,this.offset=null,this.arrayLength=null}setValue(e,s,i){let n=e.evaluatedIndexExpression,r=this.scope.getIntegerValueOfIndexVariable(n)+this.offset;r<0||r>=this.arrayLength?this.scope.addError(t.indexIsOutOfRange,"",e):void 0===this.items[r]&&(this.items[r]=this.scope.createVariable(this.type.typeOfElements,i));let a=this.items[r];null===e.indexRing?a.value=i.value:e.indexRing instanceof S&&a.setValue(e.indexRing,s,i)}getByIndexRing(e){let s=e.evaluatedIndexExpression,i=this.scope.getIntegerValueOfIndexVariable(s)+this.offset;if(!(i<0||i>=this.arrayLength)){void 0===this.items[i]&&(this.items[i]=this.scope.createDefaultVariable(this.type.typeOfElements));let t=this.items[i];return e.indexRing instanceof S?t.getByIndexRing(e.indexRing):t}this.scope.addError(t.indexIsOutOfRange,"",e)}clone(){let e=new xe(this.type,this.scope);return e.rightIntegerIndex=this.rightIntegerIndex,e.offset=this.offset,e.arrayLength=this.arrayLength,e.parentArray=this.parentArray,this.items.forEach(((t,s)=>{e.items[s]=t.clone()})),e}}class we extends be{constructor(e,t){super(),this.typeId=8,this.type=new he(null,t),this.variable=e}clone(){return new we(this.variable,this.type)}}class Ce extends be{constructor(e,t){super(),this.typeId=4,this.type=e,this.items={},this.scope=t}setPropertyByPropertyIdentifier(e,s){let i=e.symbol.value;this.type.typesList.hasOwnProperty(i)?this.items[i]=s:this.scope.addError(t.indexIsOutOfRange,`Property ${i} is not defined.`,e)}getByPropertyIdentifier(e){let s=e.symbol.value;if(this.type.typesList.hasOwnProperty(s)){if(!this.items.hasOwnProperty(s)){let e=this.type.typesList[s];this.items[s]=this.scope.createDefaultVariable(e)}return this.items[s]}this.scope.addError(t.indexIsOutOfRange,`Property ${s} is not defined.`,e)}clone(){let e=new Ce(this.type,this.scope),t=null;for(t in this.items)e.items[t]=this.items[t].clone(this.scope);return e}}class ve extends be{constructor(e,t=null){super(),this.type=e,this.typeId=e.typeId,this.value=t}clone(){return new ve(this.type,this.value)}}class Ie extends K{constructor(){super(),this.vars=[],this.signature=[],this.sentences=[],this.name=null}async innerRun(){}}class Ee extends Ie{constructor(){super(),this.returnType=null}}class Le{constructor(e=null){this.parentScope=e,this.items={},this.constants={},this.enumsItems={},this.types={},this.cycleDepth=0,this.errorsDescription=new s,this.parametersList=null,this.callableName=null}addVariable(e,s,i=null,n=null){let r=e.symbol.value.toLowerCase();this.constants.hasOwnProperty(r)?this.addError(t.identifierAlreadyUsed,`Constant '${r}' declared.`,null===n?s:n):this.items.hasOwnProperty(r)?this.addError(t.identifierAlreadyUsed,`Variable '${r}' already declared.`,null===n?s:n):this.items[r]=this.createVariable(s,i)}createVariable(e,t=null){let s=this.resolveNamedType(e);if(s instanceof N){if(null===t)switch(s.typeId){case 0:case 1:t=0;break;case 2:t=String.fromCharCode(0);break;case 7:t=""}return new ge(t,s.typeId)}if(s instanceof le)return null===t&&(t=s.items[0]),new Se(t,s);if(s instanceof oe)return this.createArrayVariable(t,e);if(s instanceof he){let s=this.resolveNamedType(e.type);return new we(t,s)}return s instanceof ne||s instanceof re||s instanceof B?this.createDefaultVariable(s):void 0}getIntegerValueOfIndexConstant(e){if(e instanceof P)switch(e.typeId){case 0:return e.symbol.value;case 2:return e.symbol.value.charCodeAt(0);case 5:return this.getEnumElement(e).getIndex()}else if(e instanceof U){let s=e.value;if(s instanceof P&&0===s.typeId)return-s.symbol.value;this.addError(t.typesMismatch,"Integer constant expected after unary minus.",s)}}getIntegerValueOfIndexVariable(e){switch(e.typeId){case 0:return e.value;case 2:return e.value.charCodeAt(0);case 5:return this.getEnumElement(e.value).getIndex()}}createArrayVariable(e,t){let s=this.resolveNamedType(t),i=new xe(s,this);i.parentArray=e;let n=s.leftIndex,r=s.rightIndex,a=this.getIntegerValueOfIndexConstant(n),l=this.getIntegerValueOfIndexConstant(r),o=Math.min(a,l),h=Math.max(a,l),c=-o;return i.offset=c,i.arrayLength=h-o+1,i.leftIntegerIndex=0,i.rightIntegerIndex=h,i.rightIntegerIndex=h,i}resolveNamedType(e){if(e instanceof R){let t=e.symbol.stringValue,s=this.getType(t);return this.resolveNamedType(s)}return e}setValue(e,s,i,n=null){let r=null;e instanceof T?r=e:e instanceof g&&(r=e.identifier);let a=r.symbol.stringValue.toLowerCase();if(this.items.hasOwnProperty(a)){let r=this.items[a];if(r instanceof ge||r instanceof Se||r instanceof ve)this.sameType(r.getType(),s)?this.items[a].value=i:this.addTypeMismatchError(s,r,n);else if(r instanceof xe){let t=null;if(e instanceof T)t=r.type,this.sameType(s,t)?this.setVariableObject(e,i.clone()):this.addTypeMismatchError(s,r,n);else if(e instanceof g){let a=e.indexRing;t=this.getDestinationType(r.type,a),this.sameType(s,t)?(i instanceof xe&&(i=i.clone()),r.setValue(a,s,i)):this.addTypeMismatchError(s,r,n)}}else r instanceof we&&s instanceof he?this.sameType(r.type,s)?r.variable=i.variable:this.addTypeMismatchError(s,r,n):this.addError(t.typesMismatch,null,n)}else this.parentScope?this.parentScope.setValue(e,s,i,n):this.addError(t.variableNotDeclared,`Variable '${a}' not declared.`,n)}setVariableValue(e,s,i=null){let n=s.getType(),r=null;e instanceof T?r=e:e instanceof g&&(r=e.identifier);let a=r.symbol.stringValue.toLowerCase();if(this.items.hasOwnProperty(a)){let r=this.items[a];if((r instanceof ge||r instanceof Se||r instanceof ve||r instanceof xe&&e instanceof T||r instanceof Ce)&&(this.sameType(r.getType(),n)||this.addTypeMismatchError(n,r,i)),r instanceof ge||r instanceof Se||r instanceof ve)this.items[a].value=s.value;else if(r instanceof xe){if(e instanceof T)this.setVariableObject(e,s.clone());else if(e instanceof g){let t=e.indexRing,a=this.getDestinationType(r.type,t);this.sameType(n,a)?(s=s.clone(),r.setValue(t,n,s)):this.addTypeMismatchError(n,r,i)}}else r instanceof Ce?this.setVariableObject(e,s.clone()):r instanceof we&&n instanceof he?this.sameType(r.type,n)?r.variable=s.variable:this.addTypeMismatchError(n,r,i):this.addError(t.typesMismatch,null,i)}else this.parentScope?this.parentScope.setVariableValue(e,s,i):this.addError(t.variableNotDeclared,`Variable '${a}' not declared.`,i)}setRecordVariableProperty(e,s,i){let n=i.getType(),r=e.getByPropertyIdentifier(s);this.sameType(r.getType(),n)||this.addTypeMismatchError(n,r,s),r instanceof ge||r instanceof Se||r instanceof ve?r.value=i.value:r instanceof xe||r instanceof Ce?e.setPropertyByPropertyIdentifier(s,i.clone()):this.addError(t.typesMismatch,null,s)}setVariableObject(e,t){let s=e.symbol.stringValue.toLowerCase();this.items[s]=t}addTypeMismatchError(e,s,i){let n=Number.isInteger(e)?new N(null,e):e,r=!1===s.type?new N(null,s.typeId):s.type;this.addError(t.typesMismatch,`Type ${r} expected but ${n} found.`,i)}getDestinationType(e,t){return e instanceof oe&&t&&null!==t?this.getDestinationType(e.typeOfElements,t.indexRing):e}getVariable(e){let t=e.toLowerCase();return this.items.hasOwnProperty(t)?this.items[t]:this.parentScope?this.parentScope.getVariable(e):null}getElementByIdentifier(e){if(e instanceof T){let t=e.symbol.value.toLowerCase();return this.constants.hasOwnProperty(t)?this.constants[t]:this.items.hasOwnProperty(t)?this.items[t]:this.enumsItems.hasOwnProperty(t)?this.enumsItems[t]:this.parentScope?this.parentScope.getElementByIdentifier(e):null}}getEnumElement(e){let s=e.symbol.value.toLowerCase();if(this.enumsItems.hasOwnProperty(s))return this.enumsItems[s];this.addError(t.variableNotDeclared,`Enum element '${s}' not declared.`,e)}sameType(e,t){if(Number.isInteger(e)&&Number.isInteger(t))return e===t;if(Number.isInteger(e)&&!Number.isInteger(t))return e===t.typeId;if(Number.isInteger(t)&&!Number.isInteger(e))return e.typeId===t;if(e.constructor!==t.constructor)return!1;if(e instanceof N)return e.typeId===t.typeId;if(e instanceof le)return Object.is(e,t);if(e instanceof ne||e instanceof re){let s=this.getParametersArray(e),i=this.getParametersArray(t);return s.length===i.length&&(!(e instanceof ne)||this.sameType(e.returnType,t.returnType))}if(e instanceof oe)return this.sameType(e.typeOfElements,t.typeOfElements)&&e.leftIndex.symbol.value===t.leftIndex.symbol.value&&e.rightIndex.symbol.value===t.rightIndex.symbol.value;if(e instanceof he)return this.sameType(e.type,t.type);if(e instanceof B){let s=Object.keys(e.typesList).length===Object.keys(t.typesList).length,i=null;for(i in e.typesList){if(!s)return!1;s=s&&t.typesList.hasOwnProperty(i)&&this.sameType(e.typesList[i],t.typesList[i])}return s}}getParametersArray(e){let t=[],s=0,i=e.signature.length;for(let n=0;n<i;n++){let i=e.signature[n],r=i.identifiers.length;for(let e=0;e<r;e++)t[s++]=i}return t}addError(e,t=null,s=null){let n=this.errorsDescription.getErrorTextByCode(e)+(null===t?"":". "+t),r=null===s?null:s.symbol.textPosition;throw new i(e,n,r)}addType(e){let s=e.identifier.symbol.stringValue.toLowerCase();if(this.types.hasOwnProperty(s))this.addError(t.identifierAlreadyUsed,`Type '${s}' already declared.`,e);else if(this.types[s]=e.type,e.type instanceof le){let s=this;e.type.items.forEach((function(i){let n=i.symbol.stringValue.toLowerCase();s.enumsItems.hasOwnProperty(n)&&s.addError(t.identifierAlreadyUsed,`Enumeration item '${n}' already declared.`,i),s.enumsItems[n]=new Se(i,e.type)}))}}getType(e,s=null){let i=e.toLowerCase();if(this.types.hasOwnProperty(i))return this.types[i];this.addError(t.typeNotDeclared,`Type '${i}' not declared.`,s)}getParametersList(){return this.parametersList}setParametersList(e){this.parametersList=e}addConstant(e){let s=e.identifier.symbol.stringValue,i=e.type,n=e.value,r=s.toLowerCase();if(this.constants.hasOwnProperty(r))this.addError(t.identifierAlreadyUsed,`Constant '${r}' already declared.`,e);else{let e=null,t=this.resolveNamedType(i);(null===t||t instanceof N)&&(e=new ge(n.symbol.value,i?t.typeId:n.typeId)),this.constants[r]=e}}getVariableByReference(e){let s=e.symbol.value.toLowerCase();if(this.items.hasOwnProperty(s))return this.items[s];{let i=this.parentScope.getVariableByReference(e);if(i)return i;this.addError(t.variableNotDeclared,`Variable '${s}' not declared.`,e)}}addVariableByReference(e,t){let s=t.symbol.value.toLowerCase(),i=this.parentScope.getVariableByReference(e);this.items[s]=i}createDefaultVariable(e){if(e instanceof N){let t=null;switch(e.typeId){case 6:t=!1;break;case 2:t=String.fromCharCode(0);break;case 0:case 1:t=0;break;case 7:t=""}return new ge(t,e.typeId)}if(e instanceof B)return new Ce(e,this);if(e instanceof re){let t=new Ie;return t.signature=e.signature,t.type=e,new ve(e,t)}if(e instanceof he)return new we(null,e);if(e instanceof ne){let t=new Ee;return t.signature=e.signature,t.returnType=e.returnType,t.name=new T({value:"outputValue"}),t.type=e,new ve(e,t)}if(e instanceof oe){let t=this.resolveNamedType(e),s=new xe(t,this),i=t.leftIndex,n=t.rightIndex,r=this.getIntegerValueOfIndexConstant(i),a=this.getIntegerValueOfIndexConstant(n),l=Math.min(r,a),o=Math.max(r,a),h=-l;return s.offset=h,s.arrayLength=o-l+1,s.leftIntegerIndex=0,s.rightIntegerIndex=o,s.rightIntegerIndex=o,s}}}class Oe extends f{constructor(e,t,s=[]){super(e),this.identifier=t,this.parameters=s}}class Pe extends Ee{constructor(){super(),this.returnType=new N(null,0)}async innerRun(e){let t=e.getParametersList()[0].value.charCodeAt(0);e.setValue("Ord",0,t)}}class Te extends Ee{constructor(){super(),this.returnType=new N(null,2)}async innerRun(e){let t=e.getParametersList()[0].value,s=String.fromCharCode(t);e.setValue("Chr",2,s)}}class Ve{constructor(e=!1){this.byReference=e}}class ke extends Ie{constructor(e,t){super(),this.outputStream=e,this.ouputNewLineSymbol=t,this.type=new re(null,new Ve,null)}async innerRun(e){let t=e.getParametersList();this.outputStream.write(t.map((function(e){return e instanceof Se?e.value.symbol.stringValue:e instanceof ge?e.value:void 0})).join("")+this.ouputNewLineSymbol)}}class Ne extends Ie{constructor(e){super(),this.outputStream=e,this.type=new re(null,new Ve,null)}async innerRun(e){let t=e.getParametersList();this.outputStream.write(t.map((function(e){return e instanceof Se?e.value.symbol.stringValue:e instanceof ge?e.value:void 0})).join(""))}}class Be extends Ie{constructor(e,t,s){super(),this.input=e,this.outputStream=t,this.ouputNewLineSymbol=s,this.type=new re(null,new Ve(!0),null),this.char=null}async innerRun(e,s){let i=e.getParametersList(),n=[],r=[];await i.forEach((async function(e){let t=await s.evaluateIdentifierBranch(e);r.push(t.typeId),n.push(t.type)}));let a=await this.getWords(r,this.ouputNewLineSymbol);await a.forEach((async function(a,l){let o=null;switch(r[l]){case 0:o=Number.parseInt(a),isNaN(o)&&e.addError(t.typesMismatch,`Integer value expected, but '${a}' found.`,i[l]);break;case 1:o=parseFloat(a),isNaN(o)&&e.addError(t.typesMismatch,`Float value expected, but '${a}' found.`,i[l]);break;case 2:case 7:o=a;break;default:let s=n[l];s||(s=new N(null,r[l])),e.addError(t.typesMismatch,`Cannot input value of this type: ${s}`,i[l])}let h=new ge(o,r[l]);await s.setIdentifierBranchValue(i[l],h)}))}async getWords(e){let t=[];for(let s=0;s<e.length;s++){let i=await this.getWord(e[0]);t[s]=i}return t}async getWord(e){let t="";switch(e){case 2:null===this.char?t=await this.input.getChar():(t=this.char,this.char=null);break;case 0:case 1:for(;null===this.char||null!==/[\r\n\s\t]/.exec(this.char);)await this.nextChar();do{t+=this.char,await this.nextChar()}while(null===/[\r\n\s\t]/.exec(this.char));break;default:for(null===this.char&&await this.nextChar();this.char!==this.ouputNewLineSymbol;)t+=this.char,await this.nextChar()}return t}async nextChar(){let e=await this.input.getChar();this.char=e}}class Re extends Ie{constructor(e,t,s){super(),this.input=e,this.outputStream=t,this.ouputNewLineSymbol=s,this.type=new re(null,new Ve(!0),null),this.char=null}async innerRun(e,s){let i=e.getParametersList(),n=[],r=[];await i.forEach((async function(e){let t=await s.evaluateIdentifierBranch(e);r.push(t.typeId),n.push(t.type)}));let a=await this.getWords(r,this.ouputNewLineSymbol);await a.forEach((async function(a,l){let o=null;switch(r[l]){case 0:o=Number.parseInt(a),isNaN(o)&&e.addError(t.typesMismatch,`Integer value expected, but '${a}' found.`,i[l]);break;case 1:o=parseFloat(a),isNaN(o)&&e.addError(t.typesMismatch,`Float value expected, but '${a}' found.`,i[l]);break;case 2:case 7:o=a;break;default:let s=n[l];s||(s=new N(null,r[l])),e.addError(t.typesMismatch,`Cannot input value of this type: ${s}`,i[l])}let h=new ge(o,r[l]);await s.setIdentifierBranchValue(i[l],h)}))}async getWords(e){let t=[];for(let s=0;s<e.length;s++){let i=await this.getWord(e[0]);t[s]=i}return t}async getWord(e){let t="";switch(e){case 2:null===this.char?t=await this.input.getChar():(t=this.char,this.char=null);break;case 0:case 1:for(;null===this.char||null!==/[\r\n\s\t]/.exec(this.char);)await this.nextChar();do{t+=this.char,await this.nextChar()}while(null===/[\r\n\s\t]/.exec(this.char));break;default:for(null===this.char&&await this.nextChar();this.char!==this.ouputNewLineSymbol;)t+=this.char,await this.nextChar()}return t}async nextChar(){let e=await this.input.getChar();this.char=e}}class Me extends _{constructor(e,t,s){super(),this.items.chr=new Te,this.items.ord=new Pe,this.items.writeln=new ke(t,s),this.items.write=new Ne(t),this.items.readln=new Be(e,t,s),this.items.read=new Re(e,t,s)}addFunction(e,t){this.items[e.toLowerCase()]=t}getFunction(e){let t=e.toLowerCase();return this.items.hasOwnProperty(t)?this.items[t]:null}}class De{constructor(e,t){this.tree=e,this.trees=[this.tree],this.treesCounter=0,this.scopes=[],this.currentScopeId=0,this.scopes[this.currentScopeId]=new Le,this.functionsStore=new Me(t.input,t.outputStream,t.ouputNewLineSymbol),this.errorsDescription=new s}getCurrentScope(){return this.scopes[this.currentScopeId]}async run(){if(this.setConstants(),this.setTypes(),this.setVariables(),this.tree.sentences)for(let e=0;e<this.tree.sentences.length;e++)await this.evaluateSentence(this.tree.sentences[e])}setVariables(){let e=this.getCurrentScope();this.tree.vars&&this.tree.vars.forEach((function(t){if(!(t instanceof M))throw"VariablesDeclaration object must be here!";t.variablesType,t.identifiers.forEach((function(s){if(!(s instanceof T))throw"Identifier must be here!";{e.addVariable(s,t.variablesType,null,s);let i=t.initialValue;i instanceof P&&e.setValue(s,i.typeId,i.symbol.value,i)}}))}))}setTypes(){let e=this.getCurrentScope();this.tree.types&&this.tree.types.forEach((function(t){if(!(t instanceof W))throw"TypeDeclaration object must be here!";e.addType(t)}))}setConstants(){let e=this.getCurrentScope();this.tree.constants&&this.tree.constants.forEach((function(t){if(!(t instanceof D))throw"ConstantDeclaration object must be here!";e.addConstant(t)}))}async evaluateIndexRing(e){return e.evaluatedIndexExpression=await this.evaluateExpression(e.indexExpression),e.indexRing instanceof S&&await this.evaluateIndexRing(e.indexRing),e}async evaluateIdentifierBranch(e){if(e instanceof T){let s=this.getCurrentScope(),i=e.symbol.value,n=null;if(n=s.getElementByIdentifier(e),null!==n)return n;let r=i.toLowerCase(),a=this.tree.functionsStore.getFunction(r)||this.functionsStore.getFunction(r);if(null!==a)return new ve(a.type,a);this.addError(t.variableNotDeclared,`Element '${i}' not declared.`,e)}else{if(e instanceof g){this.getCurrentScope();let s=await this.evaluateIdentifierBranch(e.identifier);return s instanceof xe||this.addError(t.arrayExpected,"Array expected",e),e.indexRing=await this.evaluateIndexRing(e.indexRing),s.getByIndexRing(e.indexRing)}if(e instanceof V){let t=await this.evaluateIdentifierBranch(e.identifierBranch),s=t instanceof ve?t.value:t,i=this.getCurrentScope(),n=new Le(i),r=null;if(s instanceof Ee||s instanceof J){let e=s.name;r=e.symbol.value.toLowerCase(),n.addVariable(e,s.type.returnType),n.callableName=s.name.symbol.value}await this.addParametersToScope(e.parameters,s.type.signature,n),this.treesCounter++,this.tree=s,this.trees[this.treesCounter]=this.tree,this.currentScopeId++,this.scopes[this.currentScopeId]=n,await this.run(),"function"==typeof s.innerRun&&await s.innerRun(n,this);let a=null;return(s instanceof Ee||s instanceof J)&&(a=n.getVariable(r)),delete this.scopes[this.currentScopeId],this.currentScopeId--,this.treesCounter--,this.tree=this.trees[this.treesCounter],a}if(e instanceof x)return(await this.evaluateIdentifierBranch(e.pointer)).variable;if(e instanceof C){let t=await this.evaluateIdentifierBranch(e.baseExpression),s=e.subField;return t.getByPropertyIdentifier(s)}this.addError(t.typesMismatch,"Identifier branch expected.",e)}}async evaluateSentence(e){let s=this.getCurrentScope();if(e instanceof b){let t=e.destination,i=e.sourceExpression,n=await this.evaluateExpression(i);if(n.getType(),t instanceof C){let e=await this.evaluateIdentifierBranch(t.baseExpression),i=t.subField;s.setRecordVariableProperty(e,i,n)}else t instanceof g&&(t.indexRing=await this.evaluateIndexRing(t.indexRing)),s.setVariableValue(t,n,e.destination)}else if(e instanceof A){if(e.sentences){let t=e.sentences,s=t.length;for(let e=0;e<s;e++){let s=await this.evaluateSentence(t[e]);if(s instanceof me)return s}}}else{if(e instanceof $)return!0===(await this.evaluateExpression(e.condition)).value?await this.evaluateSentence(e.left):await this.evaluateSentence(e.right);if(e instanceof V||e instanceof Oe)return await this.evaluateIdentifierBranch(e);if(e instanceof ce){let t=this.getCurrentScope();for(t.cycleDepth++;!0===(await this.evaluateExpression(e.condition)).value&&!(await this.evaluateSentence(e.body)instanceof me););t.cycleDepth--}else if(e instanceof ue){let t=this.getCurrentScope();t.cycleDepth++;do{if(await this.evaluateSentence(e.body)instanceof me)break}while(!0!==(await this.evaluateExpression(e.condition)).value);t.cycleDepth--}else if(e instanceof pe){let t=this.getCurrentScope(),s=e.variableIdentifier,i=await this.evaluateExpression(e.initExpression),n=await this.evaluateExpression(e.lastExpression),r=null,a=null,l=i.typeId,o=!1===i.type?l:i.type;if(t.setValue(s,o,i.value,s),e.countDown)switch(l){case 0:r=function(e){return e.value--,e},a=(e,t)=>e.value>=t.value;break;case 2:r=function(e){let t=e.value.charCodeAt(0);return t--,e.value=String.fromCharCode(t),e},a=(e,t)=>e.value.charCodeAt(0)>=t.value.charCodeAt(0);break;case 5:r=function(e){let t=e.type.items,s=t.length,i=e.getIndex();return i--,e.value=t[(i+s)%s],e},a=(e,t)=>e.getIndex()>=t.getIndex()}else switch(l){case 0:r=function(e){return e.value++,e},a=(e,t)=>e.value<=t.value;break;case 2:r=function(e){let t=e.value.charCodeAt(0);return t++,e.value=String.fromCharCode(t),e},a=(e,t)=>e.value.charCodeAt(0)<=t.value.charCodeAt(0);break;case 5:r=function(e){let t=e.type.items,s=t.length,i=e.getIndex();return i++,e.value=t[i%s],e},a=(e,t)=>e.getIndex()<=t.getIndex()}t.cycleDepth++;let h=5===l?new Se(i.value,o):new ge(i.value,l),c=!0;for(;a(i,n)&&c&&!(await this.evaluateSentence(e.body)instanceof me);)h.value=i.value,i=r(i),t.setValue(s,o,i.value),c=a(h,i);t.cycleDepth--}else if(e instanceof me){if(!(this.getCurrentScope().cycleDepth<=0))return e;this.addError(t.breakOutOfLoop,null,e)}else if(e instanceof ye){let s=await this.evaluateExpression(e.switchExpression),i=!1,n=this.getCurrentScope();for(let r=0;r<e.cases.length;r++){let a=e.cases[r];for(let e=0;e<a.constants.length;e++){let r=a.constants[e];if(n.sameType(r.typeId,s.getType())||this.addError(t.typesMismatch,"The constant and the switch expression have different types",r),r.symbol.value===s.value){i=!0,this.evaluateSentence(a.operator);break}}if(i)break}i||null===e.elseSentence||this.evaluateSentence(e.elseSentence)}}}async addParametersToScope(e,s,i){if(s instanceof Ve)if(s.byReference)i.setParametersList(e);else{let t=await Promise.all(e.map((async e=>await this.evaluateExpression(e))));i.setParametersList(t)}else{let n=0;for(let r=0;r<s.length;r++){let a=s[r],l=a.identifiers,o=a.byReference;for(let s=0;s<l.length;s++){let r=l[s],h=a.type,c=e[n];if(o)c instanceof T||this.addError(t.identifierExpected,"Cannot use other expressions here",c),i.addVariableByReference(c,r);else{let e=await this.evaluateExpression(c);i.addVariable(r,h),i.setValue(r,h,e.value,r)}n++}}}}async evaluateExpression(e){if(e instanceof w){let t=e.identifier,s=await this.evaluateIdentifierBranch(t),i=s.getType();return new we(s,i)}if(e instanceof Y){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),i=6,n=null;return n=5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()===s.getIndex():t.value===s.value,new ge(n,i)}if(e instanceof te){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),i=6,n=null;return n=2===t.typeId&&2===s.typeId?t.value.charCodeAt(0)>s.value.charCodeAt(0):5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()>s.getIndex():t.value>s.value,new ge(n,i)}if(e instanceof ee){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),i=6,n=null;return n=2===t.typeId&&2===s.typeId?t.value.charCodeAt(0)<s.value.charCodeAt(0):5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()<s.getIndex():t.value<s.value,new ge(n,i)}if(e instanceof se){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),i=6,n=null;return n=2===t.typeId&&2===s.typeId?t.value.charCodeAt(0)>=s.value.charCodeAt(0):5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()>=s.getIndex():t.value>=s.value,new ge(n,i)}if(e instanceof ie){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),i=6,n=null;return n=2===t.typeId&&2===s.typeId?t.value.charCodeAt(0)<=s.value.charCodeAt(0):5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()<=s.getIndex():t.value<=s.value,new ge(n,i)}if(e instanceof Z){let t=await this.evaluateExpression(e.left),s=await this.evaluateExpression(e.right),i=6,n=null;return n=5===t.typeId&&5===s.typeId&&Object.is(t.type,s.type)?t.getIndex()!==s.getIndex():t.value!==s.value,new ge(n,i)}return e instanceof Q?(await this.evaluateExpression(e.left),await this.evaluateExpression(e.right),new ge(!1,6)):await this.evaluateSimpleExpression(e)}async evaluateSimpleExpression(e){if(e instanceof L||e instanceof O){let t=await this.evaluateSimpleExpression(e.left),s=await this.evaluateSimpleExpression(e.right),i=1===t.typeId||1===s.typeId?1:0,n=null;return e instanceof L?n=t.value+s.value:e instanceof O&&(n=t.value-s.value),new ge(n,i)}if(e instanceof z){let t=await this.evaluateSimpleExpression(e.left),s=await this.evaluateSimpleExpression(e.right),i=6,n=t.value||s.value;return new ge(n,i)}return await this.evaluateTerm(e)}async evaluateTerm(e){if(e instanceof G){let t=await this.evaluateTerm(e.value);return new ge(!t.value,t.typeId)}if(e instanceof U){let t=await this.evaluateTerm(e.value);return new ge(-t.value,t.typeId)}if(e instanceof I){let t=await this.evaluateMultiplier(e.left),s=await this.evaluateMultiplier(e.right),i=1===t.typeId||1===s.typeId?1:0,n=t.value*s.value;return new ge(n,i)}if(e instanceof E){let t=await this.evaluateMultiplier(e.left),s=await this.evaluateMultiplier(e.right),i=1,n=t.value/s.value;return new ge(n,i)}if(e instanceof F){let t=await this.evaluateMultiplier(e.left),s=await this.evaluateMultiplier(e.right),i=0,n=Math.trunc(t.value/s.value);return new ge(n,i)}if(e instanceof q){let t=await this.evaluateMultiplier(e.left),s=await this.evaluateMultiplier(e.right),i=0,n=t.value%s.value;return new ge(n,i)}if(e instanceof j){let t=await this.evaluateMultiplier(e.left),s=await this.evaluateMultiplier(e.right),i=6,n=t.value&&s.value;return new ge(n,i)}return await this.evaluateMultiplier(e)}async evaluateMultiplier(e){return e instanceof P?new ge(e.symbol.value,e.typeId):e instanceof V||e instanceof T||e instanceof g||e instanceof x||e instanceof C?await this.evaluateIdentifierBranch(e):await this.evaluateExpression(e)}addError(e,t=null,s=null){let n=this.errorsDescription.getErrorTextByCode(e)+(null===t?"":". "+t),r=null===s?null:s.symbol.textPosition;throw new i(e,n,r)}async setIdentifierBranchValue(e,t){let s=this.getCurrentScope();if(e instanceof C){let i=await this.evaluateIdentifierBranch(e.baseExpression),n=e.subField;s.setRecordVariableProperty(i,n,t)}else e instanceof g&&this.evaluateIndexRing(e.indexRing),s.setVariableValue(e,t,e)}}class We{engine;error;constructor(e){this.config=e}async runString(e){let t=e=>{if(!(e instanceof i))throw e;{s.printListing(e);let t=this.config.listingOutput.outputLines;for(let e=0;e<t.length;e++)this.config.outputStream.addLine(t[e],!0);this.error=e}};try{var s=new n(e,this.config.listingOutput),r=new p(s),a=new fe(r).analyze(),l=new De(a,this.config);await l.run().catch(t)}catch(e){t(e)}return this.engine=l,l}getVar(e){return this.engine.getCurrentScope().items[e]}getVarValue(e){let t=this.getVar(e);return 3===t.typeId?this.getVar(e).items:5===t.typeId?this.getVar(e).value.symbol.stringValue:this.getVar(e).value}getError(){return this.error}}function Ae(e){return(e<10?1:Math.floor(Math.log10(e)))+1}class $e extends class{constructor(){this.errorsCounter=0}listErrors(e){e.forEach((e=>this.listError(e)))}getLinePrefix(e){return"  "+(e<10?"0":"")+e+"    "}getErrorText(e,t){var s=Ae(e.textPosition.lineNumber),i=s-Ae(t),n=i<0?2+i:2,r=s+4;return"**"+(t<10?"0":"")+"0".repeat(i>0?i:0)+t+"*".repeat(n)+" ".repeat(e.textPosition.charNumber+1)+"^ Error Code "+e.errorCode+"\n"+"*".repeat(r)+"  "+e.errorText}listError(e){console.log(this.getErrorText(e,++this.errorsCounter))}}{constructor(){super(),this.outputLines=[]}listLine(e,t){var s=this.getLinePrefix(t+1)+e;this.outputLines.push(s.replace(/[\n\r]/g,""))}listError(e){this.outputLines.push(this.getErrorText(e,++this.errorsCounter))}}class Fe{constructor(){this.screen=document.querySelector(".screen"),this.letters=[],this.lettersCounter=0}getLine(e=!1){let t=document.querySelector(".screen"),s=t.querySelectorAll("div"),i=null;return e||0===s.length?(i=document.createElement("div"),t.appendChild(i)):i=s[s.length-1],i}addLine(e,t=!1){let s=this.getLine(t),i=document.createElement("span");i.textContent=e,s.appendChild(i)}write(e){let t=e.split("\n").map((function(e){return e.replace(/ /g," ")}));this.addLine(t[0]);for(let e=1;e<t.length;e++)this.addLine(t[e],!0)}async read(e=!1){let t=this.getLine(e),s=document.createElement("span");s.contentEditable="true",t.appendChild(s);let i=document.querySelector(".screen"),n=this,r=function(e){if("Enter"===e.key){let t=this.querySelector("span[contenteditable=true");t&&(t.contentEditable="false",n.addLine("",!0),e.preventDefault(),i.removeEventListener("click",r))}},a=new Promise((function(e,t){setInterval((()=>{"false"===s.contentEditable&&e(s.textContent)}),300)}));return i.addEventListener("keydown",r),a}async getChar(){if(0===this.letters.length||this.lettersCounter>=this.letters.length){let e=await this.read()+"\n";this.letters=e.split(""),this.lettersCounter=0}let e=this.letters[this.lettersCounter];return this.lettersCounter++,e}}function qe(e){let t=document.querySelector("div.screen div span[contenteditable=true]");if(e.preventDefault(),t){let e=document.createRange(),s=window.getSelection();0===t.childNodes.length&&t.appendChild(document.createTextNode(""));let i=t.childNodes[0].length;s.anchorOffset!==i&&0!==i||(e.setStart(t.childNodes[0],i),e.collapse(!0),s.removeAllRanges(),s.addRange(e))}}document.addEventListener("DOMContentLoaded",(()=>{let e=document.createElement("dialog"),t=document.createElement("div");t.classList.add("screen");let s=document.createElement("button");s.id="close",s.textContent="Закрыть",e.appendChild(t),e.appendChild(s),document.querySelector("body").appendChild(e),t.addEventListener("click",qe);let i=new Fe;const n={outputStream:i,listingOutput:new $e,ouputNewLineSymbol:"\n",input:i};let r=document.querySelectorAll("div.delphi");document.querySelector("#close").onclick=function(){e.close()},r.forEach((t=>{t.querySelector("div.toolbar span a.command_help");let s=document.createElement("div");s.classList.add("run_button"),s.textContent="▶";let i=t.parentNode;i.prepend(s),s.addEventListener("click",(async function(t){e.show();let s=i.querySelector("table tbody tr td.code div.container").querySelectorAll("div.line"),r=[];for(let e=0;e<s.length;e++){let t=[...s[e].childNodes];for(let e=0;e<t.length;e++){let s=t[e];r.push(s.tagName&&"BR"===s.tagName?"\n":t[e].textContent)}r.push("\n")}let a=r.join(""),l=new We(n);try{await l.runString(a)}catch(e){}n.outputStream.value="",t.preventDefault()}))}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,